{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/404.html","path":"404.html","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/zalmon.jpg","path":"images/zalmon.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"3a3182fc1280c0f973758944cd5b11c89eb70112","modified":1578238334000},{"_id":"source/CNAME","hash":"218e559807b8d97d4a64c7126676bac554c0b19e","modified":1578238334000},{"_id":"source/README.md","hash":"9b5dadf4285384f5e58e1fa034914bb6991630ad","modified":1578238334000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1578486410915},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1577859010000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1577859010000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1577859010000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1578486410915},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1578486410915},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1577859010000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1578486410915},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1577859010000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1578486410915},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1578486410915},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1577859010000},{"_id":"themes/next/_configxxxxxxxxx.yml","hash":"b89db0edb92103d798afd4f9b0bc993d277a626c","modified":1578489077205},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1578486410915},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1578486410915},{"_id":"themes/next/package.json","hash":"19dda7fab09594faba989669e29de88c4289877f","modified":1577859010000},{"_id":"source/_posts/Integer的拆装箱和缓存.md","hash":"36ce2cf4bc719259c0de7275cfdcf06f6622d5ea","modified":1578238334000},{"_id":"source/_posts/Java基本数据类型.md","hash":"bb2ffb3c4292b77cb33123f4dab7f692f591e329","modified":1578238334000},{"_id":"source/_posts/Java知识点总结.md","hash":"323247dc661e4f36b007786bbc0f467dc83a061f","modified":1578238334000},{"_id":"source/_posts/Java高级特性-反射.md","hash":"6d3ff5c85688786d7722c336456a805bb40ddf7d","modified":1578238334000},{"_id":"source/_posts/Linux 安装zsh & oh-my-zsh.md","hash":"d0fb484baf280f3303e94b88d69fb46ae5675f2d","modified":1578238334000},{"_id":"source/_posts/Linux的修炼之路：（一）发行版的选择-Ubuntu.md","hash":"1e83d3be934780bb5b27acd578a5759ed14932ee","modified":1578238334000},{"_id":"source/_posts/Linux的修炼之路：（二）Ubuntu的安装.md","hash":"10e7b293f03e75ff715395e0c367c80cf0faef6b","modified":1578238334000},{"_id":"source/_posts/MySQL压缩版安装记录.md","hash":"b102fff9c85a7d61af3df523ed9d448b59ced66d","modified":1578238334000},{"_id":"source/_posts/SpringBoot下实现AOP日志.md","hash":"3529c7088d4827d03de005bc5264e1804a8d93a7","modified":1578238334000},{"_id":"source/_posts/SpringBoot全局异常处理.md","hash":"fa9c5915315663f07dec2c7de1178b051dfb9245","modified":1578238334000},{"_id":"source/_posts/Windows10专业版激活教程.md","hash":"ee52d434769156a16f951c86e2e73b1efcc58371","modified":1578238334000},{"_id":"source/_posts/Windows10系统安装教程（UEFI+GPT）.md","hash":"ba454882ef5522b8dcb99f9b5343d1bb9b87cb08","modified":1578238334000},{"_id":"source/_posts/javap的基本用法.md","hash":"8f8ba565bee3dbad4452edebead3f9012f2eb5ca","modified":1578238334000},{"_id":"source/_posts/从Excel生成MySQL数据表-Apache-POI.md","hash":"d9b9558bdb7be851a9e146861c3d535356aa3c4d","modified":1578238334000},{"_id":"source/_posts/修改Ubuntu解锁界面的背景图片.md","hash":"cb4b14d9bbd91ffa1ecfe61b3c2a871d984b759f","modified":1578238334000},{"_id":"source/_posts/关于“怎么判断一个数是奇数”的思考.md","hash":"adb6bf200f62437fa736a578a7aee9ca51034971","modified":1578238334000},{"_id":"source/_posts/写一个简单的死锁.md","hash":"0a3ef6a9ba3e73c04ba84c6743d241c0596360d3","modified":1578238334000},{"_id":"source/_posts/列表循环问题.md","hash":"7a7fc430439174d9997186c2a3073e0354325b41","modified":1578238334000},{"_id":"source/_posts/初识Socket.md","hash":"a28d9c34c79a8d6e7d6befec4ec8b3b8983119a2","modified":1578238334000},{"_id":"source/_posts/用Hexo搭建博客.md","hash":"7f5f42e72b06be7859b25363ed682f9ed4b99a3e","modified":1578238334000},{"_id":"source/_posts/电脑重装系统后恢复hexo博客部署.md","hash":"8c344943d1e213b4ed324faaf69cce2c5b5df865","modified":1578238334000},{"_id":"source/about/index.md","hash":"dabd9e94bd345a53d3197f62838f053483c7034c","modified":1578491931616},{"_id":"source/_posts/配置Github公钥.md","hash":"f601b61f00596d90d2dd9d260a657dfffd73a295","modified":1578238334000},{"_id":"source/categories/index.md","hash":"ca804231d76336d9853aadf85b67b219418c756b","modified":1578238334000},{"_id":"source/tags/index.md","hash":"8c8b809971bf31b626f93a073c255705c4144e7f","modified":1578238334000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1577859010000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1578486410915},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1577859010000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1578486410915},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1577859010000},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577859010000},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577859010000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1578486410915},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1577859010000},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1577859010000},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1577859010000},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1577859010000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1578486410915},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1577859010000},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1577859010000},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1577859010000},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1577859010000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1578486410919},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1578486410919},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1578486410919},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1577859010000},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1577859010000},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1577859010000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1577859010000},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1577859010000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1577859010000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1578486410919},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1577859010000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1578486410919},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1578486410919},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1578486410939},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1578486410939},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1578486410939},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578486410923},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578486410919},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578486410919},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1577859010000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1578486410919},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1577859010000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1578486410919},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1577859010000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1578486410919},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1577859010000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1577859010000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1578486410919},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1578486410919},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1578486410919},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1577859010000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1578486410919},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1578486410919},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1578486410919},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1577859010000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1578486410919},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1578486410919},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1578486410919},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1578486410919},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1577859010000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1578486410919},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1578486410919},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1577859010000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1577859010000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1578486410919},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1578486410919},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1577859010000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1577859010000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1578486410919},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1577859010000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1577859010000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1577859010000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1578486410923},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1578486410923},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1577859010000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1578486410923},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1578486410923},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1578486410923},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1578486410923},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1578486410923},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1578486410923},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1578486410923},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1578486410923},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1578486410923},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578486410923},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1578486410923},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578486410923},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1578486410923},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1578486410923},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1578486410923},{"_id":"themes/next/_config.yml","hash":"ed8bdd30a79fb1fb12651b48eca031417cde680c","modified":1578490715692},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577859010000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577859010000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578486410923},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578486410923},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578486410923},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1577859010000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578486410923},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1578486410919},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1578486410919},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1577859010000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1578486410919},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1578486410919},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1578486410919},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1578486410919},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1578486410919},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1578486410919},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1578486410919},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577859010000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577859010000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1577859010000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1577859010000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1577859010000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1578486410919},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1578486410919},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1577859010000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1577859010000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1578486410919},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1578486410919},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1578486410919},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1578486410919},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1577859010000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1577859010000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1578486410919},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1578486410919},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1577859010000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1578486410919},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1578486410919},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1578486410923},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1577859010000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1577859010000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1577859010000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1577859010000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1577859010000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1577859010000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1577859010000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1578486410923},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1578486410923},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1578486410923},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1578486410923},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1578486410923},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1578486410923},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1578486410923},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1578486410923},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1578486410923},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1578486410923},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1578486410923},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1578486410923},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1578488730432},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"7617ec90d04a5cdf2e7bb2ecdd955a8778664fbc","modified":1578488730432},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1578488730432},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1578488730432},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1578486410927},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1578486410927},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1578486410927},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1578486410927},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1578486410927},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1578486410935},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1578486410935},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1578486410935},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1578486410935},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1578486410935},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1578486410935},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1578486410935},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1578486410935},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1578486410935},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1578486410935},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1578486410935},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1578486410935},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1578486410935},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1578486410935},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1578486410939},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1578486410939},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1578486410939},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1578486410939},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1578486410939},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1578486410935},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1578486410919},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1578486410919},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1578486410923},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1578486410923},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1578486410923},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1577859010000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1578486410923},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1578486410923},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1578486410923},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1578488730400},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"ecbdc8b52b4330ef350281a659c2898357e15b6a","modified":1578490225221},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1578488726360},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1578486410923},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"712ad6e0797217b7a7032c23d06e2cbacd7e48ca","modified":1578488730432},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"fd1b6267c89ab359510f522c46fd70bfd88f9668","modified":1578488730400},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1578488730432},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1578486410927},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1578486410927},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1578486410927},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1578486410939},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1578486410939},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1578486410923},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1578486410935},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1578486410935},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1578486410939},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1578486410919},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1578486410923},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1578486410923},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1578486410923},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1578486410923},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1578486410923},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1578486410923},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1578486410923},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1578486410923},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1578486410923},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1578486410923},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1578486410923},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1578486410923},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1578486410923},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1578488726360},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"164eaaffb08e9d3eae95920b9e67a2669b4e24bd","modified":1578488730400},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578486410927},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1578486410927},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1578486410931},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1578486410931},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1578486410935},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1578486410927},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/17/9eb5d6cd5f44ba3dd9e08b4ffcd83bb26db80a","hash":"03d593c92c9fad045d298f58afdbbcfbde923999","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/8c/150fefb741be4edee07810003c8a845113e209","hash":"067de29d5efa0a46cdc8f9f113820e5e09bfa50a","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ab/45cbef9bc70ceff60f1ed52f2a5c34f6ad5725","hash":"ee2fa8f3df0de9092a4fce015cefd76ea18f4cfd","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d1/b8c85241243a80f16d56e7a50244d3695f6e6e","hash":"baf56a83286c72af11667786dc59e7c58d30e427","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d6/5de52977302632417c21e015956fb3dab8cabd","hash":"e0c8f0483b20434e63748a649ca4afbb417997f4","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/e1/5c0793114874195462829db04d021face6640e","hash":"ff6c6d9f05b171ba67b44564ae3574d16eae6222","modified":1578488730396},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"04088d44304ede9ff4c66a3725444cad71096e18","modified":1578488730400},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1578486410939},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"164eaaffb08e9d3eae95920b9e67a2669b4e24bd","modified":1578488730400},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1578488730400},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1578486410931},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"164eaaffb08e9d3eae95920b9e67a2669b4e24bd","modified":1578488730400},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1577859010000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1577859010000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1577859010000},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1577859010000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1577859010000},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1577859010000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1577859010000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1577859010000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1577859010000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1577859010000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1577859010000},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1577859010000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1577859010000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1577859010000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1577859010000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1577859010000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1577859010000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1577859010000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1577859010000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1577859010000},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1577859010000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1577859010000},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1577859010000},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1577859010000},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1577859010000},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1577859010000},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1577859010000},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1577859010000},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1577859010000},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1577859010000},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1577859010000},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1577859010000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1577859010000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1577859010000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1577859010000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1577859010000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1577859010000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1577859010000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1577859010000},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1577859010000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1577859010000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1577859010000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1577859010000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1577859010000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1577859010000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1577859010000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1577859010000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1577859010000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1577859010000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1577859010000},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1577859010000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1577859010000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1577859010000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1577859010000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1577859010000},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1577859010000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1577859010000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1577859010000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1577859010000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1577859010000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1577859010000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1577859010000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1577859010000},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1577859010000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1577859010000},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1577859010000},{"_id":"themes/next/source/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1577859010000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1577859010000},{"_id":"themes/next/source/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1577859010000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1577859010000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1577859010000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1577859010000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1577859010000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1577859010000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1577859010000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1577859010000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1577859010000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1577859010000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1577859010000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1577859010000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1577859010000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1577859010000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1577859010000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1577859010000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1577859010000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1577859010000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1577859010000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1577859010000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1577859010000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1577859010000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1577859010000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1577859010000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1577859010000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1577859010000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1577859010000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1577859010000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1577859010000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1577859010000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1577859010000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1577859010000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1577859010000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1577859010000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1577859010000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1577859010000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1577859010000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1577859010000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1577859010000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1577859010000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1577859010000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1577859010000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1577859010000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1577859010000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1577859010000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1577859010000},{"_id":"themes/next/source/lib/theme-next-canvas-nest-master/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1571070413000},{"_id":"themes/next/source/lib/theme-next-canvas-nest-master/README.md","hash":"7617ec90d04a5cdf2e7bb2ecdd955a8778664fbc","modified":1571070413000},{"_id":"themes/next/source/lib/theme-next-canvas-nest-master/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1571070413000},{"_id":"themes/next/source/lib/theme-next-canvas-nest-master/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1571070413000},{"_id":"themes/next/source/lib/theme-next-canvas-nest-master/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1571070413000},{"_id":"themes/next/source/images/zalmon.jpg","hash":"728279be4829223e1087d7cc15579b05386c7f6b","modified":1578490510703},{"_id":"public/search.xml","hash":"21b34a46c5c0e4aa346e89a7018f28cf3e6f73e9","modified":1578491972128},{"_id":"public/about/index.html","hash":"672620714e7ce99fc6b37273de84ab3cc640974b","modified":1578491972128},{"_id":"public/categories/index.html","hash":"0f45abeaa7f3a03e3dbffa82771a697d95b4bd0f","modified":1578491972128},{"_id":"public/tags/index.html","hash":"65f6feb92c267e263fd61fce9cbed5a072d9b4e9","modified":1578491972128},{"_id":"public/archives/page/3/index.html","hash":"b36d89ea8850bdbd41104e45728c36d56f503734","modified":1578491972128},{"_id":"public/archives/2018/index.html","hash":"a29e115e47c291c2b281d03902a1fbb8de645644","modified":1578491972128},{"_id":"public/archives/2018/07/index.html","hash":"3f17791a8ce3d91f83520cf80462c1fa98c080fe","modified":1578491972128},{"_id":"public/archives/2018/08/index.html","hash":"c098521bb020b46bf90eb9c0467b096edbfaa42b","modified":1578491972128},{"_id":"public/archives/2018/11/index.html","hash":"9be4b5862e73d39d6395b2d4711d883ca3adb160","modified":1578491972128},{"_id":"public/archives/2019/page/2/index.html","hash":"42c7402d9573cde4a3f4e2257b341e550a23bd3e","modified":1578491972128},{"_id":"public/archives/2019/02/index.html","hash":"4d12b5e3943728333782125befc64d1c33d464c4","modified":1578491972128},{"_id":"public/archives/2019/04/index.html","hash":"2ac43733c09df421b18e361ab8feba1af6461231","modified":1578491972128},{"_id":"public/archives/2019/10/index.html","hash":"413a23b855f3b139de5aacd74565545e518e3bac","modified":1578491972128},{"_id":"public/archives/2020/index.html","hash":"5f54e1ec9bbffb8bb08351b2eb640172e451bb6b","modified":1578491972128},{"_id":"public/archives/2020/01/index.html","hash":"434a37540c9fab12cf4c684985ef215be32f524c","modified":1578491972128},{"_id":"public/categories/Java/index.html","hash":"163dcf0099339c3d72fe6ed06ce02ca8e520527e","modified":1578491972128},{"_id":"public/categories/Linux/index.html","hash":"652efecbe2f7cfbe075fa6780163a1636f342246","modified":1578491972128},{"_id":"public/categories/MySQL/index.html","hash":"834105f938379aec2615eed83ceb3006b2a6d5e0","modified":1578491972128},{"_id":"public/categories/Spring/index.html","hash":"b30abb691c80b2c3f82cd1f44fc448c0cf850cff","modified":1578491972128},{"_id":"public/categories/教程/index.html","hash":"88ad30c024a344d6b48e62d0fe4b4716d0b4fd16","modified":1578491972128},{"_id":"public/categories/JVM/index.html","hash":"1db2806dd66331863d2c484ba0eb910982046fd7","modified":1578491972128},{"_id":"public/categories/记录/index.html","hash":"964a4d840f6935366543c2f7ccc6b1a30bbfe6da","modified":1578491972128},{"_id":"public/categories/Git/index.html","hash":"b1ca1d3b76d4e63b38236bfcaafa2048c5b3bd8b","modified":1578491972128},{"_id":"public/tags/基础知识/index.html","hash":"36581b594c28e1dd6da5fe5884124b2c5eebe1ba","modified":1578491972128},{"_id":"public/tags/Linux/index.html","hash":"b2bcdc1eb0e9138887884383cc5595ec94d50eb6","modified":1578491972128},{"_id":"public/tags/Ubuntu/index.html","hash":"47a729d8d9ef60fc1325b25d974e12d918ebd399","modified":1578491972128},{"_id":"public/tags/MySQL/index.html","hash":"024137c6834ece8fa9788d027bdafd6a745c4b57","modified":1578491972128},{"_id":"public/tags/数据库/index.html","hash":"2bc0a76108c65f78c5ad1c41b51f584ae849b25a","modified":1578491972128},{"_id":"public/tags/Spring/index.html","hash":"103513598f9dbd0400bc108c10829b33513f5d06","modified":1578491972128},{"_id":"public/tags/SpringBoot/index.html","hash":"f9ef36e70bdc80e46879ee4c7679d71d442bb65c","modified":1578491972128},{"_id":"public/tags/AOP/index.html","hash":"741acb55f45ef47b298d9ef19f47817d379d6efc","modified":1578491972128},{"_id":"public/tags/异常/index.html","hash":"f33631f41fb27760b8f1e76d22783cd8ee9bcc3d","modified":1578491972128},{"_id":"public/tags/Windows/index.html","hash":"7d2100cbc5b80d2e03e3e9718af622ffb56c321d","modified":1578491972128},{"_id":"public/tags/系统/index.html","hash":"c386a4a65e0ed95e3c2b6197fcbaf1bcc8a8795b","modified":1578491972128},{"_id":"public/tags/javap/index.html","hash":"819e7e34a90fb93c8e37387b660b47133afbbf61","modified":1578491972128},{"_id":"public/tags/Excle/index.html","hash":"acf2bfee777e2fb528cdfe456681b8f716d00b1b","modified":1578491972128},{"_id":"public/tags/POI/index.html","hash":"aa051d63e18792d18cfe92e7b5e5182d5acc0ced","modified":1578491972128},{"_id":"public/tags/锁/index.html","hash":"2a87273b9a9d9157812f9f7a91e4a1c844c77308","modified":1578491972128},{"_id":"public/tags/Socket/index.html","hash":"d91ce59a2ad9c218a49f7ae0dc8e2eb07368e7ae","modified":1578491972128},{"_id":"public/tags/Hexo/index.html","hash":"8bf7bf7996f37e1ec3d8e86012e3f55f52d41711","modified":1578491972128},{"_id":"public/tags/Git/index.html","hash":"ccc3bdd8c74decbdce3853608253ba41b0892b60","modified":1578491972128},{"_id":"public/2020/01/08/电脑重装系统后恢复hexo博客部署/index.html","hash":"8281f8ef11b594e6a44fb5c7587eaa325663d34d","modified":1578491972128},{"_id":"public/2020/01/08/Linux 安装zsh & oh-my-zsh/index.html","hash":"54a78915e7fe9076d033671deffbcf25d89c82b2","modified":1578491972128},{"_id":"public/2019/10/09/Linux的修炼之路：（二）Ubuntu的安装/index.html","hash":"1923aeb9e9bc9ccb6b8819970660927f2625d19a","modified":1578491972128},{"_id":"public/2019/04/23/关于“怎么判断一个数是奇数”的思考/index.html","hash":"4d3df05b4f432785da16672ed5f03a00f971daeb","modified":1578491972128},{"_id":"public/2019/04/22/Linux的修炼之路：（一）发行版的选择-Ubuntu/index.html","hash":"4d901db44bbb3d0bcaa11bfb2005686dcf2d1ce4","modified":1578491972128},{"_id":"public/2019/04/02/Windows10专业版激活教程/index.html","hash":"ff2f1e361023b2a15e5cba02d6ef264d34165afa","modified":1578491972128},{"_id":"public/2019/02/27/从Excel生成MySQL数据表-Apache-POI/index.html","hash":"4107b1f13fc138e9be53a09822ddd7134a076e96","modified":1578491972128},{"_id":"public/2019/02/14/配置Github公钥/index.html","hash":"658516a9060f11a12978232629207d2a371e09c1","modified":1578491972128},{"_id":"public/2019/02/14/MySQL压缩版安装记录/index.html","hash":"3de10ec55bfb2ab31c6cef9ab055ed80363b546c","modified":1578491972128},{"_id":"public/2019/01/24/初识Socket/index.html","hash":"c969e525aef714552c89b889d8aba783b717ebb1","modified":1578491972128},{"_id":"public/2019/01/21/Windows10系统安装教程（UEFI+GPT）/index.html","hash":"c4148b5634e5f59084127ac05b7ec1785e87e39a","modified":1578491972128},{"_id":"public/2019/01/17/SpringBoot全局异常处理/index.html","hash":"a5da4e86ba26757e35f36f7ad1c4a93c4f19a9bd","modified":1578491972128},{"_id":"public/2019/01/17/javap的基本用法/index.html","hash":"5faa4abc7d974692689fdd38be1f90ea62b7beb7","modified":1578491972128},{"_id":"public/2019/01/17/SpringBoot下实现AOP日志/index.html","hash":"e2ece44823811a00b468d6c8c7cac9a917eb4d2a","modified":1578491972128},{"_id":"public/2019/01/17/写一个简单的死锁/index.html","hash":"c867bc98f59312f212bbdcd45b92dede1852feea","modified":1578491972128},{"_id":"public/2019/01/17/修改Ubuntu解锁界面的背景图片/index.html","hash":"e2e725610681a24824435af0546ebc9fad9da07c","modified":1578491972128},{"_id":"public/2018/11/17/Java知识点总结/index.html","hash":"334a6a07856e0ef183d0188981f007601761bacf","modified":1578491972128},{"_id":"public/2018/08/31/Integer的拆装箱和缓存/index.html","hash":"c62ab61b42f9338c661c43ddb865be431edaa252","modified":1578491972128},{"_id":"public/2018/08/31/列表循环问题/index.html","hash":"edfd760e7dcf48292df66abded70830f28ecd34a","modified":1578491972128},{"_id":"public/2018/08/31/Java基本数据类型/index.html","hash":"241720c8acf7b007c4be1462448e02629e351569","modified":1578491972128},{"_id":"public/2018/08/21/用Hexo搭建博客/index.html","hash":"491477b5a29986734216552627796644e949989b","modified":1578491972128},{"_id":"public/2018/07/24/Java高级特性-反射/index.html","hash":"95729fd3a3ba8376b031d23f8221a0727899d28b","modified":1578491972128},{"_id":"public/archives/index.html","hash":"1e630b54f415cd4ba5bb241e7e3e47fe42bc79f6","modified":1578491972128},{"_id":"public/archives/page/2/index.html","hash":"a6b42858a251d135af78854a3ea632efb08d043e","modified":1578491972128},{"_id":"public/archives/2019/index.html","hash":"d78822b2141334f1d7290f49b934c6bdb1b00433","modified":1578491972128},{"_id":"public/archives/2019/01/index.html","hash":"07bcb41b956b3adcc7a5dcc82f8d864d01d90702","modified":1578491972128},{"_id":"public/index.html","hash":"87fb7ca3752da07897179307a8d5adc0a6637d99","modified":1578491972128},{"_id":"public/page/2/index.html","hash":"ba08e077b6f5f17b20d106c00d551403658dc5cc","modified":1578491972128},{"_id":"public/page/3/index.html","hash":"4ed02f6f98d1d6d6fd422424d992ab38b59471d6","modified":1578491972128},{"_id":"public/tags/Java/index.html","hash":"a7ba507d82a7863e6512ccedc38616ab6d19d5f4","modified":1578491972128},{"_id":"public/404.html","hash":"3a3182fc1280c0f973758944cd5b11c89eb70112","modified":1578491972128},{"_id":"public/CNAME","hash":"218e559807b8d97d4a64c7126676bac554c0b19e","modified":1578491972128},{"_id":"public/README.md","hash":"9b5dadf4285384f5e58e1fa034914bb6991630ad","modified":1578491972128},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1578491972128},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1578491972128},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1578491972128},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1578491972128},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1578491972128},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1578491972128},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1578491972128},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1578491972128},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1578491972128},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1578491972128},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1578491972128},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1578491972128},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1578491972128},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1578491972128},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1578491972128},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1578491972128},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1578491972128},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1578491972128},{"_id":"public/images/zalmon.jpg","hash":"728279be4829223e1087d7cc15579b05386c7f6b","modified":1578491972128},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1578491972128},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1578491972128},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1578491972128},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1578491972128},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1578491972128},{"_id":"public/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1578491972128},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1578491972128},{"_id":"public/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1578491972128},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1578491972128},{"_id":"public/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1578491972128},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1578491972128},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1578491972128},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1578491972128},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1578491972128},{"_id":"public/lib/canvas-nest/README.html","hash":"87b739ed83cf64c8802657b00ae6e64a9a4728e5","modified":1578491972128},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1578491972128},{"_id":"public/css/main.css","hash":"ed2bd8580acc349ede8cb51c986e2546c485d110","modified":1578491972128},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1578491972128},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1578491972128},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1578491972128},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1578491972128}],"Category":[{"name":"Java","_id":"ck55bv1k50004w2pm1tom877d"},{"name":"Linux","_id":"ck55bv1kh000lw2pm4cqg7r7a"},{"name":"MySQL","_id":"ck55bv1km000yw2pmbi399pud"},{"name":"Spring","_id":"ck55bv1kp0015w2pm2bxid0z8"},{"name":"教程","_id":"ck55bv1ku001jw2pm3ki3f0da"},{"name":"JVM","_id":"ck55bv1l0001zw2pmb73ihho4"},{"name":"记录","_id":"ck55bv1l30025w2pmb6gr323x"},{"name":"Git","_id":"ck55bv1l6002gw2pmakvdcuxb"}],"Data":[],"Page":[{"title":"关于","date":"2018-07-03T08:02:24.000Z","typora-root-url":"..","_content":"\n### 欢迎访问我的博客\n\n初级程序员，Java使用者，喜欢电影、音乐和动漫，正在成长中。\n\n与我交流，共同进步：\n\n🐙**Github:**[https://github.com/zalmon-sources\n\n📧**Gmail:**[443846049@qq.com](mailto:443846049@qq.com)\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-07-03 16:02:24\ntypora-root-url: ..\n---\n\n### 欢迎访问我的博客\n\n初级程序员，Java使用者，喜欢电影、音乐和动漫，正在成长中。\n\n与我交流，共同进步：\n\n🐙**Github:**[https://github.com/zalmon-sources\n\n📧**Gmail:**[443846049@qq.com](mailto:443846049@qq.com)\n\n","updated":"2020-01-08T13:58:51.616Z","path":"about/index.html","_id":"ck55bv1k10001w2pmgmenf3zg","comments":1,"layout":"page","content":"<h3 id=\"欢迎访问我的博客\"><a href=\"#欢迎访问我的博客\" class=\"headerlink\" title=\"欢迎访问我的博客\"></a>欢迎访问我的博客</h3><p>初级程序员，Java使用者，喜欢电影、音乐和动漫，正在成长中。</p>\n<p>与我交流，共同进步：</p>\n<p>🐙<strong>Github:</strong>[<a href=\"https://github.com/zalmon-sources\" target=\"_blank\" rel=\"noopener\">https://github.com/zalmon-sources</a></p>\n<p>📧<strong>Gmail:</strong><a href=\"mailto:443846049@qq.com\">443846049@qq.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎访问我的博客\"><a href=\"#欢迎访问我的博客\" class=\"headerlink\" title=\"欢迎访问我的博客\"></a>欢迎访问我的博客</h3><p>初级程序员，Java使用者，喜欢电影、音乐和动漫，正在成长中。</p>\n<p>与我交流，共同进步：</p>\n<p>🐙<strong>Github:</strong>[<a href=\"https://github.com/zalmon-sources\" target=\"_blank\" rel=\"noopener\">https://github.com/zalmon-sources</a></p>\n<p>📧<strong>Gmail:</strong><a href=\"mailto:443846049@qq.com\">443846049@qq.com</a></p>\n"},{"title":"分类","date":"2018-07-03T08:27:16.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-07-03 16:27:16\ntype: categories\ncomments: false\n---\n","updated":"2020-01-05T15:32:14.000Z","path":"categories/index.html","layout":"page","_id":"ck55bv1k30003w2pmc7cn12kw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-07-03T08:27:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-07-03 16:27:02\ntype: tags\ncomments: false\n---\n","updated":"2020-01-05T15:32:14.000Z","path":"tags/index.html","layout":"page","_id":"ck55bv1k70007w2pm9f8g1t0z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Integer的拆装箱和缓存","comments":1,"date":"2018-08-31T09:49:32.000Z","_content":"\nInteger作为基础类型int的包装类，提供了非常多的功能，增强了基础类型的一些方法使用，但是在使用的时候还是有一些问题需要注意的。\n\n<!-- more -->\n\n## true还是false？\n\n咱们先看下面这段代码：\n\n```java\npublic class IntegerTest {\n    public static void main(String[] args) {\n        Integer i1 = 1;\n        Integer i2 = 1;\n        System.out.println(i1 == i2);\n\n        Integer i3 = new Integer(200);\n        Integer i4 = new Integer(200);\n        System.out.println(i3 == i4);\n\n        Integer i5 = 200;\n        Integer i6 = 200;\n        System.out.println(i5 == i6);\n    }\n}\n```\n\n运行结果：\n\n> true\n> false\n> false\n\n`i3 == i4`返回结果为`false`可能会很容易理解，使用new关键字创建两个类，应当为其分配不同的内存空间，所以它们的地址应该是不同的。但是为什么`i1 == i2`返回结果为`true`，而`i5 == i6`返回结果为`false`呢？\n\n### 自动装箱\n\n实际上当给Integer对象赋值为数值对象时，Java虚拟机会执行装箱操作，就是将基础数据类型封装成对应的包装类，其底层调用的方法是Integer中的静态方法`Integer.valueOf(int i)`，那我们来看看这个方法具体是怎么做的。\n\n```java\n/**\n * Returns an {@code Integer} instance representing the specified\n * {@code int} value.  If a new {@code Integer} instance is not\n * required, this method should generally be used in preference to\n * the constructor {@link #Integer(int)}, as this method is likely\n * to yield significantly better space and time performance by\n * caching frequently requested values.\n *\n * This method will always cache values in the range -128 to 127,\n * inclusive, and may cache other values outside of this range.\n *\n * @param  i an {@code int} value.\n * @return an {@code Integer} instance representing {@code i}.\n * @since  1.5\n */\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n通过注解我们可以看到，这个方法会返回一个Integer对象的实例，当对象值处于`-128 ~ 127`之间时，从缓存中返回实例，不处于区间之中则通过new关键字创建一个实例并返回。\n\nIntegerCache是Integer类中的一个内部类，Java虚拟机会用它做一个对象的缓存池，缓存整型值介于`-128 ~ 127`之间的Integer对象实例，用以提升Java的性能。\n\n### 结论\n\n回到代码中，现在结论就应该很清楚了，i1和i2取值都为1，介于`-128 ~ 127`之间，所以直接返回的是缓存池中的实例，所以它们都指向同一个对象，地址是相等的，i5和i6取值都为200，不在缓存池中，所以都是新创建的对象实例，所以它们的地址不相等。","source":"_posts/Integer的拆装箱和缓存.md","raw":"---\ntitle: Integer的拆装箱和缓存\ncomments: true\ndate: 2018-08-31 17:49:32\ntags: [Java,基础知识]\ncategories: Java\n---\n\nInteger作为基础类型int的包装类，提供了非常多的功能，增强了基础类型的一些方法使用，但是在使用的时候还是有一些问题需要注意的。\n\n<!-- more -->\n\n## true还是false？\n\n咱们先看下面这段代码：\n\n```java\npublic class IntegerTest {\n    public static void main(String[] args) {\n        Integer i1 = 1;\n        Integer i2 = 1;\n        System.out.println(i1 == i2);\n\n        Integer i3 = new Integer(200);\n        Integer i4 = new Integer(200);\n        System.out.println(i3 == i4);\n\n        Integer i5 = 200;\n        Integer i6 = 200;\n        System.out.println(i5 == i6);\n    }\n}\n```\n\n运行结果：\n\n> true\n> false\n> false\n\n`i3 == i4`返回结果为`false`可能会很容易理解，使用new关键字创建两个类，应当为其分配不同的内存空间，所以它们的地址应该是不同的。但是为什么`i1 == i2`返回结果为`true`，而`i5 == i6`返回结果为`false`呢？\n\n### 自动装箱\n\n实际上当给Integer对象赋值为数值对象时，Java虚拟机会执行装箱操作，就是将基础数据类型封装成对应的包装类，其底层调用的方法是Integer中的静态方法`Integer.valueOf(int i)`，那我们来看看这个方法具体是怎么做的。\n\n```java\n/**\n * Returns an {@code Integer} instance representing the specified\n * {@code int} value.  If a new {@code Integer} instance is not\n * required, this method should generally be used in preference to\n * the constructor {@link #Integer(int)}, as this method is likely\n * to yield significantly better space and time performance by\n * caching frequently requested values.\n *\n * This method will always cache values in the range -128 to 127,\n * inclusive, and may cache other values outside of this range.\n *\n * @param  i an {@code int} value.\n * @return an {@code Integer} instance representing {@code i}.\n * @since  1.5\n */\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n通过注解我们可以看到，这个方法会返回一个Integer对象的实例，当对象值处于`-128 ~ 127`之间时，从缓存中返回实例，不处于区间之中则通过new关键字创建一个实例并返回。\n\nIntegerCache是Integer类中的一个内部类，Java虚拟机会用它做一个对象的缓存池，缓存整型值介于`-128 ~ 127`之间的Integer对象实例，用以提升Java的性能。\n\n### 结论\n\n回到代码中，现在结论就应该很清楚了，i1和i2取值都为1，介于`-128 ~ 127`之间，所以直接返回的是缓存池中的实例，所以它们都指向同一个对象，地址是相等的，i5和i6取值都为200，不在缓存池中，所以都是新创建的对象实例，所以它们的地址不相等。","slug":"Integer的拆装箱和缓存","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1jv0000w2pmbrjjak0n","content":"<p>Integer作为基础类型int的包装类，提供了非常多的功能，增强了基础类型的一些方法使用，但是在使用的时候还是有一些问题需要注意的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"true还是false？\"><a href=\"#true还是false？\" class=\"headerlink\" title=\"true还是false？\"></a>true还是false？</h2><p>咱们先看下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer i1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Integer i2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(i1 == i2);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer i3 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">200</span>);</span><br><span class=\"line\">        Integer i4 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">200</span>);</span><br><span class=\"line\">        System.out.println(i3 == i4);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer i5 = <span class=\"number\">200</span>;</span><br><span class=\"line\">        Integer i6 = <span class=\"number\">200</span>;</span><br><span class=\"line\">        System.out.println(i5 == i6);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>true<br>false<br>false</p>\n</blockquote>\n<p><code>i3 == i4</code>返回结果为<code>false</code>可能会很容易理解，使用new关键字创建两个类，应当为其分配不同的内存空间，所以它们的地址应该是不同的。但是为什么<code>i1 == i2</code>返回结果为<code>true</code>，而<code>i5 == i6</code>返回结果为<code>false</code>呢？</p>\n<h3 id=\"自动装箱\"><a href=\"#自动装箱\" class=\"headerlink\" title=\"自动装箱\"></a>自动装箱</h3><p>实际上当给Integer对象赋值为数值对象时，Java虚拟机会执行装箱操作，就是将基础数据类型封装成对应的包装类，其底层调用的方法是Integer中的静态方法<code>Integer.valueOf(int i)</code>，那我们来看看这个方法具体是怎么做的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns an &#123;<span class=\"doctag\">@code</span> Integer&#125; instance representing the specified</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> int&#125; value.  If a new &#123;<span class=\"doctag\">@code</span> Integer&#125; instance is not</span></span><br><span class=\"line\"><span class=\"comment\"> * required, this method should generally be used in preference to</span></span><br><span class=\"line\"><span class=\"comment\"> * the constructor &#123;<span class=\"doctag\">@link</span> #Integer(int)&#125;, as this method is likely</span></span><br><span class=\"line\"><span class=\"comment\"> * to yield significantly better space and time performance by</span></span><br><span class=\"line\"><span class=\"comment\"> * caching frequently requested values.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This method will always cache values in the range -128 to 127,</span></span><br><span class=\"line\"><span class=\"comment\"> * inclusive, and may cache other values outside of this range.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  i an &#123;<span class=\"doctag\">@code</span> int&#125; value.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> an &#123;<span class=\"doctag\">@code</span> Integer&#125; instance representing &#123;<span class=\"doctag\">@code</span> i&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>  1.5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过注解我们可以看到，这个方法会返回一个Integer对象的实例，当对象值处于<code>-128 ~ 127</code>之间时，从缓存中返回实例，不处于区间之中则通过new关键字创建一个实例并返回。</p>\n<p>IntegerCache是Integer类中的一个内部类，Java虚拟机会用它做一个对象的缓存池，缓存整型值介于<code>-128 ~ 127</code>之间的Integer对象实例，用以提升Java的性能。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>回到代码中，现在结论就应该很清楚了，i1和i2取值都为1，介于<code>-128 ~ 127</code>之间，所以直接返回的是缓存池中的实例，所以它们都指向同一个对象，地址是相等的，i5和i6取值都为200，不在缓存池中，所以都是新创建的对象实例，所以它们的地址不相等。</p>\n","site":{"data":{}},"excerpt":"<p>Integer作为基础类型int的包装类，提供了非常多的功能，增强了基础类型的一些方法使用，但是在使用的时候还是有一些问题需要注意的。</p>","more":"<h2 id=\"true还是false？\"><a href=\"#true还是false？\" class=\"headerlink\" title=\"true还是false？\"></a>true还是false？</h2><p>咱们先看下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer i1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Integer i2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(i1 == i2);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer i3 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">200</span>);</span><br><span class=\"line\">        Integer i4 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">200</span>);</span><br><span class=\"line\">        System.out.println(i3 == i4);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer i5 = <span class=\"number\">200</span>;</span><br><span class=\"line\">        Integer i6 = <span class=\"number\">200</span>;</span><br><span class=\"line\">        System.out.println(i5 == i6);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>true<br>false<br>false</p>\n</blockquote>\n<p><code>i3 == i4</code>返回结果为<code>false</code>可能会很容易理解，使用new关键字创建两个类，应当为其分配不同的内存空间，所以它们的地址应该是不同的。但是为什么<code>i1 == i2</code>返回结果为<code>true</code>，而<code>i5 == i6</code>返回结果为<code>false</code>呢？</p>\n<h3 id=\"自动装箱\"><a href=\"#自动装箱\" class=\"headerlink\" title=\"自动装箱\"></a>自动装箱</h3><p>实际上当给Integer对象赋值为数值对象时，Java虚拟机会执行装箱操作，就是将基础数据类型封装成对应的包装类，其底层调用的方法是Integer中的静态方法<code>Integer.valueOf(int i)</code>，那我们来看看这个方法具体是怎么做的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns an &#123;<span class=\"doctag\">@code</span> Integer&#125; instance representing the specified</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> int&#125; value.  If a new &#123;<span class=\"doctag\">@code</span> Integer&#125; instance is not</span></span><br><span class=\"line\"><span class=\"comment\"> * required, this method should generally be used in preference to</span></span><br><span class=\"line\"><span class=\"comment\"> * the constructor &#123;<span class=\"doctag\">@link</span> #Integer(int)&#125;, as this method is likely</span></span><br><span class=\"line\"><span class=\"comment\"> * to yield significantly better space and time performance by</span></span><br><span class=\"line\"><span class=\"comment\"> * caching frequently requested values.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This method will always cache values in the range -128 to 127,</span></span><br><span class=\"line\"><span class=\"comment\"> * inclusive, and may cache other values outside of this range.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  i an &#123;<span class=\"doctag\">@code</span> int&#125; value.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> an &#123;<span class=\"doctag\">@code</span> Integer&#125; instance representing &#123;<span class=\"doctag\">@code</span> i&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>  1.5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过注解我们可以看到，这个方法会返回一个Integer对象的实例，当对象值处于<code>-128 ~ 127</code>之间时，从缓存中返回实例，不处于区间之中则通过new关键字创建一个实例并返回。</p>\n<p>IntegerCache是Integer类中的一个内部类，Java虚拟机会用它做一个对象的缓存池，缓存整型值介于<code>-128 ~ 127</code>之间的Integer对象实例，用以提升Java的性能。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>回到代码中，现在结论就应该很清楚了，i1和i2取值都为1，介于<code>-128 ~ 127</code>之间，所以直接返回的是缓存池中的实例，所以它们都指向同一个对象，地址是相等的，i5和i6取值都为200，不在缓存池中，所以都是新创建的对象实例，所以它们的地址不相等。</p>"},{"title":"Java基本数据类型","date":"2018-08-31T02:59:52.000Z","comments":1,"_content":"\nJava是一种强类型语言，在声明变量的时必须指定数据类型。Java数据类型分为基本数据类型和引用类型，基本数据类型分为8种，也是我们编程中使用最频繁的类型，本篇文章简要介绍Java的八大数据类型。\n\n<!-- more -->\n\n### 八大数据类型一览\n\n| 类型名称 |       类型定义       |                           占用大小                           |                   取值范围                    |  默认值  |       封装类        |\n| :------: | :------------------: | :----------------------------------------------------------: | :-------------------------------------------: | :------: | :-----------------: |\n| boolean  | 布尔值，用作二元判断 | Java规范中，没有明确指出boolean的大小。JVM规范中，boolean变量作为int处理，也就是4字节，boolean数组当做byte数组处理。 |                  true,false                   |  false   |  java.lang.Boolean  |\n|   char   |     Unicode字符      |                          2字节/16位                          |              `\\u0000` ~ `\\uffff`              | `\\u0000` | java.lang.Character |\n|   byte   |      有符号整数      |                          1字节/8位                           |                  -128 ~ 127                   |    0     |   java.lang.Byte    |\n|  short   |      有符号整数      |                          2字节/16位                          |                -32768 ~ 32767                 |    0     |   java.lang.Short   |\n|   int    |      有符号整数      |                          4字节/32位                          | -2,147,483,648(-2^31) ~ 2,147,483,647(2^31-1) |    0     |  java.lang.Integer  |\n|   long   |      有符号整数      |                          8字节/64位                          |                -2^63 ~ 2^63-1                 |    0L    |   java.lang.Long    |\n|  float   |     单精度浮点数     |                          4字节/32位                          |            1.4E-45 ~ 3.4028235E38             |   0.0F   |   java.lang.Float   |\n|  double  |     双精度浮点数     |                          8字节/64位                          |       4.9E-324 ~ 1.7976931348623157E308       |   0.0D   |  java.lang.Double   |\n\n**注意：**在Java中，默认声明的小数是double类型，默认声明的整数是int类型。\n\n### 类型转换\n\n整型、浮点型、字符型数据可以混合运算，运算中，不同类型的数据会转换成相同类型，然后进行运算。\n\n> 低 ---------------------------------------> 高\n>\n> byte,short,char-->int-->long-->float-->double\n\n从低级转到高级是自动类型转换，这是一种默认的转换，从高级转到低级需要强制类型转换，这么做可能会导致精度丢失。\n\n```java\nbyte a = 111;\n// 自动类型转换\nint b = a;\nint c = 128;\n// 强制类型转换导致精度丢失，因为byte类型是8位，最大值为127，所以当int强制转换为byte类型时，值128时候就会导致溢出，此处d实际值位-128\nbyte d = (byte) c;\ndouble e = 1.23;\n// 浮点型强制转换为整型是舍弃小数部分而不是四舍五入\nint f = (int)e;\n```\n\nchar类型转换为整型时会转为字符对应的ASCII码值。\n\n不能对boolean类型进行类型转换。\n\n### 类型的自动提升\n\n在基本类型的混合运算中，最后的结果类型会是参与运算的最高级的类型， 关于类型的自动提升，注意下面的规则。\n\n①所有的byte,short,char型的值将被提升为int型；\n\n②如果有一个操作数是long型，计算结果是long型；\n\n③如果有一个操作数是float型，计算结果是float型；\n\n④如果有一个操作数是double型，计算结果是double型；\n\n### 整型的进制\n\nJava中默认声明整型的进制为10进制，当然也可以通过特殊的表示方法表示常用的二进制，八进制和十六进制。\n\n```java\n// 十进制表示\nint i = 10;\n// 二进制表示\nint a = 0b1010;\n// 八进制表示\nint b = 01067;\n// 十六进制表示\nint c = 0x2afc;\n```\n\n### 转义字符\n\nJava中char类型包含一些特殊的转义字符，这些字符通常具有一些特殊的含义。\n\n|   符号   |         字符含义         |\n| :------: | :----------------------: |\n|   `\\n`   |       换行 (0x0a)        |\n|   `\\r`   |       回车 (0x0d)        |\n|   `\\f`   |       换页符(0x0c)       |\n|   `\\b`   |       退格 (0x08)        |\n|   `\\0`   |      空字符 (0x20)       |\n|   `\\s`   |          字符串          |\n|   `\\t`   |          制表符          |\n|   `\\\"`   |          双引号          |\n|   `\\'`   |          单引号          |\n|   `\\\\`   |          反斜杠          |\n|  `\\ddd`  |     八进制字符 (ddd)     |\n| `\\uxxxx` | 16进制Unicode字符 (xxxx) |\n\n### 包装类与自动拆装箱\n\n八大数据类型都有其对应的包装类，参见类型一览表，包装类可以直接对其赋值（自动装箱），包装类可以直接参与运算（自动拆箱），包装类具有非常多的静态和普通方法，这扩展了基本类型的功能，这在平时的编码中会有很多的运用。","source":"_posts/Java基本数据类型.md","raw":"---\ntitle: Java基本数据类型\ndate: 2018-08-31 10:59:52\ntags: [Java,基础知识]\ncategories: Java\ncomments: true\n\n---\n\nJava是一种强类型语言，在声明变量的时必须指定数据类型。Java数据类型分为基本数据类型和引用类型，基本数据类型分为8种，也是我们编程中使用最频繁的类型，本篇文章简要介绍Java的八大数据类型。\n\n<!-- more -->\n\n### 八大数据类型一览\n\n| 类型名称 |       类型定义       |                           占用大小                           |                   取值范围                    |  默认值  |       封装类        |\n| :------: | :------------------: | :----------------------------------------------------------: | :-------------------------------------------: | :------: | :-----------------: |\n| boolean  | 布尔值，用作二元判断 | Java规范中，没有明确指出boolean的大小。JVM规范中，boolean变量作为int处理，也就是4字节，boolean数组当做byte数组处理。 |                  true,false                   |  false   |  java.lang.Boolean  |\n|   char   |     Unicode字符      |                          2字节/16位                          |              `\\u0000` ~ `\\uffff`              | `\\u0000` | java.lang.Character |\n|   byte   |      有符号整数      |                          1字节/8位                           |                  -128 ~ 127                   |    0     |   java.lang.Byte    |\n|  short   |      有符号整数      |                          2字节/16位                          |                -32768 ~ 32767                 |    0     |   java.lang.Short   |\n|   int    |      有符号整数      |                          4字节/32位                          | -2,147,483,648(-2^31) ~ 2,147,483,647(2^31-1) |    0     |  java.lang.Integer  |\n|   long   |      有符号整数      |                          8字节/64位                          |                -2^63 ~ 2^63-1                 |    0L    |   java.lang.Long    |\n|  float   |     单精度浮点数     |                          4字节/32位                          |            1.4E-45 ~ 3.4028235E38             |   0.0F   |   java.lang.Float   |\n|  double  |     双精度浮点数     |                          8字节/64位                          |       4.9E-324 ~ 1.7976931348623157E308       |   0.0D   |  java.lang.Double   |\n\n**注意：**在Java中，默认声明的小数是double类型，默认声明的整数是int类型。\n\n### 类型转换\n\n整型、浮点型、字符型数据可以混合运算，运算中，不同类型的数据会转换成相同类型，然后进行运算。\n\n> 低 ---------------------------------------> 高\n>\n> byte,short,char-->int-->long-->float-->double\n\n从低级转到高级是自动类型转换，这是一种默认的转换，从高级转到低级需要强制类型转换，这么做可能会导致精度丢失。\n\n```java\nbyte a = 111;\n// 自动类型转换\nint b = a;\nint c = 128;\n// 强制类型转换导致精度丢失，因为byte类型是8位，最大值为127，所以当int强制转换为byte类型时，值128时候就会导致溢出，此处d实际值位-128\nbyte d = (byte) c;\ndouble e = 1.23;\n// 浮点型强制转换为整型是舍弃小数部分而不是四舍五入\nint f = (int)e;\n```\n\nchar类型转换为整型时会转为字符对应的ASCII码值。\n\n不能对boolean类型进行类型转换。\n\n### 类型的自动提升\n\n在基本类型的混合运算中，最后的结果类型会是参与运算的最高级的类型， 关于类型的自动提升，注意下面的规则。\n\n①所有的byte,short,char型的值将被提升为int型；\n\n②如果有一个操作数是long型，计算结果是long型；\n\n③如果有一个操作数是float型，计算结果是float型；\n\n④如果有一个操作数是double型，计算结果是double型；\n\n### 整型的进制\n\nJava中默认声明整型的进制为10进制，当然也可以通过特殊的表示方法表示常用的二进制，八进制和十六进制。\n\n```java\n// 十进制表示\nint i = 10;\n// 二进制表示\nint a = 0b1010;\n// 八进制表示\nint b = 01067;\n// 十六进制表示\nint c = 0x2afc;\n```\n\n### 转义字符\n\nJava中char类型包含一些特殊的转义字符，这些字符通常具有一些特殊的含义。\n\n|   符号   |         字符含义         |\n| :------: | :----------------------: |\n|   `\\n`   |       换行 (0x0a)        |\n|   `\\r`   |       回车 (0x0d)        |\n|   `\\f`   |       换页符(0x0c)       |\n|   `\\b`   |       退格 (0x08)        |\n|   `\\0`   |      空字符 (0x20)       |\n|   `\\s`   |          字符串          |\n|   `\\t`   |          制表符          |\n|   `\\\"`   |          双引号          |\n|   `\\'`   |          单引号          |\n|   `\\\\`   |          反斜杠          |\n|  `\\ddd`  |     八进制字符 (ddd)     |\n| `\\uxxxx` | 16进制Unicode字符 (xxxx) |\n\n### 包装类与自动拆装箱\n\n八大数据类型都有其对应的包装类，参见类型一览表，包装类可以直接对其赋值（自动装箱），包装类可以直接参与运算（自动拆箱），包装类具有非常多的静态和普通方法，这扩展了基本类型的功能，这在平时的编码中会有很多的运用。","slug":"Java基本数据类型","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1k20002w2pm2j5vcbhi","content":"<p>Java是一种强类型语言，在声明变量的时必须指定数据类型。Java数据类型分为基本数据类型和引用类型，基本数据类型分为8种，也是我们编程中使用最频繁的类型，本篇文章简要介绍Java的八大数据类型。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"八大数据类型一览\"><a href=\"#八大数据类型一览\" class=\"headerlink\" title=\"八大数据类型一览\"></a>八大数据类型一览</h3><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">类型定义</th>\n<th align=\"center\">占用大小</th>\n<th align=\"center\">取值范围</th>\n<th align=\"center\">默认值</th>\n<th align=\"center\">封装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">布尔值，用作二元判断</td>\n<td align=\"center\">Java规范中，没有明确指出boolean的大小。JVM规范中，boolean变量作为int处理，也就是4字节，boolean数组当做byte数组处理。</td>\n<td align=\"center\">true,false</td>\n<td align=\"center\">false</td>\n<td align=\"center\">java.lang.Boolean</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">Unicode字符</td>\n<td align=\"center\">2字节/16位</td>\n<td align=\"center\"><code>\\u0000</code> ~ <code>\\uffff</code></td>\n<td align=\"center\"><code>\\u0000</code></td>\n<td align=\"center\">java.lang.Character</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">1字节/8位</td>\n<td align=\"center\">-128 ~ 127</td>\n<td align=\"center\">0</td>\n<td align=\"center\">java.lang.Byte</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">2字节/16位</td>\n<td align=\"center\">-32768 ~ 32767</td>\n<td align=\"center\">0</td>\n<td align=\"center\">java.lang.Short</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">4字节/32位</td>\n<td align=\"center\">-2,147,483,648(-2^31) ~ 2,147,483,647(2^31-1)</td>\n<td align=\"center\">0</td>\n<td align=\"center\">java.lang.Integer</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">8字节/64位</td>\n<td align=\"center\">-2^63 ~ 2^63-1</td>\n<td align=\"center\">0L</td>\n<td align=\"center\">java.lang.Long</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">单精度浮点数</td>\n<td align=\"center\">4字节/32位</td>\n<td align=\"center\">1.4E-45 ~ 3.4028235E38</td>\n<td align=\"center\">0.0F</td>\n<td align=\"center\">java.lang.Float</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">双精度浮点数</td>\n<td align=\"center\">8字节/64位</td>\n<td align=\"center\">4.9E-324 ~ 1.7976931348623157E308</td>\n<td align=\"center\">0.0D</td>\n<td align=\"center\">java.lang.Double</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong>在Java中，默认声明的小数是double类型，默认声明的整数是int类型。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>整型、浮点型、字符型数据可以混合运算，运算中，不同类型的数据会转换成相同类型，然后进行运算。</p>\n<blockquote>\n<p>低 —————————————&gt; 高</p>\n<p>byte,short,char–&gt;int–&gt;long–&gt;float–&gt;double</p>\n</blockquote>\n<p>从低级转到高级是自动类型转换，这是一种默认的转换，从高级转到低级需要强制类型转换，这么做可能会导致精度丢失。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span> a = <span class=\"number\">111</span>;</span><br><span class=\"line\"><span class=\"comment\">// 自动类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = <span class=\"number\">128</span>;</span><br><span class=\"line\"><span class=\"comment\">// 强制类型转换导致精度丢失，因为byte类型是8位，最大值为127，所以当int强制转换为byte类型时，值128时候就会导致溢出，此处d实际值位-128</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> d = (<span class=\"keyword\">byte</span>) c;</span><br><span class=\"line\"><span class=\"keyword\">double</span> e = <span class=\"number\">1.23</span>;</span><br><span class=\"line\"><span class=\"comment\">// 浮点型强制转换为整型是舍弃小数部分而不是四舍五入</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f = (<span class=\"keyword\">int</span>)e;</span><br></pre></td></tr></table></figure>\n\n<p>char类型转换为整型时会转为字符对应的ASCII码值。</p>\n<p>不能对boolean类型进行类型转换。</p>\n<h3 id=\"类型的自动提升\"><a href=\"#类型的自动提升\" class=\"headerlink\" title=\"类型的自动提升\"></a>类型的自动提升</h3><p>在基本类型的混合运算中，最后的结果类型会是参与运算的最高级的类型， 关于类型的自动提升，注意下面的规则。</p>\n<p>①所有的byte,short,char型的值将被提升为int型；</p>\n<p>②如果有一个操作数是long型，计算结果是long型；</p>\n<p>③如果有一个操作数是float型，计算结果是float型；</p>\n<p>④如果有一个操作数是double型，计算结果是double型；</p>\n<h3 id=\"整型的进制\"><a href=\"#整型的进制\" class=\"headerlink\" title=\"整型的进制\"></a>整型的进制</h3><p>Java中默认声明整型的进制为10进制，当然也可以通过特殊的表示方法表示常用的二进制，八进制和十六进制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 十进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 二进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"comment\">// 八进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">01067</span>;</span><br><span class=\"line\"><span class=\"comment\">// 十六进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = <span class=\"number\">0x2afc</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>Java中char类型包含一些特殊的转义字符，这些字符通常具有一些特殊的含义。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">字符含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>\\n</code></td>\n<td align=\"center\">换行 (0x0a)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\r</code></td>\n<td align=\"center\">回车 (0x0d)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\f</code></td>\n<td align=\"center\">换页符(0x0c)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\b</code></td>\n<td align=\"center\">退格 (0x08)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\0</code></td>\n<td align=\"center\">空字符 (0x20)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\s</code></td>\n<td align=\"center\">字符串</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\t</code></td>\n<td align=\"center\">制表符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\&quot;</code></td>\n<td align=\"center\">双引号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\&#39;</code></td>\n<td align=\"center\">单引号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\\\</code></td>\n<td align=\"center\">反斜杠</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\ddd</code></td>\n<td align=\"center\">八进制字符 (ddd)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\uxxxx</code></td>\n<td align=\"center\">16进制Unicode字符 (xxxx)</td>\n</tr>\n</tbody></table>\n<h3 id=\"包装类与自动拆装箱\"><a href=\"#包装类与自动拆装箱\" class=\"headerlink\" title=\"包装类与自动拆装箱\"></a>包装类与自动拆装箱</h3><p>八大数据类型都有其对应的包装类，参见类型一览表，包装类可以直接对其赋值（自动装箱），包装类可以直接参与运算（自动拆箱），包装类具有非常多的静态和普通方法，这扩展了基本类型的功能，这在平时的编码中会有很多的运用。</p>\n","site":{"data":{}},"excerpt":"<p>Java是一种强类型语言，在声明变量的时必须指定数据类型。Java数据类型分为基本数据类型和引用类型，基本数据类型分为8种，也是我们编程中使用最频繁的类型，本篇文章简要介绍Java的八大数据类型。</p>","more":"<h3 id=\"八大数据类型一览\"><a href=\"#八大数据类型一览\" class=\"headerlink\" title=\"八大数据类型一览\"></a>八大数据类型一览</h3><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">类型定义</th>\n<th align=\"center\">占用大小</th>\n<th align=\"center\">取值范围</th>\n<th align=\"center\">默认值</th>\n<th align=\"center\">封装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">布尔值，用作二元判断</td>\n<td align=\"center\">Java规范中，没有明确指出boolean的大小。JVM规范中，boolean变量作为int处理，也就是4字节，boolean数组当做byte数组处理。</td>\n<td align=\"center\">true,false</td>\n<td align=\"center\">false</td>\n<td align=\"center\">java.lang.Boolean</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">Unicode字符</td>\n<td align=\"center\">2字节/16位</td>\n<td align=\"center\"><code>\\u0000</code> ~ <code>\\uffff</code></td>\n<td align=\"center\"><code>\\u0000</code></td>\n<td align=\"center\">java.lang.Character</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">1字节/8位</td>\n<td align=\"center\">-128 ~ 127</td>\n<td align=\"center\">0</td>\n<td align=\"center\">java.lang.Byte</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">2字节/16位</td>\n<td align=\"center\">-32768 ~ 32767</td>\n<td align=\"center\">0</td>\n<td align=\"center\">java.lang.Short</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">4字节/32位</td>\n<td align=\"center\">-2,147,483,648(-2^31) ~ 2,147,483,647(2^31-1)</td>\n<td align=\"center\">0</td>\n<td align=\"center\">java.lang.Integer</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">有符号整数</td>\n<td align=\"center\">8字节/64位</td>\n<td align=\"center\">-2^63 ~ 2^63-1</td>\n<td align=\"center\">0L</td>\n<td align=\"center\">java.lang.Long</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">单精度浮点数</td>\n<td align=\"center\">4字节/32位</td>\n<td align=\"center\">1.4E-45 ~ 3.4028235E38</td>\n<td align=\"center\">0.0F</td>\n<td align=\"center\">java.lang.Float</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">双精度浮点数</td>\n<td align=\"center\">8字节/64位</td>\n<td align=\"center\">4.9E-324 ~ 1.7976931348623157E308</td>\n<td align=\"center\">0.0D</td>\n<td align=\"center\">java.lang.Double</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong>在Java中，默认声明的小数是double类型，默认声明的整数是int类型。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>整型、浮点型、字符型数据可以混合运算，运算中，不同类型的数据会转换成相同类型，然后进行运算。</p>\n<blockquote>\n<p>低 —————————————&gt; 高</p>\n<p>byte,short,char–&gt;int–&gt;long–&gt;float–&gt;double</p>\n</blockquote>\n<p>从低级转到高级是自动类型转换，这是一种默认的转换，从高级转到低级需要强制类型转换，这么做可能会导致精度丢失。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span> a = <span class=\"number\">111</span>;</span><br><span class=\"line\"><span class=\"comment\">// 自动类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = <span class=\"number\">128</span>;</span><br><span class=\"line\"><span class=\"comment\">// 强制类型转换导致精度丢失，因为byte类型是8位，最大值为127，所以当int强制转换为byte类型时，值128时候就会导致溢出，此处d实际值位-128</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> d = (<span class=\"keyword\">byte</span>) c;</span><br><span class=\"line\"><span class=\"keyword\">double</span> e = <span class=\"number\">1.23</span>;</span><br><span class=\"line\"><span class=\"comment\">// 浮点型强制转换为整型是舍弃小数部分而不是四舍五入</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f = (<span class=\"keyword\">int</span>)e;</span><br></pre></td></tr></table></figure>\n\n<p>char类型转换为整型时会转为字符对应的ASCII码值。</p>\n<p>不能对boolean类型进行类型转换。</p>\n<h3 id=\"类型的自动提升\"><a href=\"#类型的自动提升\" class=\"headerlink\" title=\"类型的自动提升\"></a>类型的自动提升</h3><p>在基本类型的混合运算中，最后的结果类型会是参与运算的最高级的类型， 关于类型的自动提升，注意下面的规则。</p>\n<p>①所有的byte,short,char型的值将被提升为int型；</p>\n<p>②如果有一个操作数是long型，计算结果是long型；</p>\n<p>③如果有一个操作数是float型，计算结果是float型；</p>\n<p>④如果有一个操作数是double型，计算结果是double型；</p>\n<h3 id=\"整型的进制\"><a href=\"#整型的进制\" class=\"headerlink\" title=\"整型的进制\"></a>整型的进制</h3><p>Java中默认声明整型的进制为10进制，当然也可以通过特殊的表示方法表示常用的二进制，八进制和十六进制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 十进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 二进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"comment\">// 八进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">01067</span>;</span><br><span class=\"line\"><span class=\"comment\">// 十六进制表示</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = <span class=\"number\">0x2afc</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>Java中char类型包含一些特殊的转义字符，这些字符通常具有一些特殊的含义。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">字符含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>\\n</code></td>\n<td align=\"center\">换行 (0x0a)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\r</code></td>\n<td align=\"center\">回车 (0x0d)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\f</code></td>\n<td align=\"center\">换页符(0x0c)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\b</code></td>\n<td align=\"center\">退格 (0x08)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\0</code></td>\n<td align=\"center\">空字符 (0x20)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\s</code></td>\n<td align=\"center\">字符串</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\t</code></td>\n<td align=\"center\">制表符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\&quot;</code></td>\n<td align=\"center\">双引号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\&#39;</code></td>\n<td align=\"center\">单引号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\\\</code></td>\n<td align=\"center\">反斜杠</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\ddd</code></td>\n<td align=\"center\">八进制字符 (ddd)</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\uxxxx</code></td>\n<td align=\"center\">16进制Unicode字符 (xxxx)</td>\n</tr>\n</tbody></table>\n<h3 id=\"包装类与自动拆装箱\"><a href=\"#包装类与自动拆装箱\" class=\"headerlink\" title=\"包装类与自动拆装箱\"></a>包装类与自动拆装箱</h3><p>八大数据类型都有其对应的包装类，参见类型一览表，包装类可以直接对其赋值（自动装箱），包装类可以直接参与运算（自动拆箱），包装类具有非常多的静态和普通方法，这扩展了基本类型的功能，这在平时的编码中会有很多的运用。</p>"},{"title":"Java知识点总结","comments":1,"top":true,"date":"2018-11-17T03:37:32.000Z","_content":"\nJava作为一门发展了多年的编程语言，拥有众多的开发者，我亦是其中之一，Java有众多的特性和知识点，为避免遗忘，我将我所了解的记录在此，知识点无先后顺序，本文长期维护更新，拓展新的知识点。\n\n<!--more-->\n\n> 本文基于Java 1.8\n>\n> 水平有限，如有错误，还望指正，不甚感激。\n\n1. Java中的基本数据类型（int,byte等），比较时使用`==`，比较的是它们的值，引用类型（类）使用`==`比较的是它们的地址值，如果要比较对象的内容是否相等，需要重写equals方法，equals方法继承自Object类，重写equals方法时通常还应该重写hashCode方法；\n\n2. （Override）重写方法时，可以返回父类方法返回值类型的子类，但不允许返回返回值类型的父类；\n\n3. 基本数据类型和包装类之间可以互相转换，方法是固定的，如int/Integer，装箱方法为`Integer.valueOf(int)`，拆箱方法为`Integer.intValue()`；\n\n4. 警惕三目运算符中的拆箱：\n\n   ```java\n   int a = 0;\n   Integer b = null;\n   System.out.println(false ? a : b);// NullPointerException\n   ```\n\n   ```java\n   Integer a = null;\n   Integer b = null;\n   System.out.println(false ? a : b);// null\n   ```\n\n   第一段代码会报`NullPointerException`异常，第二段代码能正常输出null，这是因为三目运算符返回结果中同时包含基础类型和包装类型时，会对包装类型进行拆包，如果拆包对象为null，则会抛出异常，在使用三目运算符时应当注意返回结果有没有可能为null；\n\n5. Java接口中的成员都是`public`的，可以包含成员变量，默认修饰`public static final`，成员方法默认修饰`public abstract`，在JDK8之后，接口中的方法可以有实现，默认修饰`public static`，实现后的方法属于该接口，实现类无法再重写该方法；\n\n6. *非静态内部类会持有外部类的引用*，内部类可以访问外部类的成员变量，但是外部类无法得知内部类的成员变量；\n\n7. try-catch-finally语句块中如果都有返回值，finally中的返回值会屏蔽掉try/catch中的返回值；\n\n8. 如果finally有返回值且无异常，则会屏蔽掉try/catch中出现异常；没有finally时，catch中出现未捕获异常，则语句块抛出异常；\n\n9. 如果仅try/catch中有返回值，finally无法修改已经返回的返回值；\n\n10. 谨慎使用泛型中的super和extends关键字，`List<? extends E>`表示泛型是E的子类，无法add，只能get；`List<? super E>`表示泛型是E的父类，无法get，只能add；\n\n11. 匿名的内部类不能extends（继承）其它类，但内部类（接口）可以被另一个内部类继承或实现；\n\n12. 整形的二进制表示法（以0b开头）：`int i = 0b10101;`,八进制表示法（以0开头）：`int i = 065;`，十六进制表示法（以0x开头）：`int i = 0x354af`；\n\n13. 在定义数值类型时，可以使用下划线`_`做隔断，且不限制下划线个数，方便阅读，如：`float pi = 3.14_15F;`，`long l= 0x7fff_ffff_ffff_ffffL;`，`int i = 1554__4546_46_5`都是可以的，但是不能在数值的起始位置或末端添加；\n\n14. `short s = 1;s = s +1;`存在语法错误，整形在做运算时会将类型提升为int型，再赋值给s就需要做强制类型转换。`+=`，`-=`，`*=`，`/=`，`++`，`--`这几类运算隐含了强制类型转换，所以`short s = 1;s += 1;`是正确的；\n\n15. `Math.round(11.5)`结果为12，`Math.round(-11.5)`结果为-11，`Math.round(-11.6)`结果为-12，`Math.round()`方法可以看作先将数值`+0.5`再向下舍入。\n\n16. Java中的小数运算是不精确的，使用时应当注意，如果要采用精确的小数运算，推荐使用BigDecimal类；\n ```java\n    double a = 0.8 - 0.7;\n    double b = 0.6 - 0.5;\n    double c = 0.5 - 0.4;\n    System.out.println(a == b);// false\n    System.out.println(b == c);// true\n ```\n17. 关于for循环，三个表达式都是可选的，第一个表达式只会执行一次，后两个表达式每循环一次就会执行一次，第一/三个表达式允许写多条语句，使用`,`分隔，第二个表达式要么为空，要么返回布尔值；\n\n    ```java\n    // 无限循环\n    for(;;){\n    \t// do something\n    }\n    \n    /**\n     * method1和method2只执行一次\n     * method3，method4和method5每次循环都会执行\n     * method6会在method3之后执行\n     * method3必须返回boolean值，其他方法无要求\n     */\n    for (method1(), method2(); method3(); method4(), method5()) {\n        method6();\n    }\n    ```\n    \n18. 当使用`Arrays.asList()`方法将数组转换成列表的时候，需要注意参数的类型，当参数为基础类型的数组时，生成的列表长度为1，其内容为参数指向的数组对象，使用基础类型的包装类数组可以解决这个问题；\n\n    ```java\n    int[] ints = {1, 2, 3};\n    System.out.println(Arrays.asList(ints).size());// 1\n    Integer[] integers = {1, 2, 3};\n    System.out.println(Arrays.asList(integers).size());// 3\n    ```\n    \n19. 当方法的参数是基础数据类型时，调用方法传入对应的包装类，会调用对应包装类的拆箱方法`xxxValue（）`，如果传入的参数为null，则会报空指针异常；\n\n\t```java\n\tDouble d = null;\n\tmethod(d);// NullPointerException\n\tpublic void method(double d) {\n\t\t// do something\n\t}\n\t```\n\n20. 接口可以继承多个接口，类只能继承一个类，可以实现多个接口。\n","source":"_posts/Java知识点总结.md","raw":"---\ntitle: Java知识点总结\ntags: [Java,基础知识]\ncomments: true\ntop: true\ndate: 2018-11-17 11:37:32\ncategories: Java\n---\n\nJava作为一门发展了多年的编程语言，拥有众多的开发者，我亦是其中之一，Java有众多的特性和知识点，为避免遗忘，我将我所了解的记录在此，知识点无先后顺序，本文长期维护更新，拓展新的知识点。\n\n<!--more-->\n\n> 本文基于Java 1.8\n>\n> 水平有限，如有错误，还望指正，不甚感激。\n\n1. Java中的基本数据类型（int,byte等），比较时使用`==`，比较的是它们的值，引用类型（类）使用`==`比较的是它们的地址值，如果要比较对象的内容是否相等，需要重写equals方法，equals方法继承自Object类，重写equals方法时通常还应该重写hashCode方法；\n\n2. （Override）重写方法时，可以返回父类方法返回值类型的子类，但不允许返回返回值类型的父类；\n\n3. 基本数据类型和包装类之间可以互相转换，方法是固定的，如int/Integer，装箱方法为`Integer.valueOf(int)`，拆箱方法为`Integer.intValue()`；\n\n4. 警惕三目运算符中的拆箱：\n\n   ```java\n   int a = 0;\n   Integer b = null;\n   System.out.println(false ? a : b);// NullPointerException\n   ```\n\n   ```java\n   Integer a = null;\n   Integer b = null;\n   System.out.println(false ? a : b);// null\n   ```\n\n   第一段代码会报`NullPointerException`异常，第二段代码能正常输出null，这是因为三目运算符返回结果中同时包含基础类型和包装类型时，会对包装类型进行拆包，如果拆包对象为null，则会抛出异常，在使用三目运算符时应当注意返回结果有没有可能为null；\n\n5. Java接口中的成员都是`public`的，可以包含成员变量，默认修饰`public static final`，成员方法默认修饰`public abstract`，在JDK8之后，接口中的方法可以有实现，默认修饰`public static`，实现后的方法属于该接口，实现类无法再重写该方法；\n\n6. *非静态内部类会持有外部类的引用*，内部类可以访问外部类的成员变量，但是外部类无法得知内部类的成员变量；\n\n7. try-catch-finally语句块中如果都有返回值，finally中的返回值会屏蔽掉try/catch中的返回值；\n\n8. 如果finally有返回值且无异常，则会屏蔽掉try/catch中出现异常；没有finally时，catch中出现未捕获异常，则语句块抛出异常；\n\n9. 如果仅try/catch中有返回值，finally无法修改已经返回的返回值；\n\n10. 谨慎使用泛型中的super和extends关键字，`List<? extends E>`表示泛型是E的子类，无法add，只能get；`List<? super E>`表示泛型是E的父类，无法get，只能add；\n\n11. 匿名的内部类不能extends（继承）其它类，但内部类（接口）可以被另一个内部类继承或实现；\n\n12. 整形的二进制表示法（以0b开头）：`int i = 0b10101;`,八进制表示法（以0开头）：`int i = 065;`，十六进制表示法（以0x开头）：`int i = 0x354af`；\n\n13. 在定义数值类型时，可以使用下划线`_`做隔断，且不限制下划线个数，方便阅读，如：`float pi = 3.14_15F;`，`long l= 0x7fff_ffff_ffff_ffffL;`，`int i = 1554__4546_46_5`都是可以的，但是不能在数值的起始位置或末端添加；\n\n14. `short s = 1;s = s +1;`存在语法错误，整形在做运算时会将类型提升为int型，再赋值给s就需要做强制类型转换。`+=`，`-=`，`*=`，`/=`，`++`，`--`这几类运算隐含了强制类型转换，所以`short s = 1;s += 1;`是正确的；\n\n15. `Math.round(11.5)`结果为12，`Math.round(-11.5)`结果为-11，`Math.round(-11.6)`结果为-12，`Math.round()`方法可以看作先将数值`+0.5`再向下舍入。\n\n16. Java中的小数运算是不精确的，使用时应当注意，如果要采用精确的小数运算，推荐使用BigDecimal类；\n ```java\n    double a = 0.8 - 0.7;\n    double b = 0.6 - 0.5;\n    double c = 0.5 - 0.4;\n    System.out.println(a == b);// false\n    System.out.println(b == c);// true\n ```\n17. 关于for循环，三个表达式都是可选的，第一个表达式只会执行一次，后两个表达式每循环一次就会执行一次，第一/三个表达式允许写多条语句，使用`,`分隔，第二个表达式要么为空，要么返回布尔值；\n\n    ```java\n    // 无限循环\n    for(;;){\n    \t// do something\n    }\n    \n    /**\n     * method1和method2只执行一次\n     * method3，method4和method5每次循环都会执行\n     * method6会在method3之后执行\n     * method3必须返回boolean值，其他方法无要求\n     */\n    for (method1(), method2(); method3(); method4(), method5()) {\n        method6();\n    }\n    ```\n    \n18. 当使用`Arrays.asList()`方法将数组转换成列表的时候，需要注意参数的类型，当参数为基础类型的数组时，生成的列表长度为1，其内容为参数指向的数组对象，使用基础类型的包装类数组可以解决这个问题；\n\n    ```java\n    int[] ints = {1, 2, 3};\n    System.out.println(Arrays.asList(ints).size());// 1\n    Integer[] integers = {1, 2, 3};\n    System.out.println(Arrays.asList(integers).size());// 3\n    ```\n    \n19. 当方法的参数是基础数据类型时，调用方法传入对应的包装类，会调用对应包装类的拆箱方法`xxxValue（）`，如果传入的参数为null，则会报空指针异常；\n\n\t```java\n\tDouble d = null;\n\tmethod(d);// NullPointerException\n\tpublic void method(double d) {\n\t\t// do something\n\t}\n\t```\n\n20. 接口可以继承多个接口，类只能继承一个类，可以实现多个接口。\n","slug":"Java知识点总结","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1k60006w2pm5wt9btdu","content":"<p>Java作为一门发展了多年的编程语言，拥有众多的开发者，我亦是其中之一，Java有众多的特性和知识点，为避免遗忘，我将我所了解的记录在此，知识点无先后顺序，本文长期维护更新，拓展新的知识点。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>本文基于Java 1.8</p>\n<p>水平有限，如有错误，还望指正，不甚感激。</p>\n</blockquote>\n<ol>\n<li><p>Java中的基本数据类型（int,byte等），比较时使用<code>==</code>，比较的是它们的值，引用类型（类）使用<code>==</code>比较的是它们的地址值，如果要比较对象的内容是否相等，需要重写equals方法，equals方法继承自Object类，重写equals方法时通常还应该重写hashCode方法；</p>\n</li>\n<li><p>（Override）重写方法时，可以返回父类方法返回值类型的子类，但不允许返回返回值类型的父类；</p>\n</li>\n<li><p>基本数据类型和包装类之间可以互相转换，方法是固定的，如int/Integer，装箱方法为<code>Integer.valueOf(int)</code>，拆箱方法为<code>Integer.intValue()</code>；</p>\n</li>\n<li><p>警惕三目运算符中的拆箱：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">Integer b = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">false</span> ? a : b);<span class=\"comment\">// NullPointerException</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Integer b = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">false</span> ? a : b);<span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>第一段代码会报<code>NullPointerException</code>异常，第二段代码能正常输出null，这是因为三目运算符返回结果中同时包含基础类型和包装类型时，会对包装类型进行拆包，如果拆包对象为null，则会抛出异常，在使用三目运算符时应当注意返回结果有没有可能为null；</p>\n</li>\n<li><p>Java接口中的成员都是<code>public</code>的，可以包含成员变量，默认修饰<code>public static final</code>，成员方法默认修饰<code>public abstract</code>，在JDK8之后，接口中的方法可以有实现，默认修饰<code>public static</code>，实现后的方法属于该接口，实现类无法再重写该方法；</p>\n</li>\n<li><p><em>非静态内部类会持有外部类的引用</em>，内部类可以访问外部类的成员变量，但是外部类无法得知内部类的成员变量；</p>\n</li>\n<li><p>try-catch-finally语句块中如果都有返回值，finally中的返回值会屏蔽掉try/catch中的返回值；</p>\n</li>\n<li><p>如果finally有返回值且无异常，则会屏蔽掉try/catch中出现异常；没有finally时，catch中出现未捕获异常，则语句块抛出异常；</p>\n</li>\n<li><p>如果仅try/catch中有返回值，finally无法修改已经返回的返回值；</p>\n</li>\n<li><p>谨慎使用泛型中的super和extends关键字，<code>List&lt;? extends E&gt;</code>表示泛型是E的子类，无法add，只能get；<code>List&lt;? super E&gt;</code>表示泛型是E的父类，无法get，只能add；</p>\n</li>\n<li><p>匿名的内部类不能extends（继承）其它类，但内部类（接口）可以被另一个内部类继承或实现；</p>\n</li>\n<li><p>整形的二进制表示法（以0b开头）：<code>int i = 0b10101;</code>,八进制表示法（以0开头）：<code>int i = 065;</code>，十六进制表示法（以0x开头）：<code>int i = 0x354af</code>；</p>\n</li>\n<li><p>在定义数值类型时，可以使用下划线<code>_</code>做隔断，且不限制下划线个数，方便阅读，如：<code>float pi = 3.14_15F;</code>，<code>long l= 0x7fff_ffff_ffff_ffffL;</code>，<code>int i = 1554__4546_46_5</code>都是可以的，但是不能在数值的起始位置或末端添加；</p>\n</li>\n<li><p><code>short s = 1;s = s +1;</code>存在语法错误，整形在做运算时会将类型提升为int型，再赋值给s就需要做强制类型转换。<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>++</code>，<code>--</code>这几类运算隐含了强制类型转换，所以<code>short s = 1;s += 1;</code>是正确的；</p>\n</li>\n<li><p><code>Math.round(11.5)</code>结果为12，<code>Math.round(-11.5)</code>结果为-11，<code>Math.round(-11.6)</code>结果为-12，<code>Math.round()</code>方法可以看作先将数值<code>+0.5</code>再向下舍入。</p>\n</li>\n<li><p>Java中的小数运算是不精确的，使用时应当注意，如果要采用精确的小数运算，推荐使用BigDecimal类；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> a = <span class=\"number\">0.8</span> - <span class=\"number\">0.7</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> b = <span class=\"number\">0.6</span> - <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> c = <span class=\"number\">0.5</span> - <span class=\"number\">0.4</span>;</span><br><span class=\"line\">System.out.println(a == b);<span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(b == c);<span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>关于for循环，三个表达式都是可选的，第一个表达式只会执行一次，后两个表达式每循环一次就会执行一次，第一/三个表达式允许写多条语句，使用<code>,</code>分隔，第二个表达式要么为空，要么返回布尔值；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无限循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(;;)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * method1和method2只执行一次</span></span><br><span class=\"line\"><span class=\"comment\"> * method3，method4和method5每次循环都会执行</span></span><br><span class=\"line\"><span class=\"comment\"> * method6会在method3之后执行</span></span><br><span class=\"line\"><span class=\"comment\"> * method3必须返回boolean值，其他方法无要求</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (method1(), method2(); method3(); method4(), method5()) &#123;</span><br><span class=\"line\">    method6();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当使用<code>Arrays.asList()</code>方法将数组转换成列表的时候，需要注意参数的类型，当参数为基础类型的数组时，生成的列表长度为1，其内容为参数指向的数组对象，使用基础类型的包装类数组可以解决这个问题；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] ints = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(Arrays.asList(ints).size());<span class=\"comment\">// 1</span></span><br><span class=\"line\">Integer[] integers = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(Arrays.asList(integers).size());<span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当方法的参数是基础数据类型时，调用方法传入对应的包装类，会调用对应包装类的拆箱方法<code>xxxValue（）</code>，如果传入的参数为null，则会报空指针异常；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double d = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">method(d);<span class=\"comment\">// NullPointerException</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接口可以继承多个接口，类只能继承一个类，可以实现多个接口。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Java作为一门发展了多年的编程语言，拥有众多的开发者，我亦是其中之一，Java有众多的特性和知识点，为避免遗忘，我将我所了解的记录在此，知识点无先后顺序，本文长期维护更新，拓展新的知识点。</p>","more":"<blockquote>\n<p>本文基于Java 1.8</p>\n<p>水平有限，如有错误，还望指正，不甚感激。</p>\n</blockquote>\n<ol>\n<li><p>Java中的基本数据类型（int,byte等），比较时使用<code>==</code>，比较的是它们的值，引用类型（类）使用<code>==</code>比较的是它们的地址值，如果要比较对象的内容是否相等，需要重写equals方法，equals方法继承自Object类，重写equals方法时通常还应该重写hashCode方法；</p>\n</li>\n<li><p>（Override）重写方法时，可以返回父类方法返回值类型的子类，但不允许返回返回值类型的父类；</p>\n</li>\n<li><p>基本数据类型和包装类之间可以互相转换，方法是固定的，如int/Integer，装箱方法为<code>Integer.valueOf(int)</code>，拆箱方法为<code>Integer.intValue()</code>；</p>\n</li>\n<li><p>警惕三目运算符中的拆箱：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">Integer b = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">false</span> ? a : b);<span class=\"comment\">// NullPointerException</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Integer b = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">false</span> ? a : b);<span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>第一段代码会报<code>NullPointerException</code>异常，第二段代码能正常输出null，这是因为三目运算符返回结果中同时包含基础类型和包装类型时，会对包装类型进行拆包，如果拆包对象为null，则会抛出异常，在使用三目运算符时应当注意返回结果有没有可能为null；</p>\n</li>\n<li><p>Java接口中的成员都是<code>public</code>的，可以包含成员变量，默认修饰<code>public static final</code>，成员方法默认修饰<code>public abstract</code>，在JDK8之后，接口中的方法可以有实现，默认修饰<code>public static</code>，实现后的方法属于该接口，实现类无法再重写该方法；</p>\n</li>\n<li><p><em>非静态内部类会持有外部类的引用</em>，内部类可以访问外部类的成员变量，但是外部类无法得知内部类的成员变量；</p>\n</li>\n<li><p>try-catch-finally语句块中如果都有返回值，finally中的返回值会屏蔽掉try/catch中的返回值；</p>\n</li>\n<li><p>如果finally有返回值且无异常，则会屏蔽掉try/catch中出现异常；没有finally时，catch中出现未捕获异常，则语句块抛出异常；</p>\n</li>\n<li><p>如果仅try/catch中有返回值，finally无法修改已经返回的返回值；</p>\n</li>\n<li><p>谨慎使用泛型中的super和extends关键字，<code>List&lt;? extends E&gt;</code>表示泛型是E的子类，无法add，只能get；<code>List&lt;? super E&gt;</code>表示泛型是E的父类，无法get，只能add；</p>\n</li>\n<li><p>匿名的内部类不能extends（继承）其它类，但内部类（接口）可以被另一个内部类继承或实现；</p>\n</li>\n<li><p>整形的二进制表示法（以0b开头）：<code>int i = 0b10101;</code>,八进制表示法（以0开头）：<code>int i = 065;</code>，十六进制表示法（以0x开头）：<code>int i = 0x354af</code>；</p>\n</li>\n<li><p>在定义数值类型时，可以使用下划线<code>_</code>做隔断，且不限制下划线个数，方便阅读，如：<code>float pi = 3.14_15F;</code>，<code>long l= 0x7fff_ffff_ffff_ffffL;</code>，<code>int i = 1554__4546_46_5</code>都是可以的，但是不能在数值的起始位置或末端添加；</p>\n</li>\n<li><p><code>short s = 1;s = s +1;</code>存在语法错误，整形在做运算时会将类型提升为int型，再赋值给s就需要做强制类型转换。<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>++</code>，<code>--</code>这几类运算隐含了强制类型转换，所以<code>short s = 1;s += 1;</code>是正确的；</p>\n</li>\n<li><p><code>Math.round(11.5)</code>结果为12，<code>Math.round(-11.5)</code>结果为-11，<code>Math.round(-11.6)</code>结果为-12，<code>Math.round()</code>方法可以看作先将数值<code>+0.5</code>再向下舍入。</p>\n</li>\n<li><p>Java中的小数运算是不精确的，使用时应当注意，如果要采用精确的小数运算，推荐使用BigDecimal类；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> a = <span class=\"number\">0.8</span> - <span class=\"number\">0.7</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> b = <span class=\"number\">0.6</span> - <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> c = <span class=\"number\">0.5</span> - <span class=\"number\">0.4</span>;</span><br><span class=\"line\">System.out.println(a == b);<span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(b == c);<span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>关于for循环，三个表达式都是可选的，第一个表达式只会执行一次，后两个表达式每循环一次就会执行一次，第一/三个表达式允许写多条语句，使用<code>,</code>分隔，第二个表达式要么为空，要么返回布尔值；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无限循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(;;)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * method1和method2只执行一次</span></span><br><span class=\"line\"><span class=\"comment\"> * method3，method4和method5每次循环都会执行</span></span><br><span class=\"line\"><span class=\"comment\"> * method6会在method3之后执行</span></span><br><span class=\"line\"><span class=\"comment\"> * method3必须返回boolean值，其他方法无要求</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (method1(), method2(); method3(); method4(), method5()) &#123;</span><br><span class=\"line\">    method6();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当使用<code>Arrays.asList()</code>方法将数组转换成列表的时候，需要注意参数的类型，当参数为基础类型的数组时，生成的列表长度为1，其内容为参数指向的数组对象，使用基础类型的包装类数组可以解决这个问题；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] ints = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(Arrays.asList(ints).size());<span class=\"comment\">// 1</span></span><br><span class=\"line\">Integer[] integers = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(Arrays.asList(integers).size());<span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当方法的参数是基础数据类型时，调用方法传入对应的包装类，会调用对应包装类的拆箱方法<code>xxxValue（）</code>，如果传入的参数为null，则会报空指针异常；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double d = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">method(d);<span class=\"comment\">// NullPointerException</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接口可以继承多个接口，类只能继承一个类，可以实现多个接口。</p>\n</li>\n</ol>"},{"_content":"### shell 概念\n\nshell是一个命令行解释器，相当于机器外面的一层壳，用于人机交互，只要是人与电脑之间交互的借口，就可以称之为shell。表现为用户输入一条命令，shell就立即执行一条命令。不局限于系统、语言等概念、操作方式和表现方式等。 比如我们平时在黑框框里输入命令，叫 command-line interface (CLI)；在屏幕上点点点，叫graphical user interface (GUI)。\n\n<!-- more -->\n\n常见的shell种类有：Bsh、Csh、Ksh、Bash、Zsh\n\nBsh和Csh出现的较早，Ksh继承了它两的功能，Bash继承了Bsh和Ksh的升级版，而且是Linux系统中默认的shell，Zsh则兼具了各种shell的程序有点，交互式操作效率更高。很多人使用zsh而不是bash一大半原因是oh-my-zsh这个配置集。\n\n### 安装 zsh\n\n#### 第一步：查看系统中有无zsh及版本**\n\n~~~bash\n$ cat /etc/shells 或\n$ zsh --version\n\n$ echo $ZSH_VERSION\n~~~\n\n#### **第二步：若系统中不存在zsh，则需要安装：([更多安装方式](https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH))**\n\n~~~bash\n$ sudo yum install zsh  (Fedora和RedHat以及SUSE中)\n$ sudo apt-get install zsh  (Debian系列，Ubuntu，deepin)\n~~~\n\n#### **第三步：查看当前默认shell**\n\n~~~bash\n$ echo $SHELL\n\n// 把zsh设为默认shell，如果shell列表中没有zsh或者你没有使用chsh权限的时候，不起作用\n$ [sudo] chsh -s $(which zsh) 或\n$ chsh -s /bin/zsh\n~~~\n\n退出重新登录后生效\n\n#### **第四步：安装 oh-my-zsh**\n\n安装 oh-my-zsh 之前必须安装zsh，否则会收到如下提示：Zsh is not installed! Please install zsh first!\n\n~~~zsh\n#方法一：wget方式自动化安装oh my zsh：\n$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n\n#方法二：\n$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh \n\n#官网上的另外一种写法 \n$ sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n$ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n#方法三：当然也可以通过git下载 \n$ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n~~~\n\n#### **第五步：配置 oh-my-zsh**\n\n- **查看可用主题**\n\n  ```\n  $ ls ~/.oh-my-zsh/themes\n  ```\n\n- **oh-my-zsh的默认配置文件在 ~/.zshrc,通过编辑它修改主题，更改其他配置**\n\n  ```\n  $ vim ~/.zshrc  // 修改其中的 ZSH_THEME=“主题名称”，本人使用是ys\n  ```\n\n- **退出后，重启终端或应用配置文件，配置生效**\n\n  ```\n  source ~/.zshrc\n  ```\n\n####  第六步：安装自动补齐插件（选用）\n\n提示：补齐插件在使用git指令时会出现严重的卡顿现象，酌情使用。\n\n- **下载插件**\n\n  http://mimosa-pudica.net/src/incr-0.2.zsh\n  \n- **将插件移动到oh-my-zsh目录的插件库下 (~/.oh-my-zsh/plugins/incr/,如果没有incr就新建一个)**\n\n  ```\n  $ cd ~/.oh-my-zsh/plugins/incr/\n  $ ls\n  incr-0.2.zsh\n  ```\n\n- **在`~/.zshrc`配置文件末尾加入**\n\n  ```\n  source ~/.oh-my-zsh/plugins/incr/incr*.zsh\n  ```\n\n- **更新配置**\n\n  ```\n  $ source ~/.zshrc\n  ```\n\n- **vim冲突解决**\n\n  使用自动补全插件可能会与vim的提示功能相冲突，如会报以下错误：\n\n  ```\n  $ vim t\n  _arguments:451: _vim_files: function definition file not found\n  ```\n\n  解决方法：将`~/.zcompdump*`删除即可\n\n  ```\n  $ rm -rf ~/.zcompdump*\n  $ exec zsh\n  ```\n\n> 参考文章：\n>\n> [Mac、Linux 安装zsh & ohmyzsh](https://www.jianshu.com/p/d194d29e488c)\n>\n> [你明白 shell、bash 和 zsh 等词的真正含义吗？](https://zhuanlan.zhihu.com/p/34197680)","source":"_posts/Linux 安装zsh & oh-my-zsh.md","raw":"### shell 概念\n\nshell是一个命令行解释器，相当于机器外面的一层壳，用于人机交互，只要是人与电脑之间交互的借口，就可以称之为shell。表现为用户输入一条命令，shell就立即执行一条命令。不局限于系统、语言等概念、操作方式和表现方式等。 比如我们平时在黑框框里输入命令，叫 command-line interface (CLI)；在屏幕上点点点，叫graphical user interface (GUI)。\n\n<!-- more -->\n\n常见的shell种类有：Bsh、Csh、Ksh、Bash、Zsh\n\nBsh和Csh出现的较早，Ksh继承了它两的功能，Bash继承了Bsh和Ksh的升级版，而且是Linux系统中默认的shell，Zsh则兼具了各种shell的程序有点，交互式操作效率更高。很多人使用zsh而不是bash一大半原因是oh-my-zsh这个配置集。\n\n### 安装 zsh\n\n#### 第一步：查看系统中有无zsh及版本**\n\n~~~bash\n$ cat /etc/shells 或\n$ zsh --version\n\n$ echo $ZSH_VERSION\n~~~\n\n#### **第二步：若系统中不存在zsh，则需要安装：([更多安装方式](https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH))**\n\n~~~bash\n$ sudo yum install zsh  (Fedora和RedHat以及SUSE中)\n$ sudo apt-get install zsh  (Debian系列，Ubuntu，deepin)\n~~~\n\n#### **第三步：查看当前默认shell**\n\n~~~bash\n$ echo $SHELL\n\n// 把zsh设为默认shell，如果shell列表中没有zsh或者你没有使用chsh权限的时候，不起作用\n$ [sudo] chsh -s $(which zsh) 或\n$ chsh -s /bin/zsh\n~~~\n\n退出重新登录后生效\n\n#### **第四步：安装 oh-my-zsh**\n\n安装 oh-my-zsh 之前必须安装zsh，否则会收到如下提示：Zsh is not installed! Please install zsh first!\n\n~~~zsh\n#方法一：wget方式自动化安装oh my zsh：\n$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n\n#方法二：\n$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh \n\n#官网上的另外一种写法 \n$ sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n$ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n#方法三：当然也可以通过git下载 \n$ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n~~~\n\n#### **第五步：配置 oh-my-zsh**\n\n- **查看可用主题**\n\n  ```\n  $ ls ~/.oh-my-zsh/themes\n  ```\n\n- **oh-my-zsh的默认配置文件在 ~/.zshrc,通过编辑它修改主题，更改其他配置**\n\n  ```\n  $ vim ~/.zshrc  // 修改其中的 ZSH_THEME=“主题名称”，本人使用是ys\n  ```\n\n- **退出后，重启终端或应用配置文件，配置生效**\n\n  ```\n  source ~/.zshrc\n  ```\n\n####  第六步：安装自动补齐插件（选用）\n\n提示：补齐插件在使用git指令时会出现严重的卡顿现象，酌情使用。\n\n- **下载插件**\n\n  http://mimosa-pudica.net/src/incr-0.2.zsh\n  \n- **将插件移动到oh-my-zsh目录的插件库下 (~/.oh-my-zsh/plugins/incr/,如果没有incr就新建一个)**\n\n  ```\n  $ cd ~/.oh-my-zsh/plugins/incr/\n  $ ls\n  incr-0.2.zsh\n  ```\n\n- **在`~/.zshrc`配置文件末尾加入**\n\n  ```\n  source ~/.oh-my-zsh/plugins/incr/incr*.zsh\n  ```\n\n- **更新配置**\n\n  ```\n  $ source ~/.zshrc\n  ```\n\n- **vim冲突解决**\n\n  使用自动补全插件可能会与vim的提示功能相冲突，如会报以下错误：\n\n  ```\n  $ vim t\n  _arguments:451: _vim_files: function definition file not found\n  ```\n\n  解决方法：将`~/.zcompdump*`删除即可\n\n  ```\n  $ rm -rf ~/.zcompdump*\n  $ exec zsh\n  ```\n\n> 参考文章：\n>\n> [Mac、Linux 安装zsh & ohmyzsh](https://www.jianshu.com/p/d194d29e488c)\n>\n> [你明白 shell、bash 和 zsh 等词的真正含义吗？](https://zhuanlan.zhihu.com/p/34197680)","slug":"Linux 安装zsh & oh-my-zsh","published":1,"date":"2020-01-08T12:05:37.226Z","updated":"2020-01-05T15:32:14.000Z","title":"Linux 安装zsh & oh-my-zsh","comments":1,"layout":"post","photos":[],"link":"","_id":"ck55bv1k80008w2pmhxrf1brq","content":"<h3 id=\"shell-概念\"><a href=\"#shell-概念\" class=\"headerlink\" title=\"shell 概念\"></a>shell 概念</h3><p>shell是一个命令行解释器，相当于机器外面的一层壳，用于人机交互，只要是人与电脑之间交互的借口，就可以称之为shell。表现为用户输入一条命令，shell就立即执行一条命令。不局限于系统、语言等概念、操作方式和表现方式等。 比如我们平时在黑框框里输入命令，叫 command-line interface (CLI)；在屏幕上点点点，叫graphical user interface (GUI)。</p>\n<a id=\"more\"></a>\n\n<p>常见的shell种类有：Bsh、Csh、Ksh、Bash、Zsh</p>\n<p>Bsh和Csh出现的较早，Ksh继承了它两的功能，Bash继承了Bsh和Ksh的升级版，而且是Linux系统中默认的shell，Zsh则兼具了各种shell的程序有点，交互式操作效率更高。很多人使用zsh而不是bash一大半原因是oh-my-zsh这个配置集。</p>\n<h3 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h3><h4 id=\"第一步：查看系统中有无zsh及版本\"><a href=\"#第一步：查看系统中有无zsh及版本\" class=\"headerlink\" title=\"第一步：查看系统中有无zsh及版本**\"></a>第一步：查看系统中有无zsh及版本**</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/shells 或</span><br><span class=\"line\">$ zsh --version</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$ZSH_VERSION</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二步：若系统中不存在zsh，则需要安装：-更多安装方式\"><a href=\"#第二步：若系统中不存在zsh，则需要安装：-更多安装方式\" class=\"headerlink\" title=\"第二步：若系统中不存在zsh，则需要安装：(更多安装方式)\"></a><strong>第二步：若系统中不存在zsh，则需要安装：(<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\" target=\"_blank\" rel=\"noopener\">更多安装方式</a>)</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install zsh  (Fedora和RedHat以及SUSE中)</span><br><span class=\"line\">$ sudo apt-get install zsh  (Debian系列，Ubuntu，deepin)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：查看当前默认shell\"><a href=\"#第三步：查看当前默认shell\" class=\"headerlink\" title=\"第三步：查看当前默认shell\"></a><strong>第三步：查看当前默认shell</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 把zsh设为默认shell，如果shell列表中没有zsh或者你没有使用chsh权限的时候，不起作用</span><br><span class=\"line\">$ [sudo] chsh -s $(<span class=\"built_in\">which</span> zsh) 或</span><br><span class=\"line\">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>退出重新登录后生效</p>\n<h4 id=\"第四步：安装-oh-my-zsh\"><a href=\"#第四步：安装-oh-my-zsh\" class=\"headerlink\" title=\"第四步：安装 oh-my-zsh\"></a><strong>第四步：安装 oh-my-zsh</strong></h4><p>安装 oh-my-zsh 之前必须安装zsh，否则会收到如下提示：Zsh is not installed! Please install zsh first!</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法一：wget方式自动化安装oh my zsh：</span></span><br><span class=\"line\">$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法二：</span></span><br><span class=\"line\">$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#官网上的另外一种写法 </span></span><br><span class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></span><br><span class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法三：当然也可以通过git下载 </span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第五步：配置-oh-my-zsh\"><a href=\"#第五步：配置-oh-my-zsh\" class=\"headerlink\" title=\"第五步：配置 oh-my-zsh\"></a><strong>第五步：配置 oh-my-zsh</strong></h4><ul>\n<li><p><strong>查看可用主题</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls ~&#x2F;.oh-my-zsh&#x2F;themes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>oh-my-zsh的默认配置文件在 ~/.zshrc,通过编辑它修改主题，更改其他配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~&#x2F;.zshrc  &#x2F;&#x2F; 修改其中的 ZSH_THEME&#x3D;“主题名称”，本人使用是ys</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>退出后，重启终端或应用配置文件，配置生效</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"第六步：安装自动补齐插件（选用）\"><a href=\"#第六步：安装自动补齐插件（选用）\" class=\"headerlink\" title=\"第六步：安装自动补齐插件（选用）\"></a>第六步：安装自动补齐插件（选用）</h4><p>提示：补齐插件在使用git指令时会出现严重的卡顿现象，酌情使用。</p>\n<ul>\n<li><p><strong>下载插件</strong></p>\n<p><a href=\"http://mimosa-pudica.net/src/incr-0.2.zsh\" target=\"_blank\" rel=\"noopener\">http://mimosa-pudica.net/src/incr-0.2.zsh</a></p>\n</li>\n<li><p><strong>将插件移动到oh-my-zsh目录的插件库下 (~/.oh-my-zsh/plugins/incr/,如果没有incr就新建一个)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;incr&#x2F;</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">incr-0.2.zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在<code>~/.zshrc</code>配置文件末尾加入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;incr&#x2F;incr*.zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>更新配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>vim冲突解决</strong></p>\n<p>使用自动补全插件可能会与vim的提示功能相冲突，如会报以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim t</span><br><span class=\"line\">_arguments:451: _vim_files: function definition file not found</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：将<code>~/.zcompdump*</code>删除即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf ~&#x2F;.zcompdump*</span><br><span class=\"line\">$ exec zsh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/d194d29e488c\" target=\"_blank\" rel=\"noopener\">Mac、Linux 安装zsh &amp; ohmyzsh</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/34197680\" target=\"_blank\" rel=\"noopener\">你明白 shell、bash 和 zsh 等词的真正含义吗？</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"shell-概念\"><a href=\"#shell-概念\" class=\"headerlink\" title=\"shell 概念\"></a>shell 概念</h3><p>shell是一个命令行解释器，相当于机器外面的一层壳，用于人机交互，只要是人与电脑之间交互的借口，就可以称之为shell。表现为用户输入一条命令，shell就立即执行一条命令。不局限于系统、语言等概念、操作方式和表现方式等。 比如我们平时在黑框框里输入命令，叫 command-line interface (CLI)；在屏幕上点点点，叫graphical user interface (GUI)。</p>","more":"<p>常见的shell种类有：Bsh、Csh、Ksh、Bash、Zsh</p>\n<p>Bsh和Csh出现的较早，Ksh继承了它两的功能，Bash继承了Bsh和Ksh的升级版，而且是Linux系统中默认的shell，Zsh则兼具了各种shell的程序有点，交互式操作效率更高。很多人使用zsh而不是bash一大半原因是oh-my-zsh这个配置集。</p>\n<h3 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h3><h4 id=\"第一步：查看系统中有无zsh及版本\"><a href=\"#第一步：查看系统中有无zsh及版本\" class=\"headerlink\" title=\"第一步：查看系统中有无zsh及版本**\"></a>第一步：查看系统中有无zsh及版本**</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/shells 或</span><br><span class=\"line\">$ zsh --version</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$ZSH_VERSION</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二步：若系统中不存在zsh，则需要安装：-更多安装方式\"><a href=\"#第二步：若系统中不存在zsh，则需要安装：-更多安装方式\" class=\"headerlink\" title=\"第二步：若系统中不存在zsh，则需要安装：(更多安装方式)\"></a><strong>第二步：若系统中不存在zsh，则需要安装：(<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\" target=\"_blank\" rel=\"noopener\">更多安装方式</a>)</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install zsh  (Fedora和RedHat以及SUSE中)</span><br><span class=\"line\">$ sudo apt-get install zsh  (Debian系列，Ubuntu，deepin)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：查看当前默认shell\"><a href=\"#第三步：查看当前默认shell\" class=\"headerlink\" title=\"第三步：查看当前默认shell\"></a><strong>第三步：查看当前默认shell</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 把zsh设为默认shell，如果shell列表中没有zsh或者你没有使用chsh权限的时候，不起作用</span><br><span class=\"line\">$ [sudo] chsh -s $(<span class=\"built_in\">which</span> zsh) 或</span><br><span class=\"line\">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>退出重新登录后生效</p>\n<h4 id=\"第四步：安装-oh-my-zsh\"><a href=\"#第四步：安装-oh-my-zsh\" class=\"headerlink\" title=\"第四步：安装 oh-my-zsh\"></a><strong>第四步：安装 oh-my-zsh</strong></h4><p>安装 oh-my-zsh 之前必须安装zsh，否则会收到如下提示：Zsh is not installed! Please install zsh first!</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法一：wget方式自动化安装oh my zsh：</span></span><br><span class=\"line\">$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法二：</span></span><br><span class=\"line\">$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#官网上的另外一种写法 </span></span><br><span class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></span><br><span class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法三：当然也可以通过git下载 </span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第五步：配置-oh-my-zsh\"><a href=\"#第五步：配置-oh-my-zsh\" class=\"headerlink\" title=\"第五步：配置 oh-my-zsh\"></a><strong>第五步：配置 oh-my-zsh</strong></h4><ul>\n<li><p><strong>查看可用主题</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls ~&#x2F;.oh-my-zsh&#x2F;themes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>oh-my-zsh的默认配置文件在 ~/.zshrc,通过编辑它修改主题，更改其他配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~&#x2F;.zshrc  &#x2F;&#x2F; 修改其中的 ZSH_THEME&#x3D;“主题名称”，本人使用是ys</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>退出后，重启终端或应用配置文件，配置生效</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"第六步：安装自动补齐插件（选用）\"><a href=\"#第六步：安装自动补齐插件（选用）\" class=\"headerlink\" title=\"第六步：安装自动补齐插件（选用）\"></a>第六步：安装自动补齐插件（选用）</h4><p>提示：补齐插件在使用git指令时会出现严重的卡顿现象，酌情使用。</p>\n<ul>\n<li><p><strong>下载插件</strong></p>\n<p><a href=\"http://mimosa-pudica.net/src/incr-0.2.zsh\" target=\"_blank\" rel=\"noopener\">http://mimosa-pudica.net/src/incr-0.2.zsh</a></p>\n</li>\n<li><p><strong>将插件移动到oh-my-zsh目录的插件库下 (~/.oh-my-zsh/plugins/incr/,如果没有incr就新建一个)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;incr&#x2F;</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">incr-0.2.zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在<code>~/.zshrc</code>配置文件末尾加入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;incr&#x2F;incr*.zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>更新配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>vim冲突解决</strong></p>\n<p>使用自动补全插件可能会与vim的提示功能相冲突，如会报以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim t</span><br><span class=\"line\">_arguments:451: _vim_files: function definition file not found</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：将<code>~/.zcompdump*</code>删除即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf ~&#x2F;.zcompdump*</span><br><span class=\"line\">$ exec zsh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/d194d29e488c\" target=\"_blank\" rel=\"noopener\">Mac、Linux 安装zsh &amp; ohmyzsh</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/34197680\" target=\"_blank\" rel=\"noopener\">你明白 shell、bash 和 zsh 等词的真正含义吗？</a></p>\n</blockquote>"},{"title":"Java高级特性-反射","date":"2018-07-24T07:48:28.000Z","comments":1,"_content":"\n在Java开发中，反射是一个经常用到的技术，几乎所有的框架都有使用反射机制，反射作为Java的一种高级特性，在实际生产中被大量应用，掌握它就显得尤为必要了。\n\n<!-- more -->\n\n### 什么是反射？\n\n反射机制是Java 语言的特性之一，所谓的反射就是Java语言在运行时拥有的一项自观的能力。在Java运行时环境中，对于任意一个类，可以知道这个类有哪些属性和方法；对于任意一个对象，可以调用它的任意一个方法。这种动态获取类的信息以及动态调用对象的方法的能力就是Java 语言的反射（Reflection）机制。 \n\n### 万物皆对象\n\nJava是面向对象的高级语言，在面向对象的世界里，万事万物皆是对象，那么类是不是对象呢？是的，我们写的每一个类都是`Class`类的对象。每一个类有自己的对象，同时也是`Class`类的对象，想要了解反射，就必须先了解`Class`这个类。\n\n#### java.lang.Class\n\n构造方法\n\n```java\n\t/*\n     * Private constructor. Only the Java Virtual Machine creates Class objects.\n     * This constructor is not used and prevents the default constructor being\n     * generated.\n     */\n    private Class(ClassLoader loader) {\n        classLoader = loader;\n    }\n```\n\n根据注释可知，`Class`类的构造方法是私有的，只有 Java 虚拟机可以创建该类的对象，因此我们无法在代码中显式地声明一个 `Class`对象。\n\n#### 获取Class类的对象\n\n声明一个`Person`类\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person() {\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    //省略setter和getter\n}\n```\n\n在上面说过，`Class` 类的构造方法是私有的，只有 java 虚拟机可以调用该方法创建该类的对象。也就是说我们无法像定义普通类对象一样，通过 new 直接创建 `Class` 类的对象，那应该如何得到`Person`的类对象呢？有以下几种方法。\n\n```java\npublic class ClassTest {\n    public static void main(String[] args) throws ClassNotFoundException {\n        Person person = new Person();\n        Class clazz;\n\n        // 1、通过类的静态成员得到Person的类对象，每一个类都有一个隐含的静态成员class\n        clazz = Person.class;\n        System.out.println(clazz);\n\n        // 2、通过Person类的实例得到它的Class对象\n        clazz = person.getClass();\n        System.out.println(clazz);\n\n        // 3、通过Class的静态方法forName(className)得到类对象，这里注意处理异常\n        clazz = Class.forName(\"cn.glieen.pojo.Person\");\n        System.out.println(clazz);\n    }\n}\n```\n\n从运行结果可以看到，我们都能得到`Person` 的`Class`对象。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5p44tt7j30dn02wjrb.jpg)\n\n实际使用当中，最常用的是第三种方法，该方法可以实现类的动态加载，在使用时才加载该类。\n\n\n\n### 反射的基本运用\n\n#### 得到类的成员（constructor、field、method）\n\n```java\npublic class ReflectTest {\n    public static void main(String[] args) throws ClassNotFoundException {\n        // 得到类的Class对象\n        Class<?> clazz = Class.forName(\"cn.glieen.pojo.Person\");\n\n        // 获取类的构造方法\n        Constructor<?>[] constructors = clazz.getConstructors();\n        for (Constructor<?> constructor : constructors) {\n            System.out.println(\"constructor = \" + constructor);\n        }\n\n        // 获取类的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(\"field = \" + field);\n        }\n\n        // 获取类的成员方法\n        Method[] methods = clazz.getMethods();\n        for (Method method : methods) {\n            System.out.println(\"method = \" + method);\n        }\n    }\n}\n```\n\n运行结果：\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p49bsej30rv0bnt9o.jpg)\n\n由运行结果我们可以看到，`Person`类的构造方法，成员变量和成员方法都获取到了，**值得注意的是**，`getConstructors()`、`getFields()`和`getMethods()`只能得到类中公有的成员属性，如果想得到私有的成员属性，需要调用`getDeclaredConstructors()`、`getDeclaredFields()`和`getDeclaredMethods()`方法。\n\n#### 得到类的实例\n\n通过`Class`类的`newInstance()`方法可以得到`Class`对象所指类的实例。\n\n```java\n// 通过Class的对象得到Person类的实例，注意强制转型和异常处理\nPerson person = (Person) clazz.newInstance();\n```\n\n**需要注意的是:**`clazz.newInstance()`会调用`Person`类的无参构造方法，当`Person`类不存在无参构造方法时，程序会抛出`InstantiationException `异常，所以当决定使用动态加载时，应当保留类中公有无参的构造器。\n\n#### 反射调用类中的方法\n\n通过反射可以调用类中的各个方法，下面代码利用反射为`Person`对象的成员变量注入值：\n\n```java\npublic class ReflectTest {\n    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n        // 得到类的Class对象\n        Class<?> clazz = Class.forName(\"cn.glieen.pojo.Person\");\n\n        // 通过Class的对象得到Person类的实例，注意强制转型和异常处理\n        Person person = (Person) clazz.newInstance();\n\n        // 得到类中的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n\n        for (Field field : fields) {\n            String fieldName = field.getName();\n            // 得到成员变量的setter方法\n            Method method = clazz.getMethod(\"set\" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1), field.getType());\n            if (field.getGenericType().equals(String.class)) {\n                // 反射调用setter方法\n                method.invoke(person, \"glieen\");\n            }\n            if (field.getGenericType().equals(int.class)) {\n                method.invoke(person, 23);\n            }\n        }\n\n        System.out.println(person);\n    }\n}\n```\n\n运行结果：\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p4i6xrj30f801va9x.jpg)\n\n反射不仅可以调用普通方法，私有方法，构造函数也是可以调用的，需要注意的是调用私有方法之前应当使用`method.setAccessible(true)`改变方法可见性，否则调用时会抛出异常。\n\n### java.lang.reflect\n\n`java.lang.reflect`包提供了用于获取类和对象的反射信息的类和接口。反射API允许对程序访问有关加载类的字段，方法和构造函数的信息进行编程访问。它允许在安全限制内使用反射的字段，方法和构造函数对其底层对等进行操作。 \n\n`java.lang.reflect`包下有几个比较重要的类，`java.lang.reflect.Field`，`java.lang.reflect.Method`，`java.lang.reflect.Type`，`java.lang.reflect.Constructor`，在反射的使用中是经常会用到的，这里我就不过多阐述了。\n\n### 总结\n\n反射作为Java最核心机制之一，已经被普遍使用于各大框架和项目之中，理解并掌握反射将会使得编写和阅读代码更加高效。\n\n*运行环境*\n\n*JDK：1.8*\n\n*IDE：IntelliJ IDEA 2017.3.5*\n\n*如有错误，还请指正*","source":"_posts/Java高级特性-反射.md","raw":"---\ntitle: Java高级特性-反射\ndate: 2018-07-24 15:48:28\ntags: [Java,基础知识]\ncategories: Java\ncomments: true\n---\n\n在Java开发中，反射是一个经常用到的技术，几乎所有的框架都有使用反射机制，反射作为Java的一种高级特性，在实际生产中被大量应用，掌握它就显得尤为必要了。\n\n<!-- more -->\n\n### 什么是反射？\n\n反射机制是Java 语言的特性之一，所谓的反射就是Java语言在运行时拥有的一项自观的能力。在Java运行时环境中，对于任意一个类，可以知道这个类有哪些属性和方法；对于任意一个对象，可以调用它的任意一个方法。这种动态获取类的信息以及动态调用对象的方法的能力就是Java 语言的反射（Reflection）机制。 \n\n### 万物皆对象\n\nJava是面向对象的高级语言，在面向对象的世界里，万事万物皆是对象，那么类是不是对象呢？是的，我们写的每一个类都是`Class`类的对象。每一个类有自己的对象，同时也是`Class`类的对象，想要了解反射，就必须先了解`Class`这个类。\n\n#### java.lang.Class\n\n构造方法\n\n```java\n\t/*\n     * Private constructor. Only the Java Virtual Machine creates Class objects.\n     * This constructor is not used and prevents the default constructor being\n     * generated.\n     */\n    private Class(ClassLoader loader) {\n        classLoader = loader;\n    }\n```\n\n根据注释可知，`Class`类的构造方法是私有的，只有 Java 虚拟机可以创建该类的对象，因此我们无法在代码中显式地声明一个 `Class`对象。\n\n#### 获取Class类的对象\n\n声明一个`Person`类\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person() {\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    //省略setter和getter\n}\n```\n\n在上面说过，`Class` 类的构造方法是私有的，只有 java 虚拟机可以调用该方法创建该类的对象。也就是说我们无法像定义普通类对象一样，通过 new 直接创建 `Class` 类的对象，那应该如何得到`Person`的类对象呢？有以下几种方法。\n\n```java\npublic class ClassTest {\n    public static void main(String[] args) throws ClassNotFoundException {\n        Person person = new Person();\n        Class clazz;\n\n        // 1、通过类的静态成员得到Person的类对象，每一个类都有一个隐含的静态成员class\n        clazz = Person.class;\n        System.out.println(clazz);\n\n        // 2、通过Person类的实例得到它的Class对象\n        clazz = person.getClass();\n        System.out.println(clazz);\n\n        // 3、通过Class的静态方法forName(className)得到类对象，这里注意处理异常\n        clazz = Class.forName(\"cn.glieen.pojo.Person\");\n        System.out.println(clazz);\n    }\n}\n```\n\n从运行结果可以看到，我们都能得到`Person` 的`Class`对象。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5p44tt7j30dn02wjrb.jpg)\n\n实际使用当中，最常用的是第三种方法，该方法可以实现类的动态加载，在使用时才加载该类。\n\n\n\n### 反射的基本运用\n\n#### 得到类的成员（constructor、field、method）\n\n```java\npublic class ReflectTest {\n    public static void main(String[] args) throws ClassNotFoundException {\n        // 得到类的Class对象\n        Class<?> clazz = Class.forName(\"cn.glieen.pojo.Person\");\n\n        // 获取类的构造方法\n        Constructor<?>[] constructors = clazz.getConstructors();\n        for (Constructor<?> constructor : constructors) {\n            System.out.println(\"constructor = \" + constructor);\n        }\n\n        // 获取类的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(\"field = \" + field);\n        }\n\n        // 获取类的成员方法\n        Method[] methods = clazz.getMethods();\n        for (Method method : methods) {\n            System.out.println(\"method = \" + method);\n        }\n    }\n}\n```\n\n运行结果：\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p49bsej30rv0bnt9o.jpg)\n\n由运行结果我们可以看到，`Person`类的构造方法，成员变量和成员方法都获取到了，**值得注意的是**，`getConstructors()`、`getFields()`和`getMethods()`只能得到类中公有的成员属性，如果想得到私有的成员属性，需要调用`getDeclaredConstructors()`、`getDeclaredFields()`和`getDeclaredMethods()`方法。\n\n#### 得到类的实例\n\n通过`Class`类的`newInstance()`方法可以得到`Class`对象所指类的实例。\n\n```java\n// 通过Class的对象得到Person类的实例，注意强制转型和异常处理\nPerson person = (Person) clazz.newInstance();\n```\n\n**需要注意的是:**`clazz.newInstance()`会调用`Person`类的无参构造方法，当`Person`类不存在无参构造方法时，程序会抛出`InstantiationException `异常，所以当决定使用动态加载时，应当保留类中公有无参的构造器。\n\n#### 反射调用类中的方法\n\n通过反射可以调用类中的各个方法，下面代码利用反射为`Person`对象的成员变量注入值：\n\n```java\npublic class ReflectTest {\n    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n        // 得到类的Class对象\n        Class<?> clazz = Class.forName(\"cn.glieen.pojo.Person\");\n\n        // 通过Class的对象得到Person类的实例，注意强制转型和异常处理\n        Person person = (Person) clazz.newInstance();\n\n        // 得到类中的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n\n        for (Field field : fields) {\n            String fieldName = field.getName();\n            // 得到成员变量的setter方法\n            Method method = clazz.getMethod(\"set\" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1), field.getType());\n            if (field.getGenericType().equals(String.class)) {\n                // 反射调用setter方法\n                method.invoke(person, \"glieen\");\n            }\n            if (field.getGenericType().equals(int.class)) {\n                method.invoke(person, 23);\n            }\n        }\n\n        System.out.println(person);\n    }\n}\n```\n\n运行结果：\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p4i6xrj30f801va9x.jpg)\n\n反射不仅可以调用普通方法，私有方法，构造函数也是可以调用的，需要注意的是调用私有方法之前应当使用`method.setAccessible(true)`改变方法可见性，否则调用时会抛出异常。\n\n### java.lang.reflect\n\n`java.lang.reflect`包提供了用于获取类和对象的反射信息的类和接口。反射API允许对程序访问有关加载类的字段，方法和构造函数的信息进行编程访问。它允许在安全限制内使用反射的字段，方法和构造函数对其底层对等进行操作。 \n\n`java.lang.reflect`包下有几个比较重要的类，`java.lang.reflect.Field`，`java.lang.reflect.Method`，`java.lang.reflect.Type`，`java.lang.reflect.Constructor`，在反射的使用中是经常会用到的，这里我就不过多阐述了。\n\n### 总结\n\n反射作为Java最核心机制之一，已经被普遍使用于各大框架和项目之中，理解并掌握反射将会使得编写和阅读代码更加高效。\n\n*运行环境*\n\n*JDK：1.8*\n\n*IDE：IntelliJ IDEA 2017.3.5*\n\n*如有错误，还请指正*","slug":"Java高级特性-反射","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1k90009w2pm2cnphhb7","content":"<p>在Java开发中，反射是一个经常用到的技术，几乎所有的框架都有使用反射机制，反射作为Java的一种高级特性，在实际生产中被大量应用，掌握它就显得尤为必要了。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是反射？\"><a href=\"#什么是反射？\" class=\"headerlink\" title=\"什么是反射？\"></a>什么是反射？</h3><p>反射机制是Java 语言的特性之一，所谓的反射就是Java语言在运行时拥有的一项自观的能力。在Java运行时环境中，对于任意一个类，可以知道这个类有哪些属性和方法；对于任意一个对象，可以调用它的任意一个方法。这种动态获取类的信息以及动态调用对象的方法的能力就是Java 语言的反射（Reflection）机制。 </p>\n<h3 id=\"万物皆对象\"><a href=\"#万物皆对象\" class=\"headerlink\" title=\"万物皆对象\"></a>万物皆对象</h3><p>Java是面向对象的高级语言，在面向对象的世界里，万事万物皆是对象，那么类是不是对象呢？是的，我们写的每一个类都是<code>Class</code>类的对象。每一个类有自己的对象，同时也是<code>Class</code>类的对象，想要了解反射，就必须先了解<code>Class</code>这个类。</p>\n<h4 id=\"java-lang-Class\"><a href=\"#java-lang-Class\" class=\"headerlink\" title=\"java.lang.Class\"></a>java.lang.Class</h4><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Private constructor. Only the Java Virtual Machine creates Class objects.</span></span><br><span class=\"line\"><span class=\"comment\">    * This constructor is not used and prevents the default constructor being</span></span><br><span class=\"line\"><span class=\"comment\">    * generated.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Class</span><span class=\"params\">(ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">       classLoader = loader;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据注释可知，<code>Class</code>类的构造方法是私有的，只有 Java 虚拟机可以创建该类的对象，因此我们无法在代码中显式地声明一个 <code>Class</code>对象。</p>\n<h4 id=\"获取Class类的对象\"><a href=\"#获取Class类的对象\" class=\"headerlink\" title=\"获取Class类的对象\"></a>获取Class类的对象</h4><p>声明一个<code>Person</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//省略setter和getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面说过，<code>Class</code> 类的构造方法是私有的，只有 java 虚拟机可以调用该方法创建该类的对象。也就是说我们无法像定义普通类对象一样，通过 new 直接创建 <code>Class</code> 类的对象，那应该如何得到<code>Person</code>的类对象呢？有以下几种方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        Class clazz;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 1、通过类的静态成员得到Person的类对象，每一个类都有一个隐含的静态成员class</span></span><br><span class=\"line\">        clazz = Person<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">        System.out.println(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2、通过Person类的实例得到它的Class对象</span></span><br><span class=\"line\">        clazz = person.getClass();</span><br><span class=\"line\">        System.out.println(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3、通过Class的静态方法forName(className)得到类对象，这里注意处理异常</span></span><br><span class=\"line\">        clazz = Class.forName(<span class=\"string\">\"cn.glieen.pojo.Person\"</span>);</span><br><span class=\"line\">        System.out.println(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从运行结果可以看到，我们都能得到<code>Person</code> 的<code>Class</code>对象。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5p44tt7j30dn02wjrb.jpg\" alt=\"image\"></p>\n<p>实际使用当中，最常用的是第三种方法，该方法可以实现类的动态加载，在使用时才加载该类。</p>\n<h3 id=\"反射的基本运用\"><a href=\"#反射的基本运用\" class=\"headerlink\" title=\"反射的基本运用\"></a>反射的基本运用</h3><h4 id=\"得到类的成员（constructor、field、method）\"><a href=\"#得到类的成员（constructor、field、method）\" class=\"headerlink\" title=\"得到类的成员（constructor、field、method）\"></a>得到类的成员（constructor、field、method）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 得到类的Class对象</span></span><br><span class=\"line\">        Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"cn.glieen.pojo.Person\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取类的构造方法</span></span><br><span class=\"line\">        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"constructor = \"</span> + constructor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取类的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"field = \"</span> + field);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取类的成员方法</span></span><br><span class=\"line\">        Method[] methods = clazz.getMethods();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"method = \"</span> + method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p49bsej30rv0bnt9o.jpg\" alt=\"image\"></p>\n<p>由运行结果我们可以看到，<code>Person</code>类的构造方法，成员变量和成员方法都获取到了，<strong>值得注意的是</strong>，<code>getConstructors()</code>、<code>getFields()</code>和<code>getMethods()</code>只能得到类中公有的成员属性，如果想得到私有的成员属性，需要调用<code>getDeclaredConstructors()</code>、<code>getDeclaredFields()</code>和<code>getDeclaredMethods()</code>方法。</p>\n<h4 id=\"得到类的实例\"><a href=\"#得到类的实例\" class=\"headerlink\" title=\"得到类的实例\"></a>得到类的实例</h4><p>通过<code>Class</code>类的<code>newInstance()</code>方法可以得到<code>Class</code>对象所指类的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过Class的对象得到Person类的实例，注意强制转型和异常处理</span></span><br><span class=\"line\">Person person = (Person) clazz.newInstance();</span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的是:</strong><code>clazz.newInstance()</code>会调用<code>Person</code>类的无参构造方法，当<code>Person</code>类不存在无参构造方法时，程序会抛出<code>InstantiationException</code>异常，所以当决定使用动态加载时，应当保留类中公有无参的构造器。</p>\n<h4 id=\"反射调用类中的方法\"><a href=\"#反射调用类中的方法\" class=\"headerlink\" title=\"反射调用类中的方法\"></a>反射调用类中的方法</h4><p>通过反射可以调用类中的各个方法，下面代码利用反射为<code>Person</code>对象的成员变量注入值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 得到类的Class对象</span></span><br><span class=\"line\">        Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"cn.glieen.pojo.Person\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过Class的对象得到Person类的实例，注意强制转型和异常处理</span></span><br><span class=\"line\">        Person person = (Person) clazz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 得到类中的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            String fieldName = field.getName();</span><br><span class=\"line\">            <span class=\"comment\">// 得到成员变量的setter方法</span></span><br><span class=\"line\">            Method method = clazz.getMethod(<span class=\"string\">\"set\"</span> + fieldName.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase() + fieldName.substring(<span class=\"number\">1</span>), field.getType());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.getGenericType().equals(String<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 反射调用setter方法</span></span><br><span class=\"line\">                method.invoke(person, <span class=\"string\">\"glieen\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.getGenericType().equals(<span class=\"keyword\">int</span><span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                method.invoke(person, <span class=\"number\">23</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p4i6xrj30f801va9x.jpg\" alt=\"image\"></p>\n<p>反射不仅可以调用普通方法，私有方法，构造函数也是可以调用的，需要注意的是调用私有方法之前应当使用<code>method.setAccessible(true)</code>改变方法可见性，否则调用时会抛出异常。</p>\n<h3 id=\"java-lang-reflect\"><a href=\"#java-lang-reflect\" class=\"headerlink\" title=\"java.lang.reflect\"></a>java.lang.reflect</h3><p><code>java.lang.reflect</code>包提供了用于获取类和对象的反射信息的类和接口。反射API允许对程序访问有关加载类的字段，方法和构造函数的信息进行编程访问。它允许在安全限制内使用反射的字段，方法和构造函数对其底层对等进行操作。 </p>\n<p><code>java.lang.reflect</code>包下有几个比较重要的类，<code>java.lang.reflect.Field</code>，<code>java.lang.reflect.Method</code>，<code>java.lang.reflect.Type</code>，<code>java.lang.reflect.Constructor</code>，在反射的使用中是经常会用到的，这里我就不过多阐述了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>反射作为Java最核心机制之一，已经被普遍使用于各大框架和项目之中，理解并掌握反射将会使得编写和阅读代码更加高效。</p>\n<p><em>运行环境</em></p>\n<p><em>JDK：1.8</em></p>\n<p><em>IDE：IntelliJ IDEA 2017.3.5</em></p>\n<p><em>如有错误，还请指正</em></p>\n","site":{"data":{}},"excerpt":"<p>在Java开发中，反射是一个经常用到的技术，几乎所有的框架都有使用反射机制，反射作为Java的一种高级特性，在实际生产中被大量应用，掌握它就显得尤为必要了。</p>","more":"<h3 id=\"什么是反射？\"><a href=\"#什么是反射？\" class=\"headerlink\" title=\"什么是反射？\"></a>什么是反射？</h3><p>反射机制是Java 语言的特性之一，所谓的反射就是Java语言在运行时拥有的一项自观的能力。在Java运行时环境中，对于任意一个类，可以知道这个类有哪些属性和方法；对于任意一个对象，可以调用它的任意一个方法。这种动态获取类的信息以及动态调用对象的方法的能力就是Java 语言的反射（Reflection）机制。 </p>\n<h3 id=\"万物皆对象\"><a href=\"#万物皆对象\" class=\"headerlink\" title=\"万物皆对象\"></a>万物皆对象</h3><p>Java是面向对象的高级语言，在面向对象的世界里，万事万物皆是对象，那么类是不是对象呢？是的，我们写的每一个类都是<code>Class</code>类的对象。每一个类有自己的对象，同时也是<code>Class</code>类的对象，想要了解反射，就必须先了解<code>Class</code>这个类。</p>\n<h4 id=\"java-lang-Class\"><a href=\"#java-lang-Class\" class=\"headerlink\" title=\"java.lang.Class\"></a>java.lang.Class</h4><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Private constructor. Only the Java Virtual Machine creates Class objects.</span></span><br><span class=\"line\"><span class=\"comment\">    * This constructor is not used and prevents the default constructor being</span></span><br><span class=\"line\"><span class=\"comment\">    * generated.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Class</span><span class=\"params\">(ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">       classLoader = loader;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据注释可知，<code>Class</code>类的构造方法是私有的，只有 Java 虚拟机可以创建该类的对象，因此我们无法在代码中显式地声明一个 <code>Class</code>对象。</p>\n<h4 id=\"获取Class类的对象\"><a href=\"#获取Class类的对象\" class=\"headerlink\" title=\"获取Class类的对象\"></a>获取Class类的对象</h4><p>声明一个<code>Person</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//省略setter和getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面说过，<code>Class</code> 类的构造方法是私有的，只有 java 虚拟机可以调用该方法创建该类的对象。也就是说我们无法像定义普通类对象一样，通过 new 直接创建 <code>Class</code> 类的对象，那应该如何得到<code>Person</code>的类对象呢？有以下几种方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        Class clazz;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 1、通过类的静态成员得到Person的类对象，每一个类都有一个隐含的静态成员class</span></span><br><span class=\"line\">        clazz = Person<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">        System.out.println(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2、通过Person类的实例得到它的Class对象</span></span><br><span class=\"line\">        clazz = person.getClass();</span><br><span class=\"line\">        System.out.println(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3、通过Class的静态方法forName(className)得到类对象，这里注意处理异常</span></span><br><span class=\"line\">        clazz = Class.forName(<span class=\"string\">\"cn.glieen.pojo.Person\"</span>);</span><br><span class=\"line\">        System.out.println(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从运行结果可以看到，我们都能得到<code>Person</code> 的<code>Class</code>对象。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5p44tt7j30dn02wjrb.jpg\" alt=\"image\"></p>\n<p>实际使用当中，最常用的是第三种方法，该方法可以实现类的动态加载，在使用时才加载该类。</p>\n<h3 id=\"反射的基本运用\"><a href=\"#反射的基本运用\" class=\"headerlink\" title=\"反射的基本运用\"></a>反射的基本运用</h3><h4 id=\"得到类的成员（constructor、field、method）\"><a href=\"#得到类的成员（constructor、field、method）\" class=\"headerlink\" title=\"得到类的成员（constructor、field、method）\"></a>得到类的成员（constructor、field、method）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 得到类的Class对象</span></span><br><span class=\"line\">        Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"cn.glieen.pojo.Person\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取类的构造方法</span></span><br><span class=\"line\">        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"constructor = \"</span> + constructor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取类的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"field = \"</span> + field);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取类的成员方法</span></span><br><span class=\"line\">        Method[] methods = clazz.getMethods();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"method = \"</span> + method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p49bsej30rv0bnt9o.jpg\" alt=\"image\"></p>\n<p>由运行结果我们可以看到，<code>Person</code>类的构造方法，成员变量和成员方法都获取到了，<strong>值得注意的是</strong>，<code>getConstructors()</code>、<code>getFields()</code>和<code>getMethods()</code>只能得到类中公有的成员属性，如果想得到私有的成员属性，需要调用<code>getDeclaredConstructors()</code>、<code>getDeclaredFields()</code>和<code>getDeclaredMethods()</code>方法。</p>\n<h4 id=\"得到类的实例\"><a href=\"#得到类的实例\" class=\"headerlink\" title=\"得到类的实例\"></a>得到类的实例</h4><p>通过<code>Class</code>类的<code>newInstance()</code>方法可以得到<code>Class</code>对象所指类的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过Class的对象得到Person类的实例，注意强制转型和异常处理</span></span><br><span class=\"line\">Person person = (Person) clazz.newInstance();</span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的是:</strong><code>clazz.newInstance()</code>会调用<code>Person</code>类的无参构造方法，当<code>Person</code>类不存在无参构造方法时，程序会抛出<code>InstantiationException</code>异常，所以当决定使用动态加载时，应当保留类中公有无参的构造器。</p>\n<h4 id=\"反射调用类中的方法\"><a href=\"#反射调用类中的方法\" class=\"headerlink\" title=\"反射调用类中的方法\"></a>反射调用类中的方法</h4><p>通过反射可以调用类中的各个方法，下面代码利用反射为<code>Person</code>对象的成员变量注入值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 得到类的Class对象</span></span><br><span class=\"line\">        Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"cn.glieen.pojo.Person\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过Class的对象得到Person类的实例，注意强制转型和异常处理</span></span><br><span class=\"line\">        Person person = (Person) clazz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 得到类中的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            String fieldName = field.getName();</span><br><span class=\"line\">            <span class=\"comment\">// 得到成员变量的setter方法</span></span><br><span class=\"line\">            Method method = clazz.getMethod(<span class=\"string\">\"set\"</span> + fieldName.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase() + fieldName.substring(<span class=\"number\">1</span>), field.getType());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.getGenericType().equals(String<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 反射调用setter方法</span></span><br><span class=\"line\">                method.invoke(person, <span class=\"string\">\"glieen\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.getGenericType().equals(<span class=\"keyword\">int</span><span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                method.invoke(person, <span class=\"number\">23</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5p4i6xrj30f801va9x.jpg\" alt=\"image\"></p>\n<p>反射不仅可以调用普通方法，私有方法，构造函数也是可以调用的，需要注意的是调用私有方法之前应当使用<code>method.setAccessible(true)</code>改变方法可见性，否则调用时会抛出异常。</p>\n<h3 id=\"java-lang-reflect\"><a href=\"#java-lang-reflect\" class=\"headerlink\" title=\"java.lang.reflect\"></a>java.lang.reflect</h3><p><code>java.lang.reflect</code>包提供了用于获取类和对象的反射信息的类和接口。反射API允许对程序访问有关加载类的字段，方法和构造函数的信息进行编程访问。它允许在安全限制内使用反射的字段，方法和构造函数对其底层对等进行操作。 </p>\n<p><code>java.lang.reflect</code>包下有几个比较重要的类，<code>java.lang.reflect.Field</code>，<code>java.lang.reflect.Method</code>，<code>java.lang.reflect.Type</code>，<code>java.lang.reflect.Constructor</code>，在反射的使用中是经常会用到的，这里我就不过多阐述了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>反射作为Java最核心机制之一，已经被普遍使用于各大框架和项目之中，理解并掌握反射将会使得编写和阅读代码更加高效。</p>\n<p><em>运行环境</em></p>\n<p><em>JDK：1.8</em></p>\n<p><em>IDE：IntelliJ IDEA 2017.3.5</em></p>\n<p><em>如有错误，还请指正</em></p>"},{"title":"Linux的修炼之路：（一）发行版的选择-Ubuntu","comments":1,"date":"2019-04-22T15:31:13.000Z","_content":"从安装到使用Ubuntu已经有一段时间了，期间遇到了很多的坑，得益于前人的贡献，大多数的问题我都在互联网上找到了相应的解决方式，在此先感谢各位前辈了，让我有了一些收获。现在我将我的折腾过程记录下来，方便以后再遇到同样问题的时候查找方便，也为了分享出来，帮助更多的人。\n\n<!--more-->\n\n### 折腾的开始\n\n之前在Windows10中装了个Vmware，跑了个Ubuntu在上面，但是在虚拟机中使用总觉得很不爽，于是痛下决心，准备分一块空间出来装个双系统，平时工作开发的时候就用Linux，回家娱乐就用Windows，单系统是不可能单系统的，毕竟要打游戏的嘛。\n\n### 系统的选择\n\n深知从Windows切换到Linux就是开启了无尽的折腾模式，同时又被各位大佬的各种Linux下华丽的桌面及各种强大的工具所吸引，我选择了入坑，但是为了让折腾起来不这么抓狂这么累，我还是在知乎上了解了很多关于各种Linux发行版的区别，操作及折腾的难度，主要包括各大主流发行版的桌面版，如：Ubuntu、Deepin、CentOS、Manjaro等，还有各种桌面环境，如：Unity、Xfce、KDE、Gnome等。\n\n我犯了很多初学者同样的错误，在各个发行版中挣扎，想通过对比选出最好最优秀的系统，所以期间我下载了各大发行版，反复的刻镜像反复的装系统，乐此不疲，但始终觉得这并不是我想要的，或者因为某个坑无法解决而放弃。其实这种思维完全是错误的，没有最好的发行版，只有最适合自己的，我想要的不过是稳定，遇到问题能在网上找到答案。所以我最后选择了使用者最多也是桌面发行版最流行的Ubuntu系统，因为我相信我会遇到的坑已经有人帮我填平了，哈哈。附上我装过的各大发行版：\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2ly1g2buuotudhj30mj060t8w.jpg)\n\n### Ubuntu\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2ly1g2bvixwadxj31hc0u0b29.jpg)\n\n目前使用的是Ubuntu18.04桌面版，这是在我美化之后的效果，个人还是非常喜欢的。","source":"_posts/Linux的修炼之路：（一）发行版的选择-Ubuntu.md","raw":"---\ntitle: Linux的修炼之路：（一）发行版的选择-Ubuntu\ntags: [Linux,Ubuntu]\ncomments: true\ndate: 2019-04-22 23:31:13\ncategories: Linux\n---\n从安装到使用Ubuntu已经有一段时间了，期间遇到了很多的坑，得益于前人的贡献，大多数的问题我都在互联网上找到了相应的解决方式，在此先感谢各位前辈了，让我有了一些收获。现在我将我的折腾过程记录下来，方便以后再遇到同样问题的时候查找方便，也为了分享出来，帮助更多的人。\n\n<!--more-->\n\n### 折腾的开始\n\n之前在Windows10中装了个Vmware，跑了个Ubuntu在上面，但是在虚拟机中使用总觉得很不爽，于是痛下决心，准备分一块空间出来装个双系统，平时工作开发的时候就用Linux，回家娱乐就用Windows，单系统是不可能单系统的，毕竟要打游戏的嘛。\n\n### 系统的选择\n\n深知从Windows切换到Linux就是开启了无尽的折腾模式，同时又被各位大佬的各种Linux下华丽的桌面及各种强大的工具所吸引，我选择了入坑，但是为了让折腾起来不这么抓狂这么累，我还是在知乎上了解了很多关于各种Linux发行版的区别，操作及折腾的难度，主要包括各大主流发行版的桌面版，如：Ubuntu、Deepin、CentOS、Manjaro等，还有各种桌面环境，如：Unity、Xfce、KDE、Gnome等。\n\n我犯了很多初学者同样的错误，在各个发行版中挣扎，想通过对比选出最好最优秀的系统，所以期间我下载了各大发行版，反复的刻镜像反复的装系统，乐此不疲，但始终觉得这并不是我想要的，或者因为某个坑无法解决而放弃。其实这种思维完全是错误的，没有最好的发行版，只有最适合自己的，我想要的不过是稳定，遇到问题能在网上找到答案。所以我最后选择了使用者最多也是桌面发行版最流行的Ubuntu系统，因为我相信我会遇到的坑已经有人帮我填平了，哈哈。附上我装过的各大发行版：\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2ly1g2buuotudhj30mj060t8w.jpg)\n\n### Ubuntu\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2ly1g2bvixwadxj31hc0u0b29.jpg)\n\n目前使用的是Ubuntu18.04桌面版，这是在我美化之后的效果，个人还是非常喜欢的。","slug":"Linux的修炼之路：（一）发行版的选择-Ubuntu","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kc000cw2pmg6aodhtr","content":"<p>从安装到使用Ubuntu已经有一段时间了，期间遇到了很多的坑，得益于前人的贡献，大多数的问题我都在互联网上找到了相应的解决方式，在此先感谢各位前辈了，让我有了一些收获。现在我将我的折腾过程记录下来，方便以后再遇到同样问题的时候查找方便，也为了分享出来，帮助更多的人。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"折腾的开始\"><a href=\"#折腾的开始\" class=\"headerlink\" title=\"折腾的开始\"></a>折腾的开始</h3><p>之前在Windows10中装了个Vmware，跑了个Ubuntu在上面，但是在虚拟机中使用总觉得很不爽，于是痛下决心，准备分一块空间出来装个双系统，平时工作开发的时候就用Linux，回家娱乐就用Windows，单系统是不可能单系统的，毕竟要打游戏的嘛。</p>\n<h3 id=\"系统的选择\"><a href=\"#系统的选择\" class=\"headerlink\" title=\"系统的选择\"></a>系统的选择</h3><p>深知从Windows切换到Linux就是开启了无尽的折腾模式，同时又被各位大佬的各种Linux下华丽的桌面及各种强大的工具所吸引，我选择了入坑，但是为了让折腾起来不这么抓狂这么累，我还是在知乎上了解了很多关于各种Linux发行版的区别，操作及折腾的难度，主要包括各大主流发行版的桌面版，如：Ubuntu、Deepin、CentOS、Manjaro等，还有各种桌面环境，如：Unity、Xfce、KDE、Gnome等。</p>\n<p>我犯了很多初学者同样的错误，在各个发行版中挣扎，想通过对比选出最好最优秀的系统，所以期间我下载了各大发行版，反复的刻镜像反复的装系统，乐此不疲，但始终觉得这并不是我想要的，或者因为某个坑无法解决而放弃。其实这种思维完全是错误的，没有最好的发行版，只有最适合自己的，我想要的不过是稳定，遇到问题能在网上找到答案。所以我最后选择了使用者最多也是桌面发行版最流行的Ubuntu系统，因为我相信我会遇到的坑已经有人帮我填平了，哈哈。附上我装过的各大发行版：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2ly1g2buuotudhj30mj060t8w.jpg\" alt=\"image\"></p>\n<h3 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h3><p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2ly1g2bvixwadxj31hc0u0b29.jpg\" alt=\"image\"></p>\n<p>目前使用的是Ubuntu18.04桌面版，这是在我美化之后的效果，个人还是非常喜欢的。</p>\n","site":{"data":{}},"excerpt":"<p>从安装到使用Ubuntu已经有一段时间了，期间遇到了很多的坑，得益于前人的贡献，大多数的问题我都在互联网上找到了相应的解决方式，在此先感谢各位前辈了，让我有了一些收获。现在我将我的折腾过程记录下来，方便以后再遇到同样问题的时候查找方便，也为了分享出来，帮助更多的人。</p>","more":"<h3 id=\"折腾的开始\"><a href=\"#折腾的开始\" class=\"headerlink\" title=\"折腾的开始\"></a>折腾的开始</h3><p>之前在Windows10中装了个Vmware，跑了个Ubuntu在上面，但是在虚拟机中使用总觉得很不爽，于是痛下决心，准备分一块空间出来装个双系统，平时工作开发的时候就用Linux，回家娱乐就用Windows，单系统是不可能单系统的，毕竟要打游戏的嘛。</p>\n<h3 id=\"系统的选择\"><a href=\"#系统的选择\" class=\"headerlink\" title=\"系统的选择\"></a>系统的选择</h3><p>深知从Windows切换到Linux就是开启了无尽的折腾模式，同时又被各位大佬的各种Linux下华丽的桌面及各种强大的工具所吸引，我选择了入坑，但是为了让折腾起来不这么抓狂这么累，我还是在知乎上了解了很多关于各种Linux发行版的区别，操作及折腾的难度，主要包括各大主流发行版的桌面版，如：Ubuntu、Deepin、CentOS、Manjaro等，还有各种桌面环境，如：Unity、Xfce、KDE、Gnome等。</p>\n<p>我犯了很多初学者同样的错误，在各个发行版中挣扎，想通过对比选出最好最优秀的系统，所以期间我下载了各大发行版，反复的刻镜像反复的装系统，乐此不疲，但始终觉得这并不是我想要的，或者因为某个坑无法解决而放弃。其实这种思维完全是错误的，没有最好的发行版，只有最适合自己的，我想要的不过是稳定，遇到问题能在网上找到答案。所以我最后选择了使用者最多也是桌面发行版最流行的Ubuntu系统，因为我相信我会遇到的坑已经有人帮我填平了，哈哈。附上我装过的各大发行版：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2ly1g2buuotudhj30mj060t8w.jpg\" alt=\"image\"></p>\n<h3 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h3><p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2ly1g2bvixwadxj31hc0u0b29.jpg\" alt=\"image\"></p>\n<p>目前使用的是Ubuntu18.04桌面版，这是在我美化之后的效果，个人还是非常喜欢的。</p>"},{"title":"Linux的修炼之路：（二）Ubuntu的安装","comments":1,"date":"2019-10-09T15:31:13.000Z","_content":"发行版已经确定，接下来就是系统的安装工作，因为是准备安装Windows和Ubuntu双系统，所以很多操作可以先在Windows下完成，比如修改分区，制作启动盘等。\n\n<!--more-->\n\n### 制作启动盘\n\n1. 下载系统镜像\n\n   打开Ubuntu官网下载地址：[Download Ubuntu Desktop](https://ubuntu.com/download/desktop)，下载最新的桌面发行版镜像文件；\n\n2. 下载启动盘制作软件\n\n   打开Rufus官网：[Rufus](https://rufus.ie/)，下载最新版本的软件；\n\n3. 制作启动盘\n\n\n   准备一个容量大于4G的U盘，插入电脑，打开Rufus，在设备处会显示插入的U盘，然后点击选择，打开下载的Ubuntu镜像文件，分区类型建议设置为GPT，其他设置默认，然后单击开始，弹窗选择写入模式，默认即可，提示**会清除U盘所有数据，如有重要数据请先备份**，进度条跑完即制作完成。\n\n   ![image](https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3f62rejj30bk0e7aat.jpg)\n\n### 准备分区\n\n在Windows10下右键开始，选择磁盘管理，打开磁盘管理工具。\n\n![image](https://tvax4.sinaimg.cn/large/005tkHc2ly1g7t3nlitndj30pm0kqwg8.jpg)\n\n这里我准备将F盘分50G出来用作安装Ubuntu，右键想分区的盘，选择压缩卷，输入分割的大小（注意单位是MB），点击压缩即可，即会多出一个大小为50G的未分配区块。\n\n![image](https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3qfsx3sj30pm0kqdi3.jpg)\n\n![1570689962547](https://tva3.sinaimg.cn/large/005tkHc2ly1g7tjadaaeaj30pj037dft.jpg)\n\n### 通过启动盘启动\n\n把制作好的启动盘插入电脑，进入电脑的BIOS系统修改电脑的启动顺序，将启动盘设置成第一启动，以我的电脑（暗影精灵4）为例，开机按F9即可切换启动扇区，不同的品牌的电脑有不同的设置方法，详情可以通过搜索引擎查询自己的电脑型号查看具体的设置操作。\n\n![C611F6C7181A1293C66AA4063BCEC07A](https://tvax3.sinaimg.cn/large/005tkHc2ly1g7thvll1xaj33402c0b2a.jpg)\n\n启动成功之后会有四个选项，第一个选项是试用Ubuntu，第二个选项是安装Ubuntu，剩下两个不用关注。\n\n![6566FC454645D20D48AE8F0848C83FD0](https://tva4.sinaimg.cn/large/005tkHc2ly1g7thwlk63pj32c0340kjm.jpg)\n\n这里我选择第一个试用Ubuntu，为了方便截图，当然直接安装也是可以的，稍等片刻后即进入Ubuntu的试用界面。\n\n![Screenshot from 2019-10-10 19-57-13](https://tva4.sinaimg.cn/large/005tkHc2ly1g7ti08ttjzj31hc0u0tk9.jpg)\n\n进入Ubuntu的试用桌面基本表示启动盘引导启动成功了。\n\n### 安装Ubuntu\n\n1. 双击桌面上的`Install Ubuntu 18.04.3 LTS`图标就可以开始安装系统；\n\n2. 选择语言，中文（简体），或者自己想要的语言；\n\n   ![Screenshot from 2019-10-10 20-03-17](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7ti42uwgzj30qu0ftjrw.jpg)\n\n3. 选择键盘布局，默认就可以了；\n\n   ![Screenshot from 2019-10-10 20-03-35](https://tva1.sinaimg.cn/large/005tkHc2ly1g7ti671nelj30o90h3q43.jpg)\n\n4. 设置网络连接，这里不建议在安装的时候连接网络，如果网速慢的话将会影响安装速度，如果是有线网络的话建议先把网线拔掉；\n\n   ![Screenshot from 2019-10-10 20-03-41](https://tva2.sinaimg.cn/large/005tkHc2ly1g7ti77xduoj30o90h375t.jpg)\n\n5. 选择安装的内容，使用最小安装就好了，没必要装那些多余的软件，以后需要用到再去安装；\n\n   ![Screenshot from 2019-10-10 20-03-48](https://tva2.sinaimg.cn/large/005tkHc2ly1g7tia3pqf8j30o90h3dhg.jpg)\n\n6. 选择安装方式，因为电脑已经安装了Windows10系统，如果要图简单的话，选择第一项，与Windows共存就好了，我喜欢自己调整分区，所以我使用的其他选项，**千万不要选择清除整个磁盘并安装Ubuntu**，那样会丢失所有硬盘里的数据；\n\n   ![Screenshot from 2019-10-10 20-04-27](https://tva1.sinaimg.cn/large/005tkHc2ly1g7ticc8k6qj30o90h376n.jpg)\n\n7. 硬盘的分区结构和大小预览，可以看到有一个大小50G左右空闲分区，这是在Windows下面预留出来的，这里我将它扩展成两个分区，一个4G大小的交换分区，用于Ubuntu系统休眠使用，剩下的分为一个EXT4主分区，挂在到`/`根目录下，关于分区，实在没有必要过于纠结挂载点，建议都挂载到根目录，**千万不要去修改其他非空闲的分区，格式化分区会丢失数据**，分区完成点击现在安装；\n\n   ![Screenshot from 2019-10-10 20-04-35](https://tva1.sinaimg.cn/large/005tkHc2ly1g7tif394w6j30nu0neace.jpg)\n   *分区方式：单击选择要修改的分区，点击左下角的“+”，然后设置分区大小和分区格式，点击确定即可。*\n   ![Screenshot from 2019-10-10 20-06-58](https://tvax2.sinaimg.cn/large/005tkHc2ly1g7timqck0bj30hw07mwfn.jpg)\n   \n8. 选择时区，中国的话默认选择上海就可以了；\n\n   ![Screenshot from 2019-10-10 20-07-06](https://tva1.sinaimg.cn/large/005tkHc2ly1g7tiptajwrj30nu0ne79u.jpg)\n\n9. 设置电脑信息和用户信息，自行设置；\n\n   ![Screenshot from 2019-10-11 04-07-31](https://tvax2.sinaimg.cn/large/005tkHc2ly1g7tiqiqdumj30nu0nedh1.jpg)\n\n10. 开始安装系统，等待几分钟即可安装成功；\n\n    ![Screenshot from 2019-10-11 04-07-42](https://tva2.sinaimg.cn/large/005tkHc2ly1g7tirgiob5j30kw0ftn1f.jpg)\n\n11. 安装成功，重启电脑；\n\n    ![Screenshot from 2019-10-11 04-14-17](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tit5wdf5j30m004bdge.jpg)\n\n12. 重启电脑时将U盘拔下，通常重启电脑之后，BIOS会默认启动Ubuntu的引导界面，如果没有启动到Ubuntu的引导界面，可以自行更改BIOS的启动设置，将Ubuntu设置成第一引导选项。引导界面有四个选项，第一个是正常启动Ubuntu系统，第二个是高级启动，第三个是启动Windows系统，第四个是进入电脑的BIOS设置。界面有10秒倒计时，如果没有更改启动选项则默认启动第一个，通过上下方向键可以更改启动选项，按回车键确定，通常默认启动第一个（正常启动Ubuntu）即可；\n\n    ![9680080688BD30783DBB457347BDC21F](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tiueoiioj32c03407wi.jpg)\n\n13. 稍等片刻就进入Ubuntu登录界面，选择安装系统时创建的用户，输入密码即可进入系统；\n\n    ![A0F892F96AE3577616886671227AFAE1](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj0g1qnlj32c03401ky.jpg)\n\n14. 进入Ubuntu桌面，系统安装成功！\n\n    ![2019-10-11 12-18-03 的屏幕截图](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj2d7xb2j31hc0u07gh.jpg)\n\n### 总结\n\n相对来说，Ubuntu桌面版的安装还是非常简单的，全程都是基于可视化操作，非常便捷，稍微仔细点，配合搜索引擎应该都可以安装成功。","source":"_posts/Linux的修炼之路：（二）Ubuntu的安装.md","raw":"---\ntitle: Linux的修炼之路：（二）Ubuntu的安装\ntags: [Linux,Ubuntu]\ncomments: true\ndate: 2019-10-09 23:31:13\ncategories: Linux\n---\n发行版已经确定，接下来就是系统的安装工作，因为是准备安装Windows和Ubuntu双系统，所以很多操作可以先在Windows下完成，比如修改分区，制作启动盘等。\n\n<!--more-->\n\n### 制作启动盘\n\n1. 下载系统镜像\n\n   打开Ubuntu官网下载地址：[Download Ubuntu Desktop](https://ubuntu.com/download/desktop)，下载最新的桌面发行版镜像文件；\n\n2. 下载启动盘制作软件\n\n   打开Rufus官网：[Rufus](https://rufus.ie/)，下载最新版本的软件；\n\n3. 制作启动盘\n\n\n   准备一个容量大于4G的U盘，插入电脑，打开Rufus，在设备处会显示插入的U盘，然后点击选择，打开下载的Ubuntu镜像文件，分区类型建议设置为GPT，其他设置默认，然后单击开始，弹窗选择写入模式，默认即可，提示**会清除U盘所有数据，如有重要数据请先备份**，进度条跑完即制作完成。\n\n   ![image](https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3f62rejj30bk0e7aat.jpg)\n\n### 准备分区\n\n在Windows10下右键开始，选择磁盘管理，打开磁盘管理工具。\n\n![image](https://tvax4.sinaimg.cn/large/005tkHc2ly1g7t3nlitndj30pm0kqwg8.jpg)\n\n这里我准备将F盘分50G出来用作安装Ubuntu，右键想分区的盘，选择压缩卷，输入分割的大小（注意单位是MB），点击压缩即可，即会多出一个大小为50G的未分配区块。\n\n![image](https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3qfsx3sj30pm0kqdi3.jpg)\n\n![1570689962547](https://tva3.sinaimg.cn/large/005tkHc2ly1g7tjadaaeaj30pj037dft.jpg)\n\n### 通过启动盘启动\n\n把制作好的启动盘插入电脑，进入电脑的BIOS系统修改电脑的启动顺序，将启动盘设置成第一启动，以我的电脑（暗影精灵4）为例，开机按F9即可切换启动扇区，不同的品牌的电脑有不同的设置方法，详情可以通过搜索引擎查询自己的电脑型号查看具体的设置操作。\n\n![C611F6C7181A1293C66AA4063BCEC07A](https://tvax3.sinaimg.cn/large/005tkHc2ly1g7thvll1xaj33402c0b2a.jpg)\n\n启动成功之后会有四个选项，第一个选项是试用Ubuntu，第二个选项是安装Ubuntu，剩下两个不用关注。\n\n![6566FC454645D20D48AE8F0848C83FD0](https://tva4.sinaimg.cn/large/005tkHc2ly1g7thwlk63pj32c0340kjm.jpg)\n\n这里我选择第一个试用Ubuntu，为了方便截图，当然直接安装也是可以的，稍等片刻后即进入Ubuntu的试用界面。\n\n![Screenshot from 2019-10-10 19-57-13](https://tva4.sinaimg.cn/large/005tkHc2ly1g7ti08ttjzj31hc0u0tk9.jpg)\n\n进入Ubuntu的试用桌面基本表示启动盘引导启动成功了。\n\n### 安装Ubuntu\n\n1. 双击桌面上的`Install Ubuntu 18.04.3 LTS`图标就可以开始安装系统；\n\n2. 选择语言，中文（简体），或者自己想要的语言；\n\n   ![Screenshot from 2019-10-10 20-03-17](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7ti42uwgzj30qu0ftjrw.jpg)\n\n3. 选择键盘布局，默认就可以了；\n\n   ![Screenshot from 2019-10-10 20-03-35](https://tva1.sinaimg.cn/large/005tkHc2ly1g7ti671nelj30o90h3q43.jpg)\n\n4. 设置网络连接，这里不建议在安装的时候连接网络，如果网速慢的话将会影响安装速度，如果是有线网络的话建议先把网线拔掉；\n\n   ![Screenshot from 2019-10-10 20-03-41](https://tva2.sinaimg.cn/large/005tkHc2ly1g7ti77xduoj30o90h375t.jpg)\n\n5. 选择安装的内容，使用最小安装就好了，没必要装那些多余的软件，以后需要用到再去安装；\n\n   ![Screenshot from 2019-10-10 20-03-48](https://tva2.sinaimg.cn/large/005tkHc2ly1g7tia3pqf8j30o90h3dhg.jpg)\n\n6. 选择安装方式，因为电脑已经安装了Windows10系统，如果要图简单的话，选择第一项，与Windows共存就好了，我喜欢自己调整分区，所以我使用的其他选项，**千万不要选择清除整个磁盘并安装Ubuntu**，那样会丢失所有硬盘里的数据；\n\n   ![Screenshot from 2019-10-10 20-04-27](https://tva1.sinaimg.cn/large/005tkHc2ly1g7ticc8k6qj30o90h376n.jpg)\n\n7. 硬盘的分区结构和大小预览，可以看到有一个大小50G左右空闲分区，这是在Windows下面预留出来的，这里我将它扩展成两个分区，一个4G大小的交换分区，用于Ubuntu系统休眠使用，剩下的分为一个EXT4主分区，挂在到`/`根目录下，关于分区，实在没有必要过于纠结挂载点，建议都挂载到根目录，**千万不要去修改其他非空闲的分区，格式化分区会丢失数据**，分区完成点击现在安装；\n\n   ![Screenshot from 2019-10-10 20-04-35](https://tva1.sinaimg.cn/large/005tkHc2ly1g7tif394w6j30nu0neace.jpg)\n   *分区方式：单击选择要修改的分区，点击左下角的“+”，然后设置分区大小和分区格式，点击确定即可。*\n   ![Screenshot from 2019-10-10 20-06-58](https://tvax2.sinaimg.cn/large/005tkHc2ly1g7timqck0bj30hw07mwfn.jpg)\n   \n8. 选择时区，中国的话默认选择上海就可以了；\n\n   ![Screenshot from 2019-10-10 20-07-06](https://tva1.sinaimg.cn/large/005tkHc2ly1g7tiptajwrj30nu0ne79u.jpg)\n\n9. 设置电脑信息和用户信息，自行设置；\n\n   ![Screenshot from 2019-10-11 04-07-31](https://tvax2.sinaimg.cn/large/005tkHc2ly1g7tiqiqdumj30nu0nedh1.jpg)\n\n10. 开始安装系统，等待几分钟即可安装成功；\n\n    ![Screenshot from 2019-10-11 04-07-42](https://tva2.sinaimg.cn/large/005tkHc2ly1g7tirgiob5j30kw0ftn1f.jpg)\n\n11. 安装成功，重启电脑；\n\n    ![Screenshot from 2019-10-11 04-14-17](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tit5wdf5j30m004bdge.jpg)\n\n12. 重启电脑时将U盘拔下，通常重启电脑之后，BIOS会默认启动Ubuntu的引导界面，如果没有启动到Ubuntu的引导界面，可以自行更改BIOS的启动设置，将Ubuntu设置成第一引导选项。引导界面有四个选项，第一个是正常启动Ubuntu系统，第二个是高级启动，第三个是启动Windows系统，第四个是进入电脑的BIOS设置。界面有10秒倒计时，如果没有更改启动选项则默认启动第一个，通过上下方向键可以更改启动选项，按回车键确定，通常默认启动第一个（正常启动Ubuntu）即可；\n\n    ![9680080688BD30783DBB457347BDC21F](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tiueoiioj32c03407wi.jpg)\n\n13. 稍等片刻就进入Ubuntu登录界面，选择安装系统时创建的用户，输入密码即可进入系统；\n\n    ![A0F892F96AE3577616886671227AFAE1](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj0g1qnlj32c03401ky.jpg)\n\n14. 进入Ubuntu桌面，系统安装成功！\n\n    ![2019-10-11 12-18-03 的屏幕截图](https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj2d7xb2j31hc0u07gh.jpg)\n\n### 总结\n\n相对来说，Ubuntu桌面版的安装还是非常简单的，全程都是基于可视化操作，非常便捷，稍微仔细点，配合搜索引擎应该都可以安装成功。","slug":"Linux的修炼之路：（二）Ubuntu的安装","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kd000dw2pm0yitep4o","content":"<p>发行版已经确定，接下来就是系统的安装工作，因为是准备安装Windows和Ubuntu双系统，所以很多操作可以先在Windows下完成，比如修改分区，制作启动盘等。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h3><ol>\n<li><p>下载系统镜像</p>\n<p>打开Ubuntu官网下载地址：<a href=\"https://ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">Download Ubuntu Desktop</a>，下载最新的桌面发行版镜像文件；</p>\n</li>\n<li><p>下载启动盘制作软件</p>\n<p>打开Rufus官网：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">Rufus</a>，下载最新版本的软件；</p>\n</li>\n<li><p>制作启动盘</p>\n</li>\n</ol>\n<p>   准备一个容量大于4G的U盘，插入电脑，打开Rufus，在设备处会显示插入的U盘，然后点击选择，打开下载的Ubuntu镜像文件，分区类型建议设置为GPT，其他设置默认，然后单击开始，弹窗选择写入模式，默认即可，提示<strong>会清除U盘所有数据，如有重要数据请先备份</strong>，进度条跑完即制作完成。</p>\n<p>   <img src=\"https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3f62rejj30bk0e7aat.jpg\" alt=\"image\"></p>\n<h3 id=\"准备分区\"><a href=\"#准备分区\" class=\"headerlink\" title=\"准备分区\"></a>准备分区</h3><p>在Windows10下右键开始，选择磁盘管理，打开磁盘管理工具。</p>\n<p><img src=\"https://tvax4.sinaimg.cn/large/005tkHc2ly1g7t3nlitndj30pm0kqwg8.jpg\" alt=\"image\"></p>\n<p>这里我准备将F盘分50G出来用作安装Ubuntu，右键想分区的盘，选择压缩卷，输入分割的大小（注意单位是MB），点击压缩即可，即会多出一个大小为50G的未分配区块。</p>\n<p><img src=\"https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3qfsx3sj30pm0kqdi3.jpg\" alt=\"image\"></p>\n<p><img src=\"https://tva3.sinaimg.cn/large/005tkHc2ly1g7tjadaaeaj30pj037dft.jpg\" alt=\"1570689962547\"></p>\n<h3 id=\"通过启动盘启动\"><a href=\"#通过启动盘启动\" class=\"headerlink\" title=\"通过启动盘启动\"></a>通过启动盘启动</h3><p>把制作好的启动盘插入电脑，进入电脑的BIOS系统修改电脑的启动顺序，将启动盘设置成第一启动，以我的电脑（暗影精灵4）为例，开机按F9即可切换启动扇区，不同的品牌的电脑有不同的设置方法，详情可以通过搜索引擎查询自己的电脑型号查看具体的设置操作。</p>\n<p><img src=\"https://tvax3.sinaimg.cn/large/005tkHc2ly1g7thvll1xaj33402c0b2a.jpg\" alt=\"C611F6C7181A1293C66AA4063BCEC07A\"></p>\n<p>启动成功之后会有四个选项，第一个选项是试用Ubuntu，第二个选项是安装Ubuntu，剩下两个不用关注。</p>\n<p><img src=\"https://tva4.sinaimg.cn/large/005tkHc2ly1g7thwlk63pj32c0340kjm.jpg\" alt=\"6566FC454645D20D48AE8F0848C83FD0\"></p>\n<p>这里我选择第一个试用Ubuntu，为了方便截图，当然直接安装也是可以的，稍等片刻后即进入Ubuntu的试用界面。</p>\n<p><img src=\"https://tva4.sinaimg.cn/large/005tkHc2ly1g7ti08ttjzj31hc0u0tk9.jpg\" alt=\"Screenshot from 2019-10-10 19-57-13\"></p>\n<p>进入Ubuntu的试用桌面基本表示启动盘引导启动成功了。</p>\n<h3 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h3><ol>\n<li><p>双击桌面上的<code>Install Ubuntu 18.04.3 LTS</code>图标就可以开始安装系统；</p>\n</li>\n<li><p>选择语言，中文（简体），或者自己想要的语言；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7ti42uwgzj30qu0ftjrw.jpg\" alt=\"Screenshot from 2019-10-10 20-03-17\"></p>\n</li>\n<li><p>选择键盘布局，默认就可以了；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7ti671nelj30o90h3q43.jpg\" alt=\"Screenshot from 2019-10-10 20-03-35\"></p>\n</li>\n<li><p>设置网络连接，这里不建议在安装的时候连接网络，如果网速慢的话将会影响安装速度，如果是有线网络的话建议先把网线拔掉；</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/005tkHc2ly1g7ti77xduoj30o90h375t.jpg\" alt=\"Screenshot from 2019-10-10 20-03-41\"></p>\n</li>\n<li><p>选择安装的内容，使用最小安装就好了，没必要装那些多余的软件，以后需要用到再去安装；</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/005tkHc2ly1g7tia3pqf8j30o90h3dhg.jpg\" alt=\"Screenshot from 2019-10-10 20-03-48\"></p>\n</li>\n<li><p>选择安装方式，因为电脑已经安装了Windows10系统，如果要图简单的话，选择第一项，与Windows共存就好了，我喜欢自己调整分区，所以我使用的其他选项，<strong>千万不要选择清除整个磁盘并安装Ubuntu</strong>，那样会丢失所有硬盘里的数据；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7ticc8k6qj30o90h376n.jpg\" alt=\"Screenshot from 2019-10-10 20-04-27\"></p>\n</li>\n<li><p>硬盘的分区结构和大小预览，可以看到有一个大小50G左右空闲分区，这是在Windows下面预留出来的，这里我将它扩展成两个分区，一个4G大小的交换分区，用于Ubuntu系统休眠使用，剩下的分为一个EXT4主分区，挂在到<code>/</code>根目录下，关于分区，实在没有必要过于纠结挂载点，建议都挂载到根目录，<strong>千万不要去修改其他非空闲的分区，格式化分区会丢失数据</strong>，分区完成点击现在安装；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7tif394w6j30nu0neace.jpg\" alt=\"Screenshot from 2019-10-10 20-04-35\"><br><em>分区方式：单击选择要修改的分区，点击左下角的“+”，然后设置分区大小和分区格式，点击确定即可。</em><br><img src=\"https://tvax2.sinaimg.cn/large/005tkHc2ly1g7timqck0bj30hw07mwfn.jpg\" alt=\"Screenshot from 2019-10-10 20-06-58\"></p>\n</li>\n<li><p>选择时区，中国的话默认选择上海就可以了；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7tiptajwrj30nu0ne79u.jpg\" alt=\"Screenshot from 2019-10-10 20-07-06\"></p>\n</li>\n<li><p>设置电脑信息和用户信息，自行设置；</p>\n<p><img src=\"https://tvax2.sinaimg.cn/large/005tkHc2ly1g7tiqiqdumj30nu0nedh1.jpg\" alt=\"Screenshot from 2019-10-11 04-07-31\"></p>\n</li>\n<li><p>开始安装系统，等待几分钟即可安装成功；</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/005tkHc2ly1g7tirgiob5j30kw0ftn1f.jpg\" alt=\"Screenshot from 2019-10-11 04-07-42\"></p>\n</li>\n<li><p>安装成功，重启电脑；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tit5wdf5j30m004bdge.jpg\" alt=\"Screenshot from 2019-10-11 04-14-17\"></p>\n</li>\n<li><p>重启电脑时将U盘拔下，通常重启电脑之后，BIOS会默认启动Ubuntu的引导界面，如果没有启动到Ubuntu的引导界面，可以自行更改BIOS的启动设置，将Ubuntu设置成第一引导选项。引导界面有四个选项，第一个是正常启动Ubuntu系统，第二个是高级启动，第三个是启动Windows系统，第四个是进入电脑的BIOS设置。界面有10秒倒计时，如果没有更改启动选项则默认启动第一个，通过上下方向键可以更改启动选项，按回车键确定，通常默认启动第一个（正常启动Ubuntu）即可；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tiueoiioj32c03407wi.jpg\" alt=\"9680080688BD30783DBB457347BDC21F\"></p>\n</li>\n<li><p>稍等片刻就进入Ubuntu登录界面，选择安装系统时创建的用户，输入密码即可进入系统；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj0g1qnlj32c03401ky.jpg\" alt=\"A0F892F96AE3577616886671227AFAE1\"></p>\n</li>\n<li><p>进入Ubuntu桌面，系统安装成功！</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj2d7xb2j31hc0u07gh.jpg\" alt=\"2019-10-11 12-18-03 的屏幕截图\"></p>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>相对来说，Ubuntu桌面版的安装还是非常简单的，全程都是基于可视化操作，非常便捷，稍微仔细点，配合搜索引擎应该都可以安装成功。</p>\n","site":{"data":{}},"excerpt":"<p>发行版已经确定，接下来就是系统的安装工作，因为是准备安装Windows和Ubuntu双系统，所以很多操作可以先在Windows下完成，比如修改分区，制作启动盘等。</p>","more":"<h3 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h3><ol>\n<li><p>下载系统镜像</p>\n<p>打开Ubuntu官网下载地址：<a href=\"https://ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">Download Ubuntu Desktop</a>，下载最新的桌面发行版镜像文件；</p>\n</li>\n<li><p>下载启动盘制作软件</p>\n<p>打开Rufus官网：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">Rufus</a>，下载最新版本的软件；</p>\n</li>\n<li><p>制作启动盘</p>\n</li>\n</ol>\n<p>   准备一个容量大于4G的U盘，插入电脑，打开Rufus，在设备处会显示插入的U盘，然后点击选择，打开下载的Ubuntu镜像文件，分区类型建议设置为GPT，其他设置默认，然后单击开始，弹窗选择写入模式，默认即可，提示<strong>会清除U盘所有数据，如有重要数据请先备份</strong>，进度条跑完即制作完成。</p>\n<p>   <img src=\"https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3f62rejj30bk0e7aat.jpg\" alt=\"image\"></p>\n<h3 id=\"准备分区\"><a href=\"#准备分区\" class=\"headerlink\" title=\"准备分区\"></a>准备分区</h3><p>在Windows10下右键开始，选择磁盘管理，打开磁盘管理工具。</p>\n<p><img src=\"https://tvax4.sinaimg.cn/large/005tkHc2ly1g7t3nlitndj30pm0kqwg8.jpg\" alt=\"image\"></p>\n<p>这里我准备将F盘分50G出来用作安装Ubuntu，右键想分区的盘，选择压缩卷，输入分割的大小（注意单位是MB），点击压缩即可，即会多出一个大小为50G的未分配区块。</p>\n<p><img src=\"https://tva3.sinaimg.cn/large/005tkHc2ly1g7t3qfsx3sj30pm0kqdi3.jpg\" alt=\"image\"></p>\n<p><img src=\"https://tva3.sinaimg.cn/large/005tkHc2ly1g7tjadaaeaj30pj037dft.jpg\" alt=\"1570689962547\"></p>\n<h3 id=\"通过启动盘启动\"><a href=\"#通过启动盘启动\" class=\"headerlink\" title=\"通过启动盘启动\"></a>通过启动盘启动</h3><p>把制作好的启动盘插入电脑，进入电脑的BIOS系统修改电脑的启动顺序，将启动盘设置成第一启动，以我的电脑（暗影精灵4）为例，开机按F9即可切换启动扇区，不同的品牌的电脑有不同的设置方法，详情可以通过搜索引擎查询自己的电脑型号查看具体的设置操作。</p>\n<p><img src=\"https://tvax3.sinaimg.cn/large/005tkHc2ly1g7thvll1xaj33402c0b2a.jpg\" alt=\"C611F6C7181A1293C66AA4063BCEC07A\"></p>\n<p>启动成功之后会有四个选项，第一个选项是试用Ubuntu，第二个选项是安装Ubuntu，剩下两个不用关注。</p>\n<p><img src=\"https://tva4.sinaimg.cn/large/005tkHc2ly1g7thwlk63pj32c0340kjm.jpg\" alt=\"6566FC454645D20D48AE8F0848C83FD0\"></p>\n<p>这里我选择第一个试用Ubuntu，为了方便截图，当然直接安装也是可以的，稍等片刻后即进入Ubuntu的试用界面。</p>\n<p><img src=\"https://tva4.sinaimg.cn/large/005tkHc2ly1g7ti08ttjzj31hc0u0tk9.jpg\" alt=\"Screenshot from 2019-10-10 19-57-13\"></p>\n<p>进入Ubuntu的试用桌面基本表示启动盘引导启动成功了。</p>\n<h3 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h3><ol>\n<li><p>双击桌面上的<code>Install Ubuntu 18.04.3 LTS</code>图标就可以开始安装系统；</p>\n</li>\n<li><p>选择语言，中文（简体），或者自己想要的语言；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7ti42uwgzj30qu0ftjrw.jpg\" alt=\"Screenshot from 2019-10-10 20-03-17\"></p>\n</li>\n<li><p>选择键盘布局，默认就可以了；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7ti671nelj30o90h3q43.jpg\" alt=\"Screenshot from 2019-10-10 20-03-35\"></p>\n</li>\n<li><p>设置网络连接，这里不建议在安装的时候连接网络，如果网速慢的话将会影响安装速度，如果是有线网络的话建议先把网线拔掉；</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/005tkHc2ly1g7ti77xduoj30o90h375t.jpg\" alt=\"Screenshot from 2019-10-10 20-03-41\"></p>\n</li>\n<li><p>选择安装的内容，使用最小安装就好了，没必要装那些多余的软件，以后需要用到再去安装；</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/005tkHc2ly1g7tia3pqf8j30o90h3dhg.jpg\" alt=\"Screenshot from 2019-10-10 20-03-48\"></p>\n</li>\n<li><p>选择安装方式，因为电脑已经安装了Windows10系统，如果要图简单的话，选择第一项，与Windows共存就好了，我喜欢自己调整分区，所以我使用的其他选项，<strong>千万不要选择清除整个磁盘并安装Ubuntu</strong>，那样会丢失所有硬盘里的数据；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7ticc8k6qj30o90h376n.jpg\" alt=\"Screenshot from 2019-10-10 20-04-27\"></p>\n</li>\n<li><p>硬盘的分区结构和大小预览，可以看到有一个大小50G左右空闲分区，这是在Windows下面预留出来的，这里我将它扩展成两个分区，一个4G大小的交换分区，用于Ubuntu系统休眠使用，剩下的分为一个EXT4主分区，挂在到<code>/</code>根目录下，关于分区，实在没有必要过于纠结挂载点，建议都挂载到根目录，<strong>千万不要去修改其他非空闲的分区，格式化分区会丢失数据</strong>，分区完成点击现在安装；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7tif394w6j30nu0neace.jpg\" alt=\"Screenshot from 2019-10-10 20-04-35\"><br><em>分区方式：单击选择要修改的分区，点击左下角的“+”，然后设置分区大小和分区格式，点击确定即可。</em><br><img src=\"https://tvax2.sinaimg.cn/large/005tkHc2ly1g7timqck0bj30hw07mwfn.jpg\" alt=\"Screenshot from 2019-10-10 20-06-58\"></p>\n</li>\n<li><p>选择时区，中国的话默认选择上海就可以了；</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005tkHc2ly1g7tiptajwrj30nu0ne79u.jpg\" alt=\"Screenshot from 2019-10-10 20-07-06\"></p>\n</li>\n<li><p>设置电脑信息和用户信息，自行设置；</p>\n<p><img src=\"https://tvax2.sinaimg.cn/large/005tkHc2ly1g7tiqiqdumj30nu0nedh1.jpg\" alt=\"Screenshot from 2019-10-11 04-07-31\"></p>\n</li>\n<li><p>开始安装系统，等待几分钟即可安装成功；</p>\n<p><img src=\"https://tva2.sinaimg.cn/large/005tkHc2ly1g7tirgiob5j30kw0ftn1f.jpg\" alt=\"Screenshot from 2019-10-11 04-07-42\"></p>\n</li>\n<li><p>安装成功，重启电脑；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tit5wdf5j30m004bdge.jpg\" alt=\"Screenshot from 2019-10-11 04-14-17\"></p>\n</li>\n<li><p>重启电脑时将U盘拔下，通常重启电脑之后，BIOS会默认启动Ubuntu的引导界面，如果没有启动到Ubuntu的引导界面，可以自行更改BIOS的启动设置，将Ubuntu设置成第一引导选项。引导界面有四个选项，第一个是正常启动Ubuntu系统，第二个是高级启动，第三个是启动Windows系统，第四个是进入电脑的BIOS设置。界面有10秒倒计时，如果没有更改启动选项则默认启动第一个，通过上下方向键可以更改启动选项，按回车键确定，通常默认启动第一个（正常启动Ubuntu）即可；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tiueoiioj32c03407wi.jpg\" alt=\"9680080688BD30783DBB457347BDC21F\"></p>\n</li>\n<li><p>稍等片刻就进入Ubuntu登录界面，选择安装系统时创建的用户，输入密码即可进入系统；</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj0g1qnlj32c03401ky.jpg\" alt=\"A0F892F96AE3577616886671227AFAE1\"></p>\n</li>\n<li><p>进入Ubuntu桌面，系统安装成功！</p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/005tkHc2ly1g7tj2d7xb2j31hc0u07gh.jpg\" alt=\"2019-10-11 12-18-03 的屏幕截图\"></p>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>相对来说，Ubuntu桌面版的安装还是非常简单的，全程都是基于可视化操作，非常便捷，稍微仔细点，配合搜索引擎应该都可以安装成功。</p>"},{"title":"MySQL压缩版安装记录","comments":1,"date":"2019-02-14T06:52:17.000Z","_content":"\n作为程序员，免不了与数据库打交道，MySQL作为一款最流行的关系型数据库，更是使用的非常之多，这篇文章主要记录MySQL压缩版在Windows下的安装和简单配置过程。\n\n<!--more-->\n\n### 安装环境\n\nWindows版本：Windows 10专业版\n\nMySQL版本：MySQL 5.7.22 64位ZIP压缩版\n\n### 下载安装包\n\n我推荐前往MySQL的官方网站下载MySQL的安装包，下载地址：[MySQL Community Server](https://downloads.mysql.com/archives/community/)，选择与自己系统对应的版本，下载安装包到本地磁盘。\n\n本文使用的安装包为：mysql-5.7.22-winx64.zip\n\n### 配置环境变量\n\n将安装包解压到指定位置（为避免不必要的麻烦，位置路径请不要包含中文和空格字符），我这里是解压到`F:\\Software\\MySQL57`路径下，目录结构如下图所示。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1g05yym2lzqj30pi0eeabr.jpg)\n\n打开Windows的系统变量设置，将MySQL下的bin目录配置进系统的Path变量，注意变量之间使用分号（;）间隔，这样就省去了每次都输入完整路径的麻烦。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1g05z2wds2wj30ij05awel.jpg)\n\n以管理员权限打开命令提示符，输入`mysql -V`，正确显示MySQL的版本号即配置成功。\n\n![image](https://wx2.sinaimg.cn/large/005tkHc2gy1g05z6mnt18j30rl0eft90.jpg)\n\n### 创建MySQL默认配置文件\n\n新建一个文本文件，命名为`my.ini`，将以下内容复制保存到文件中，注意`basedir`和`datadir`对应为MySQL的解压路径。\n\n```properties\n[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306 \n# 设置mysql的安装目录\nbasedir=\"F:\\Software\\MySQL57\"\n# 设置mysql数据库的数据的存放目录\ndatadir=\"F:\\Software\\MySQL57\\data\"\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n```\n\n### 初始化MySQL\n\n以管理员权限打开命令提示符，执行命令：`mysqld --initialize-insecure --user=mysql`，执行完这个命令后，MySQL会在安装目录下创建一个data文件夹，且创建好默认数据库，登录的用户名为`root`，密码为空。\n\n![image](https://wx2.sinaimg.cn/large/005tkHc2gy1g05zhq4xipj30ms01zglg.jpg)\n\n### 安装MySQL\n\n以管理员权限打开命令提示符，执行命令：`mysqld install`，提示`Service successfully installed`即安装成功。\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1g05ziy4v4xj30f0028mwz.jpg)\n\n*卸载MySQL的命令为：`mysqld remove`*\n\n### 启动MySQL\n\n以管理员权限打开命令提示符，执行命令：`net start mysql`，提示`MySQL服务已经启动成功`即表示MySQL已经正常启动。\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1g05zl8og02j30em05wt8p.jpg)\n\n### 登录MySQL\n\n打开命令提示符，执行命令：`mysql -u root -p`，密码默认为空，直接回车即可，表示以`root`用户登录MySQL。\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2gy1g060md7wctj30iw08l0sy.jpg)\n\n### 修改用户密码\n\n以命令提示符登录MySQL，执行命令：`set password for root@localhost = password(\"root\");`结尾分号不能省略，表示修改`root`用户的密码为`root`，修改之后，下次登录则需键入新的密码。\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1g05zyvwslsj30ig0id3za.jpg)\n\n### 修改远程访问权限\n\n以命令提示符登录MySQL，执行以下两个命令：`grant all privileges on *.* to 'root'@'%' identified by 'password';`和`flush privileges;`，第一个“\\*”表示所有数据库，第二个“\\*”表示所有数据表，root表示允许远程登录的用户名，%表示任意IP，password表示远程登录使用的密码，`flush privileges`是让权限立即生效。\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2gy1g060i660b7j30kg0bndg8.jpg)\n\n### 总结\n\nMySQL压缩版的安装及配置只是一个简单的开始，想要在开发中更好的运用MySQL，后期的学习和努力还需要更多。","source":"_posts/MySQL压缩版安装记录.md","raw":"---\ntitle: MySQL压缩版安装记录\ntags: [MySQL,数据库]\ncomments: true\ndate: 2019-02-14 14:52:17\ncategories: MySQL\n---\n\n作为程序员，免不了与数据库打交道，MySQL作为一款最流行的关系型数据库，更是使用的非常之多，这篇文章主要记录MySQL压缩版在Windows下的安装和简单配置过程。\n\n<!--more-->\n\n### 安装环境\n\nWindows版本：Windows 10专业版\n\nMySQL版本：MySQL 5.7.22 64位ZIP压缩版\n\n### 下载安装包\n\n我推荐前往MySQL的官方网站下载MySQL的安装包，下载地址：[MySQL Community Server](https://downloads.mysql.com/archives/community/)，选择与自己系统对应的版本，下载安装包到本地磁盘。\n\n本文使用的安装包为：mysql-5.7.22-winx64.zip\n\n### 配置环境变量\n\n将安装包解压到指定位置（为避免不必要的麻烦，位置路径请不要包含中文和空格字符），我这里是解压到`F:\\Software\\MySQL57`路径下，目录结构如下图所示。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1g05yym2lzqj30pi0eeabr.jpg)\n\n打开Windows的系统变量设置，将MySQL下的bin目录配置进系统的Path变量，注意变量之间使用分号（;）间隔，这样就省去了每次都输入完整路径的麻烦。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1g05z2wds2wj30ij05awel.jpg)\n\n以管理员权限打开命令提示符，输入`mysql -V`，正确显示MySQL的版本号即配置成功。\n\n![image](https://wx2.sinaimg.cn/large/005tkHc2gy1g05z6mnt18j30rl0eft90.jpg)\n\n### 创建MySQL默认配置文件\n\n新建一个文本文件，命名为`my.ini`，将以下内容复制保存到文件中，注意`basedir`和`datadir`对应为MySQL的解压路径。\n\n```properties\n[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306 \n# 设置mysql的安装目录\nbasedir=\"F:\\Software\\MySQL57\"\n# 设置mysql数据库的数据的存放目录\ndatadir=\"F:\\Software\\MySQL57\\data\"\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n```\n\n### 初始化MySQL\n\n以管理员权限打开命令提示符，执行命令：`mysqld --initialize-insecure --user=mysql`，执行完这个命令后，MySQL会在安装目录下创建一个data文件夹，且创建好默认数据库，登录的用户名为`root`，密码为空。\n\n![image](https://wx2.sinaimg.cn/large/005tkHc2gy1g05zhq4xipj30ms01zglg.jpg)\n\n### 安装MySQL\n\n以管理员权限打开命令提示符，执行命令：`mysqld install`，提示`Service successfully installed`即安装成功。\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1g05ziy4v4xj30f0028mwz.jpg)\n\n*卸载MySQL的命令为：`mysqld remove`*\n\n### 启动MySQL\n\n以管理员权限打开命令提示符，执行命令：`net start mysql`，提示`MySQL服务已经启动成功`即表示MySQL已经正常启动。\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1g05zl8og02j30em05wt8p.jpg)\n\n### 登录MySQL\n\n打开命令提示符，执行命令：`mysql -u root -p`，密码默认为空，直接回车即可，表示以`root`用户登录MySQL。\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2gy1g060md7wctj30iw08l0sy.jpg)\n\n### 修改用户密码\n\n以命令提示符登录MySQL，执行命令：`set password for root@localhost = password(\"root\");`结尾分号不能省略，表示修改`root`用户的密码为`root`，修改之后，下次登录则需键入新的密码。\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1g05zyvwslsj30ig0id3za.jpg)\n\n### 修改远程访问权限\n\n以命令提示符登录MySQL，执行以下两个命令：`grant all privileges on *.* to 'root'@'%' identified by 'password';`和`flush privileges;`，第一个“\\*”表示所有数据库，第二个“\\*”表示所有数据表，root表示允许远程登录的用户名，%表示任意IP，password表示远程登录使用的密码，`flush privileges`是让权限立即生效。\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2gy1g060i660b7j30kg0bndg8.jpg)\n\n### 总结\n\nMySQL压缩版的安装及配置只是一个简单的开始，想要在开发中更好的运用MySQL，后期的学习和努力还需要更多。","slug":"MySQL压缩版安装记录","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kg000hw2pmgfme0qtc","content":"<p>作为程序员，免不了与数据库打交道，MySQL作为一款最流行的关系型数据库，更是使用的非常之多，这篇文章主要记录MySQL压缩版在Windows下的安装和简单配置过程。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p>Windows版本：Windows 10专业版</p>\n<p>MySQL版本：MySQL 5.7.22 64位ZIP压缩版</p>\n<h3 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h3><p>我推荐前往MySQL的官方网站下载MySQL的安装包，下载地址：<a href=\"https://downloads.mysql.com/archives/community/\" target=\"_blank\" rel=\"noopener\">MySQL Community Server</a>，选择与自己系统对应的版本，下载安装包到本地磁盘。</p>\n<p>本文使用的安装包为：mysql-5.7.22-winx64.zip</p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>将安装包解压到指定位置（为避免不必要的麻烦，位置路径请不要包含中文和空格字符），我这里是解压到<code>F:\\Software\\MySQL57</code>路径下，目录结构如下图所示。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1g05yym2lzqj30pi0eeabr.jpg\" alt=\"image\"></p>\n<p>打开Windows的系统变量设置，将MySQL下的bin目录配置进系统的Path变量，注意变量之间使用分号（;）间隔，这样就省去了每次都输入完整路径的麻烦。</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1g05z2wds2wj30ij05awel.jpg\" alt=\"image\"></p>\n<p>以管理员权限打开命令提示符，输入<code>mysql -V</code>，正确显示MySQL的版本号即配置成功。</p>\n<p><img src=\"https://wx2.sinaimg.cn/large/005tkHc2gy1g05z6mnt18j30rl0eft90.jpg\" alt=\"image\"></p>\n<h3 id=\"创建MySQL默认配置文件\"><a href=\"#创建MySQL默认配置文件\" class=\"headerlink\" title=\"创建MySQL默认配置文件\"></a>创建MySQL默认配置文件</h3><p>新建一个文本文件，命名为<code>my.ini</code>，将以下内容复制保存到文件中，注意<code>basedir</code>和<code>datadir</code>对应为MySQL的解压路径。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8 </span></span><br><span class=\"line\"><span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#设置3306端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">3306 </span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=<span class=\"string\">\"F:\\Software\\MySQL57\"</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=<span class=\"string\">\"F:\\Software\\MySQL57\\data\"</span></span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"string\">200</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class=\"line\"><span class=\"meta\">character-set-server</span>=<span class=\"string\">utf8</span></span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"meta\">default-storage-engine</span>=<span class=\"string\">INNODB</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化MySQL\"><a href=\"#初始化MySQL\" class=\"headerlink\" title=\"初始化MySQL\"></a>初始化MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>mysqld --initialize-insecure --user=mysql</code>，执行完这个命令后，MySQL会在安装目录下创建一个data文件夹，且创建好默认数据库，登录的用户名为<code>root</code>，密码为空。</p>\n<p><img src=\"https://wx2.sinaimg.cn/large/005tkHc2gy1g05zhq4xipj30ms01zglg.jpg\" alt=\"image\"></p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>mysqld install</code>，提示<code>Service successfully installed</code>即安装成功。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1g05ziy4v4xj30f0028mwz.jpg\" alt=\"image\"></p>\n<p><em>卸载MySQL的命令为：<code>mysqld remove</code></em></p>\n<h3 id=\"启动MySQL\"><a href=\"#启动MySQL\" class=\"headerlink\" title=\"启动MySQL\"></a>启动MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>net start mysql</code>，提示<code>MySQL服务已经启动成功</code>即表示MySQL已经正常启动。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1g05zl8og02j30em05wt8p.jpg\" alt=\"image\"></p>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p>打开命令提示符，执行命令：<code>mysql -u root -p</code>，密码默认为空，直接回车即可，表示以<code>root</code>用户登录MySQL。</p>\n<p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2gy1g060md7wctj30iw08l0sy.jpg\" alt=\"image\"></p>\n<h3 id=\"修改用户密码\"><a href=\"#修改用户密码\" class=\"headerlink\" title=\"修改用户密码\"></a>修改用户密码</h3><p>以命令提示符登录MySQL，执行命令：<code>set password for root@localhost = password(&quot;root&quot;);</code>结尾分号不能省略，表示修改<code>root</code>用户的密码为<code>root</code>，修改之后，下次登录则需键入新的密码。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1g05zyvwslsj30ig0id3za.jpg\" alt=\"image\"></p>\n<h3 id=\"修改远程访问权限\"><a href=\"#修改远程访问权限\" class=\"headerlink\" title=\"修改远程访问权限\"></a>修改远程访问权限</h3><p>以命令提示符登录MySQL，执行以下两个命令：<code>grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</code>和<code>flush privileges;</code>，第一个“*”表示所有数据库，第二个“*”表示所有数据表，root表示允许远程登录的用户名，%表示任意IP，password表示远程登录使用的密码，<code>flush privileges</code>是让权限立即生效。</p>\n<p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2gy1g060i660b7j30kg0bndg8.jpg\" alt=\"image\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>MySQL压缩版的安装及配置只是一个简单的开始，想要在开发中更好的运用MySQL，后期的学习和努力还需要更多。</p>\n","site":{"data":{}},"excerpt":"<p>作为程序员，免不了与数据库打交道，MySQL作为一款最流行的关系型数据库，更是使用的非常之多，这篇文章主要记录MySQL压缩版在Windows下的安装和简单配置过程。</p>","more":"<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p>Windows版本：Windows 10专业版</p>\n<p>MySQL版本：MySQL 5.7.22 64位ZIP压缩版</p>\n<h3 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h3><p>我推荐前往MySQL的官方网站下载MySQL的安装包，下载地址：<a href=\"https://downloads.mysql.com/archives/community/\" target=\"_blank\" rel=\"noopener\">MySQL Community Server</a>，选择与自己系统对应的版本，下载安装包到本地磁盘。</p>\n<p>本文使用的安装包为：mysql-5.7.22-winx64.zip</p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>将安装包解压到指定位置（为避免不必要的麻烦，位置路径请不要包含中文和空格字符），我这里是解压到<code>F:\\Software\\MySQL57</code>路径下，目录结构如下图所示。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1g05yym2lzqj30pi0eeabr.jpg\" alt=\"image\"></p>\n<p>打开Windows的系统变量设置，将MySQL下的bin目录配置进系统的Path变量，注意变量之间使用分号（;）间隔，这样就省去了每次都输入完整路径的麻烦。</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1g05z2wds2wj30ij05awel.jpg\" alt=\"image\"></p>\n<p>以管理员权限打开命令提示符，输入<code>mysql -V</code>，正确显示MySQL的版本号即配置成功。</p>\n<p><img src=\"https://wx2.sinaimg.cn/large/005tkHc2gy1g05z6mnt18j30rl0eft90.jpg\" alt=\"image\"></p>\n<h3 id=\"创建MySQL默认配置文件\"><a href=\"#创建MySQL默认配置文件\" class=\"headerlink\" title=\"创建MySQL默认配置文件\"></a>创建MySQL默认配置文件</h3><p>新建一个文本文件，命名为<code>my.ini</code>，将以下内容复制保存到文件中，注意<code>basedir</code>和<code>datadir</code>对应为MySQL的解压路径。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8 </span></span><br><span class=\"line\"><span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#设置3306端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">3306 </span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=<span class=\"string\">\"F:\\Software\\MySQL57\"</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=<span class=\"string\">\"F:\\Software\\MySQL57\\data\"</span></span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"string\">200</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class=\"line\"><span class=\"meta\">character-set-server</span>=<span class=\"string\">utf8</span></span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"meta\">default-storage-engine</span>=<span class=\"string\">INNODB</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化MySQL\"><a href=\"#初始化MySQL\" class=\"headerlink\" title=\"初始化MySQL\"></a>初始化MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>mysqld --initialize-insecure --user=mysql</code>，执行完这个命令后，MySQL会在安装目录下创建一个data文件夹，且创建好默认数据库，登录的用户名为<code>root</code>，密码为空。</p>\n<p><img src=\"https://wx2.sinaimg.cn/large/005tkHc2gy1g05zhq4xipj30ms01zglg.jpg\" alt=\"image\"></p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>mysqld install</code>，提示<code>Service successfully installed</code>即安装成功。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1g05ziy4v4xj30f0028mwz.jpg\" alt=\"image\"></p>\n<p><em>卸载MySQL的命令为：<code>mysqld remove</code></em></p>\n<h3 id=\"启动MySQL\"><a href=\"#启动MySQL\" class=\"headerlink\" title=\"启动MySQL\"></a>启动MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>net start mysql</code>，提示<code>MySQL服务已经启动成功</code>即表示MySQL已经正常启动。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1g05zl8og02j30em05wt8p.jpg\" alt=\"image\"></p>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p>打开命令提示符，执行命令：<code>mysql -u root -p</code>，密码默认为空，直接回车即可，表示以<code>root</code>用户登录MySQL。</p>\n<p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2gy1g060md7wctj30iw08l0sy.jpg\" alt=\"image\"></p>\n<h3 id=\"修改用户密码\"><a href=\"#修改用户密码\" class=\"headerlink\" title=\"修改用户密码\"></a>修改用户密码</h3><p>以命令提示符登录MySQL，执行命令：<code>set password for root@localhost = password(&quot;root&quot;);</code>结尾分号不能省略，表示修改<code>root</code>用户的密码为<code>root</code>，修改之后，下次登录则需键入新的密码。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1g05zyvwslsj30ig0id3za.jpg\" alt=\"image\"></p>\n<h3 id=\"修改远程访问权限\"><a href=\"#修改远程访问权限\" class=\"headerlink\" title=\"修改远程访问权限\"></a>修改远程访问权限</h3><p>以命令提示符登录MySQL，执行以下两个命令：<code>grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</code>和<code>flush privileges;</code>，第一个“*”表示所有数据库，第二个“*”表示所有数据表，root表示允许远程登录的用户名，%表示任意IP，password表示远程登录使用的密码，<code>flush privileges</code>是让权限立即生效。</p>\n<p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2gy1g060i660b7j30kg0bndg8.jpg\" alt=\"image\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>MySQL压缩版的安装及配置只是一个简单的开始，想要在开发中更好的运用MySQL，后期的学习和努力还需要更多。</p>"},{"title":"SpringBoot下实现AOP日志","comments":1,"date":"2019-01-17T07:00:04.000Z","_content":"\nSpring两大核心为IoC和AOP，本篇文章旨在记录下在SpringBoot下如何整合使用AOP，适用场景为Web项目中对请求做切面来记录日志。\n\n<!--more-->\n\n### 引入依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.5.RELEASE</version>\n    <relativePath/>\n</parent>\n<dependencies>\n    <dependency>\n    \t<groupId>org.springframework.boot</groupId>\n    \t<artifactId>spring-boot-starter-web</artifactId>\n\t</dependency>\n    <dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-aop</artifactId>\n     </dependency>\n</dependencies>\n```\n\n本次项目使用的是SpringBoot 2.0.5，引入web和aop依赖。\n\n### 实现一个Web请求\n\n```java\n@RestController\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n### 实现切面和日志\n\n```java\npackage cn.glieen.aop;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class LogAop {\n    private final Logger logger = LoggerFactory.getLogger(LogAop.class);\n\n    @Pointcut(\"execution(* cn.glieen.controller.*.*(..))\")\n    public void pointcut() {\n    }\n\n    @Before(\"pointcut()\")\n    public void log(JoinPoint joinPoint) {\n        StringBuilder param = new StringBuilder();\n        Object[] args = joinPoint.getArgs();\n        for (Object arg : args) {\n            param.append(arg).append(\" \");\n        }\n        logger.info(\"Args:\" + param.toString());\n        logger.info(\"Method:\" + joinPoint.getSignature().toLongString());\n    }\n}\n```\n\n`@Aspect`定义为切面类\n\n`@Component`将切面注入到Spring容器中\n\n`@Pointcut`定义切入点\n\n`@Before`前置通知，在执行目标方法之前执行切面方法\n\n`JoinPoint`可以获得通知的签名信息\n\n### 运行结果\n\n使用Postman或者浏览器访问`http://localhost:8080/hello?name=Glieen`，的到以下运行结果：\n\n```java\nINFO 10856 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'\nINFO 10856 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started\nINFO 10856 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 7 ms\nINFO 10856 --- [nio-8080-exec-1] cn.glieen.aop.LogAop                     : Args:Glieen \nINFO 10856 --- [nio-8080-exec-1] cn.glieen.aop.LogAop                     : Method:public java.lang.String cn.glieen.controller.HelloController.hello(java.lang.String)\n\n```\n\n现在就可以使用AOP来记录方法的访问日志了。","source":"_posts/SpringBoot下实现AOP日志.md","raw":"---\ntitle: SpringBoot下实现AOP日志\ntags: [Spring,SpringBoot,AOP]\ncomments: true\ndate: 2019-01-17 15:00:04\ncategories: Spring\n---\n\nSpring两大核心为IoC和AOP，本篇文章旨在记录下在SpringBoot下如何整合使用AOP，适用场景为Web项目中对请求做切面来记录日志。\n\n<!--more-->\n\n### 引入依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.5.RELEASE</version>\n    <relativePath/>\n</parent>\n<dependencies>\n    <dependency>\n    \t<groupId>org.springframework.boot</groupId>\n    \t<artifactId>spring-boot-starter-web</artifactId>\n\t</dependency>\n    <dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-aop</artifactId>\n     </dependency>\n</dependencies>\n```\n\n本次项目使用的是SpringBoot 2.0.5，引入web和aop依赖。\n\n### 实现一个Web请求\n\n```java\n@RestController\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n### 实现切面和日志\n\n```java\npackage cn.glieen.aop;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class LogAop {\n    private final Logger logger = LoggerFactory.getLogger(LogAop.class);\n\n    @Pointcut(\"execution(* cn.glieen.controller.*.*(..))\")\n    public void pointcut() {\n    }\n\n    @Before(\"pointcut()\")\n    public void log(JoinPoint joinPoint) {\n        StringBuilder param = new StringBuilder();\n        Object[] args = joinPoint.getArgs();\n        for (Object arg : args) {\n            param.append(arg).append(\" \");\n        }\n        logger.info(\"Args:\" + param.toString());\n        logger.info(\"Method:\" + joinPoint.getSignature().toLongString());\n    }\n}\n```\n\n`@Aspect`定义为切面类\n\n`@Component`将切面注入到Spring容器中\n\n`@Pointcut`定义切入点\n\n`@Before`前置通知，在执行目标方法之前执行切面方法\n\n`JoinPoint`可以获得通知的签名信息\n\n### 运行结果\n\n使用Postman或者浏览器访问`http://localhost:8080/hello?name=Glieen`，的到以下运行结果：\n\n```java\nINFO 10856 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'\nINFO 10856 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started\nINFO 10856 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 7 ms\nINFO 10856 --- [nio-8080-exec-1] cn.glieen.aop.LogAop                     : Args:Glieen \nINFO 10856 --- [nio-8080-exec-1] cn.glieen.aop.LogAop                     : Method:public java.lang.String cn.glieen.controller.HelloController.hello(java.lang.String)\n\n```\n\n现在就可以使用AOP来记录方法的访问日志了。","slug":"SpringBoot下实现AOP日志","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kh000kw2pmf3qx3aov","content":"<p>Spring两大核心为IoC和AOP，本篇文章旨在记录下在SpringBoot下如何整合使用AOP，适用场景为Web项目中对请求做切面来记录日志。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>本次项目使用的是SpringBoot 2.0.5，引入web和aop依赖。</p>\n<h3 id=\"实现一个Web请求\"><a href=\"#实现一个Web请求\" class=\"headerlink\" title=\"实现一个Web请求\"></a>实现一个Web请求</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现切面和日志\"><a href=\"#实现切面和日志\" class=\"headerlink\" title=\"实现切面和日志\"></a>实现切面和日志</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.glieen.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(LogAop<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* cn.glieen.controller.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder param = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            param.append(arg).append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"Args:\"</span> + param.toString());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"Method:\"</span> + joinPoint.getSignature().toLongString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@Aspect</code>定义为切面类</p>\n<p><code>@Component</code>将切面注入到Spring容器中</p>\n<p><code>@Pointcut</code>定义切入点</p>\n<p><code>@Before</code>前置通知，在执行目标方法之前执行切面方法</p>\n<p><code>JoinPoint</code>可以获得通知的签名信息</p>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>使用Postman或者浏览器访问<code>http://localhost:8080/hello?name=Glieen</code>，的到以下运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet <span class=\"string\">'dispatcherServlet'</span></span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class=\"string\">'dispatcherServlet'</span>: initialization started</span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class=\"string\">'dispatcherServlet'</span>: initialization completed in <span class=\"number\">7</span> ms</span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] cn.glieen.aop.LogAop                     : Args:Glieen </span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] cn.glieen.aop.LogAop                     : Method:<span class=\"keyword\">public</span> java.lang.String cn.glieen.controller.HelloController.hello(java.lang.String)</span><br></pre></td></tr></table></figure>\n\n<p>现在就可以使用AOP来记录方法的访问日志了。</p>\n","site":{"data":{}},"excerpt":"<p>Spring两大核心为IoC和AOP，本篇文章旨在记录下在SpringBoot下如何整合使用AOP，适用场景为Web项目中对请求做切面来记录日志。</p>","more":"<h3 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>本次项目使用的是SpringBoot 2.0.5，引入web和aop依赖。</p>\n<h3 id=\"实现一个Web请求\"><a href=\"#实现一个Web请求\" class=\"headerlink\" title=\"实现一个Web请求\"></a>实现一个Web请求</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现切面和日志\"><a href=\"#实现切面和日志\" class=\"headerlink\" title=\"实现切面和日志\"></a>实现切面和日志</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.glieen.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(LogAop<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* cn.glieen.controller.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder param = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            param.append(arg).append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"Args:\"</span> + param.toString());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"Method:\"</span> + joinPoint.getSignature().toLongString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@Aspect</code>定义为切面类</p>\n<p><code>@Component</code>将切面注入到Spring容器中</p>\n<p><code>@Pointcut</code>定义切入点</p>\n<p><code>@Before</code>前置通知，在执行目标方法之前执行切面方法</p>\n<p><code>JoinPoint</code>可以获得通知的签名信息</p>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>使用Postman或者浏览器访问<code>http://localhost:8080/hello?name=Glieen</code>，的到以下运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet <span class=\"string\">'dispatcherServlet'</span></span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class=\"string\">'dispatcherServlet'</span>: initialization started</span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class=\"string\">'dispatcherServlet'</span>: initialization completed in <span class=\"number\">7</span> ms</span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] cn.glieen.aop.LogAop                     : Args:Glieen </span><br><span class=\"line\">INFO <span class=\"number\">10856</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] cn.glieen.aop.LogAop                     : Method:<span class=\"keyword\">public</span> java.lang.String cn.glieen.controller.HelloController.hello(java.lang.String)</span><br></pre></td></tr></table></figure>\n\n<p>现在就可以使用AOP来记录方法的访问日志了。</p>"},{"title":"SpringBoot全局异常处理","comments":1,"date":"2019-01-17T09:25:02.000Z","_content":"\n异常是Java开发中经常会遇到的问题，异常如果不妥善的处理将会对开发带来非常大的困扰，所以在代码中我们经常能看到`try-catch`代码块手动处理异常，这对业务代码会产生干扰，而SpringBoot提供了全局的异常处理机制，简单而且优雅，本文就简要介绍一下SpringBoot全局异常处理的配置。\n\n<!--more-->\n\n### 创建项目\n\n使用Maven创建一个SpringBoot项目，添加web模块的依赖即可，因为只是简单展示一下异常的处理，就不用引入过多的依赖了。\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-parent</artifactId>\n    <version>2.0.5.RELEASE</version>\n    <relativePath/>\n</parent>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 创建控制器和启动类\n\n简单的一个`Controller`和`MainApplication`\n\n```java\n// 控制器\n@RestController\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n```java\n// SpringBoot\n@SpringBootApplication\npublic class MainApplication {\n    public static void main(String[] args){\n        SpringApplication.run(MainApplication.class, args);\n    }\n}\n```\n\n启动`MainApplication`，打开Postman（Postman是一个非常方便的接口测试工具），访问地址`localhost:8080/hello?name=Glieen`，成功返回响应数据。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzfi261jarj30qy09naae.jpg)\n\n### 创建异常响应实体类\n\n我们不能直接将异常返回到客户端，这对用户和开发者来说都不友好，也不方便对异常进行处理，这里我们创建一个异常的响应实体来封装异常信息。\n\n```java\n// 异常响应实体\npublic class ErrorMessage {\n    // 提示信息\n    private String message;\n    // 请求地址\n    private String url;\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n}\n```\n\n### 创建自定义异常和异常处理类\n\n开发中经常遇到的是运行时异常，所以这里我们继承`RuntimeException`创建自定义的异常，具体的异常在实际运用中应该跟业务逻辑有很大的关系。\n\n```java\n// 自定义异常\npublic class MyException extends RuntimeException {\n    public MyException(String message) {\n        super(message);\n    }\n}\n```\n\n异常处理类只需要创建一个简单的Java类，并且加上`ControllerAdvice`注解，SpringBoot在启动时会自动扫描并配置。这里使用的`RestControllerAdvice`是组合了`ResponseBody`和`ControllerAdvice`的注解，用来返回json数据，`ExceptionHandler`注解用来捕捉程序运行时发生的异常，将其配置到方法上，当指定的异常发生时即会调用该注解下的方法。\n\n```java\n// 异常处理类\n@RestControllerAdvice\npublic class DefaultExceptionHandler {\n    // 日志对象\n    private final Logger logger = LoggerFactory.getLogger(DefaultExceptionHandler.class);\n\n    // 捕捉自定义异常MyException\n    @ExceptionHandler(MyException.class)\n    public ErrorMessage exception(HttpServletRequest request, Exception e) {\n        logger.info(\"This is my custom exception!\");\n        return exceptionHandler(request.getRequestURI(), e.getMessage());\n    }\n\n    private ErrorMessage exceptionHandler(String url, String message) {\n        ErrorMessage errorMessage = new ErrorMessage();\n        errorMessage.setMessage(message);\n        errorMessage.setUrl(url);\n        return errorMessage;\n    }\n\n}\n```\n\n### 测试异常处理流程\n\n这里我们将控制器做一个简单的修改，让其主动抛出自定义异常。\n\n```java\n// 控制器类\n@RestController\npublic class HelloController {\n    \n    @GetMapping(\"/hello\")\n    public String hello(String name) {\n        if (true)\n            throw new MyException(\"MyException\");\n        return \"hello \" + name;\n    }\n}\n```\n\n使用Postman再次访问该接口`localhost:8080/hello?name=Glieen`，程序将自定义的异常实体类以json形式返回，包含提示信息和请求地址，同时在控制台输出日志信息，异常被成功捕捉并处理。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzfij9qvgqj30rh0aijrt.jpg)\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzfimpxulqj31bc04j0t3.jpg)\n\n### 总结\n\nSpringBoot是如此的高效和简单，在处理全局异常亦是如此，本文只是简单的记录如何捕获程序运行时发生的异常，相信在以后的开发中会用的更加得心应手。","source":"_posts/SpringBoot全局异常处理.md","raw":"---\ntitle: SpringBoot全局异常处理\ntags: [Spring,SpringBoot,异常]\ncomments: true\ndate: 2019-01-17 17:25:02\ncategories: Spring\n---\n\n异常是Java开发中经常会遇到的问题，异常如果不妥善的处理将会对开发带来非常大的困扰，所以在代码中我们经常能看到`try-catch`代码块手动处理异常，这对业务代码会产生干扰，而SpringBoot提供了全局的异常处理机制，简单而且优雅，本文就简要介绍一下SpringBoot全局异常处理的配置。\n\n<!--more-->\n\n### 创建项目\n\n使用Maven创建一个SpringBoot项目，添加web模块的依赖即可，因为只是简单展示一下异常的处理，就不用引入过多的依赖了。\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-parent</artifactId>\n    <version>2.0.5.RELEASE</version>\n    <relativePath/>\n</parent>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 创建控制器和启动类\n\n简单的一个`Controller`和`MainApplication`\n\n```java\n// 控制器\n@RestController\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n```java\n// SpringBoot\n@SpringBootApplication\npublic class MainApplication {\n    public static void main(String[] args){\n        SpringApplication.run(MainApplication.class, args);\n    }\n}\n```\n\n启动`MainApplication`，打开Postman（Postman是一个非常方便的接口测试工具），访问地址`localhost:8080/hello?name=Glieen`，成功返回响应数据。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzfi261jarj30qy09naae.jpg)\n\n### 创建异常响应实体类\n\n我们不能直接将异常返回到客户端，这对用户和开发者来说都不友好，也不方便对异常进行处理，这里我们创建一个异常的响应实体来封装异常信息。\n\n```java\n// 异常响应实体\npublic class ErrorMessage {\n    // 提示信息\n    private String message;\n    // 请求地址\n    private String url;\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n}\n```\n\n### 创建自定义异常和异常处理类\n\n开发中经常遇到的是运行时异常，所以这里我们继承`RuntimeException`创建自定义的异常，具体的异常在实际运用中应该跟业务逻辑有很大的关系。\n\n```java\n// 自定义异常\npublic class MyException extends RuntimeException {\n    public MyException(String message) {\n        super(message);\n    }\n}\n```\n\n异常处理类只需要创建一个简单的Java类，并且加上`ControllerAdvice`注解，SpringBoot在启动时会自动扫描并配置。这里使用的`RestControllerAdvice`是组合了`ResponseBody`和`ControllerAdvice`的注解，用来返回json数据，`ExceptionHandler`注解用来捕捉程序运行时发生的异常，将其配置到方法上，当指定的异常发生时即会调用该注解下的方法。\n\n```java\n// 异常处理类\n@RestControllerAdvice\npublic class DefaultExceptionHandler {\n    // 日志对象\n    private final Logger logger = LoggerFactory.getLogger(DefaultExceptionHandler.class);\n\n    // 捕捉自定义异常MyException\n    @ExceptionHandler(MyException.class)\n    public ErrorMessage exception(HttpServletRequest request, Exception e) {\n        logger.info(\"This is my custom exception!\");\n        return exceptionHandler(request.getRequestURI(), e.getMessage());\n    }\n\n    private ErrorMessage exceptionHandler(String url, String message) {\n        ErrorMessage errorMessage = new ErrorMessage();\n        errorMessage.setMessage(message);\n        errorMessage.setUrl(url);\n        return errorMessage;\n    }\n\n}\n```\n\n### 测试异常处理流程\n\n这里我们将控制器做一个简单的修改，让其主动抛出自定义异常。\n\n```java\n// 控制器类\n@RestController\npublic class HelloController {\n    \n    @GetMapping(\"/hello\")\n    public String hello(String name) {\n        if (true)\n            throw new MyException(\"MyException\");\n        return \"hello \" + name;\n    }\n}\n```\n\n使用Postman再次访问该接口`localhost:8080/hello?name=Glieen`，程序将自定义的异常实体类以json形式返回，包含提示信息和请求地址，同时在控制台输出日志信息，异常被成功捕捉并处理。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzfij9qvgqj30rh0aijrt.jpg)\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzfimpxulqj31bc04j0t3.jpg)\n\n### 总结\n\nSpringBoot是如此的高效和简单，在处理全局异常亦是如此，本文只是简单的记录如何捕获程序运行时发生的异常，相信在以后的开发中会用的更加得心应手。","slug":"SpringBoot全局异常处理","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1ki000pw2pmg74x43eo","content":"<p>异常是Java开发中经常会遇到的问题，异常如果不妥善的处理将会对开发带来非常大的困扰，所以在代码中我们经常能看到<code>try-catch</code>代码块手动处理异常，这对业务代码会产生干扰，而SpringBoot提供了全局的异常处理机制，简单而且优雅，本文就简要介绍一下SpringBoot全局异常处理的配置。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>使用Maven创建一个SpringBoot项目，添加web模块的依赖即可，因为只是简单展示一下异常的处理，就不用引入过多的依赖了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建控制器和启动类\"><a href=\"#创建控制器和启动类\" class=\"headerlink\" title=\"创建控制器和启动类\"></a>创建控制器和启动类</h3><p>简单的一个<code>Controller</code>和<code>MainApplication</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制器</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringBoot</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MainApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动<code>MainApplication</code>，打开Postman（Postman是一个非常方便的接口测试工具），访问地址<code>localhost:8080/hello?name=Glieen</code>，成功返回响应数据。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzfi261jarj30qy09naae.jpg\" alt=\"image\"></p>\n<h3 id=\"创建异常响应实体类\"><a href=\"#创建异常响应实体类\" class=\"headerlink\" title=\"创建异常响应实体类\"></a>创建异常响应实体类</h3><p>我们不能直接将异常返回到客户端，这对用户和开发者来说都不友好，也不方便对异常进行处理，这里我们创建一个异常的响应实体来封装异常信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异常响应实体</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorMessage</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提示信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"comment\">// 请求地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUrl</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自定义异常和异常处理类\"><a href=\"#创建自定义异常和异常处理类\" class=\"headerlink\" title=\"创建自定义异常和异常处理类\"></a>创建自定义异常和异常处理类</h3><p>开发中经常遇到的是运行时异常，所以这里我们继承<code>RuntimeException</code>创建自定义的异常，具体的异常在实际运用中应该跟业务逻辑有很大的关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义异常</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异常处理类只需要创建一个简单的Java类，并且加上<code>ControllerAdvice</code>注解，SpringBoot在启动时会自动扫描并配置。这里使用的<code>RestControllerAdvice</code>是组合了<code>ResponseBody</code>和<code>ControllerAdvice</code>的注解，用来返回json数据，<code>ExceptionHandler</code>注解用来捕捉程序运行时发生的异常，将其配置到方法上，当指定的异常发生时即会调用该注解下的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异常处理类</span></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultExceptionHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 日志对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(DefaultExceptionHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 捕捉自定义异常MyException</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(MyException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">ErrorMessage</span> <span class=\"title\">exception</span>(<span class=\"title\">HttpServletRequest</span> <span class=\"title\">request</span>, <span class=\"title\">Exception</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"This is my custom exception!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exceptionHandler(request.getRequestURI(), e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ErrorMessage <span class=\"title\">exceptionHandler</span><span class=\"params\">(String url, String message)</span> </span>&#123;</span><br><span class=\"line\">        ErrorMessage errorMessage = <span class=\"keyword\">new</span> ErrorMessage();</span><br><span class=\"line\">        errorMessage.setMessage(message);</span><br><span class=\"line\">        errorMessage.setUrl(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试异常处理流程\"><a href=\"#测试异常处理流程\" class=\"headerlink\" title=\"测试异常处理流程\"></a>测试异常处理流程</h3><p>这里我们将控制器做一个简单的修改，让其主动抛出自定义异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制器类</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MyException(<span class=\"string\">\"MyException\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用Postman再次访问该接口<code>localhost:8080/hello?name=Glieen</code>，程序将自定义的异常实体类以json形式返回，包含提示信息和请求地址，同时在控制台输出日志信息，异常被成功捕捉并处理。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzfij9qvgqj30rh0aijrt.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzfimpxulqj31bc04j0t3.jpg\" alt=\"image\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>SpringBoot是如此的高效和简单，在处理全局异常亦是如此，本文只是简单的记录如何捕获程序运行时发生的异常，相信在以后的开发中会用的更加得心应手。</p>\n","site":{"data":{}},"excerpt":"<p>异常是Java开发中经常会遇到的问题，异常如果不妥善的处理将会对开发带来非常大的困扰，所以在代码中我们经常能看到<code>try-catch</code>代码块手动处理异常，这对业务代码会产生干扰，而SpringBoot提供了全局的异常处理机制，简单而且优雅，本文就简要介绍一下SpringBoot全局异常处理的配置。</p>","more":"<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>使用Maven创建一个SpringBoot项目，添加web模块的依赖即可，因为只是简单展示一下异常的处理，就不用引入过多的依赖了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建控制器和启动类\"><a href=\"#创建控制器和启动类\" class=\"headerlink\" title=\"创建控制器和启动类\"></a>创建控制器和启动类</h3><p>简单的一个<code>Controller</code>和<code>MainApplication</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制器</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringBoot</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MainApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动<code>MainApplication</code>，打开Postman（Postman是一个非常方便的接口测试工具），访问地址<code>localhost:8080/hello?name=Glieen</code>，成功返回响应数据。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzfi261jarj30qy09naae.jpg\" alt=\"image\"></p>\n<h3 id=\"创建异常响应实体类\"><a href=\"#创建异常响应实体类\" class=\"headerlink\" title=\"创建异常响应实体类\"></a>创建异常响应实体类</h3><p>我们不能直接将异常返回到客户端，这对用户和开发者来说都不友好，也不方便对异常进行处理，这里我们创建一个异常的响应实体来封装异常信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异常响应实体</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorMessage</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提示信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"comment\">// 请求地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUrl</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自定义异常和异常处理类\"><a href=\"#创建自定义异常和异常处理类\" class=\"headerlink\" title=\"创建自定义异常和异常处理类\"></a>创建自定义异常和异常处理类</h3><p>开发中经常遇到的是运行时异常，所以这里我们继承<code>RuntimeException</code>创建自定义的异常，具体的异常在实际运用中应该跟业务逻辑有很大的关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义异常</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异常处理类只需要创建一个简单的Java类，并且加上<code>ControllerAdvice</code>注解，SpringBoot在启动时会自动扫描并配置。这里使用的<code>RestControllerAdvice</code>是组合了<code>ResponseBody</code>和<code>ControllerAdvice</code>的注解，用来返回json数据，<code>ExceptionHandler</code>注解用来捕捉程序运行时发生的异常，将其配置到方法上，当指定的异常发生时即会调用该注解下的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异常处理类</span></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultExceptionHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 日志对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(DefaultExceptionHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 捕捉自定义异常MyException</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(MyException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">ErrorMessage</span> <span class=\"title\">exception</span>(<span class=\"title\">HttpServletRequest</span> <span class=\"title\">request</span>, <span class=\"title\">Exception</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"This is my custom exception!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exceptionHandler(request.getRequestURI(), e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ErrorMessage <span class=\"title\">exceptionHandler</span><span class=\"params\">(String url, String message)</span> </span>&#123;</span><br><span class=\"line\">        ErrorMessage errorMessage = <span class=\"keyword\">new</span> ErrorMessage();</span><br><span class=\"line\">        errorMessage.setMessage(message);</span><br><span class=\"line\">        errorMessage.setUrl(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试异常处理流程\"><a href=\"#测试异常处理流程\" class=\"headerlink\" title=\"测试异常处理流程\"></a>测试异常处理流程</h3><p>这里我们将控制器做一个简单的修改，让其主动抛出自定义异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 控制器类</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MyException(<span class=\"string\">\"MyException\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用Postman再次访问该接口<code>localhost:8080/hello?name=Glieen</code>，程序将自定义的异常实体类以json形式返回，包含提示信息和请求地址，同时在控制台输出日志信息，异常被成功捕捉并处理。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzfij9qvgqj30rh0aijrt.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzfimpxulqj31bc04j0t3.jpg\" alt=\"image\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>SpringBoot是如此的高效和简单，在处理全局异常亦是如此，本文只是简单的记录如何捕获程序运行时发生的异常，相信在以后的开发中会用的更加得心应手。</p>"},{"title":"Windows10专业版激活教程","comments":1,"date":"2019-04-02T01:51:50.000Z","_content":"\n笔记本自带的正版系统是Windows10家庭版，因为不满足平时的使用需求，比如远程桌面，组策略什么的，所以就重装了Windows10专业版，但是重装过后就不能自动激活了，所以就从网上找了个靠谱的方法重新激活了系统（正版用不起啊，哭~），这里简单记录下，以后还会用到的。\n\n<!--more-->\n\n话不多说，直接上教程，本方法简单高效，不需要下载什么激活软件，直接执行几条命令即可，激活期间请保持网络连接正常。\n\n1. 以管理员身份打开命令提示符。\n\n2. 执行命令：`slmgr.vbs /upk` \n   弹出窗口提示：已成功卸载了产品密钥。\n\n3. 执行命令：`slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX`\n\n   弹出窗口提示：成功的安装了产品密钥。\n\n4. 执行命令：`slmgr /skms zh.us.to`\n\n   弹出窗口提示：密钥管理服务计算机名成功的设置为zh.us.to。\n\n5. 执行命令：`slmgr /ato`\n\n   弹出窗口提示：成功的激活了产品。\n\n执行完以上操作就大功告成，激活Windows10专业版了。","source":"_posts/Windows10专业版激活教程.md","raw":"---\ntitle: Windows10专业版激活教程\ntags: [Windows,系统]\ncomments: true\ndate: 2019-04-02 09:51:50\ncategories: 教程\n---\n\n笔记本自带的正版系统是Windows10家庭版，因为不满足平时的使用需求，比如远程桌面，组策略什么的，所以就重装了Windows10专业版，但是重装过后就不能自动激活了，所以就从网上找了个靠谱的方法重新激活了系统（正版用不起啊，哭~），这里简单记录下，以后还会用到的。\n\n<!--more-->\n\n话不多说，直接上教程，本方法简单高效，不需要下载什么激活软件，直接执行几条命令即可，激活期间请保持网络连接正常。\n\n1. 以管理员身份打开命令提示符。\n\n2. 执行命令：`slmgr.vbs /upk` \n   弹出窗口提示：已成功卸载了产品密钥。\n\n3. 执行命令：`slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX`\n\n   弹出窗口提示：成功的安装了产品密钥。\n\n4. 执行命令：`slmgr /skms zh.us.to`\n\n   弹出窗口提示：密钥管理服务计算机名成功的设置为zh.us.to。\n\n5. 执行命令：`slmgr /ato`\n\n   弹出窗口提示：成功的激活了产品。\n\n执行完以上操作就大功告成，激活Windows10专业版了。","slug":"Windows10专业版激活教程","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kj000qw2pmbcdf0sos","content":"<p>笔记本自带的正版系统是Windows10家庭版，因为不满足平时的使用需求，比如远程桌面，组策略什么的，所以就重装了Windows10专业版，但是重装过后就不能自动激活了，所以就从网上找了个靠谱的方法重新激活了系统（正版用不起啊，哭~），这里简单记录下，以后还会用到的。</p>\n<a id=\"more\"></a>\n\n<p>话不多说，直接上教程，本方法简单高效，不需要下载什么激活软件，直接执行几条命令即可，激活期间请保持网络连接正常。</p>\n<ol>\n<li><p>以管理员身份打开命令提示符。</p>\n</li>\n<li><p>执行命令：<code>slmgr.vbs /upk</code><br>弹出窗口提示：已成功卸载了产品密钥。</p>\n</li>\n<li><p>执行命令：<code>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</code></p>\n<p>弹出窗口提示：成功的安装了产品密钥。</p>\n</li>\n<li><p>执行命令：<code>slmgr /skms zh.us.to</code></p>\n<p>弹出窗口提示：密钥管理服务计算机名成功的设置为zh.us.to。</p>\n</li>\n<li><p>执行命令：<code>slmgr /ato</code></p>\n<p>弹出窗口提示：成功的激活了产品。</p>\n</li>\n</ol>\n<p>执行完以上操作就大功告成，激活Windows10专业版了。</p>\n","site":{"data":{}},"excerpt":"<p>笔记本自带的正版系统是Windows10家庭版，因为不满足平时的使用需求，比如远程桌面，组策略什么的，所以就重装了Windows10专业版，但是重装过后就不能自动激活了，所以就从网上找了个靠谱的方法重新激活了系统（正版用不起啊，哭~），这里简单记录下，以后还会用到的。</p>","more":"<p>话不多说，直接上教程，本方法简单高效，不需要下载什么激活软件，直接执行几条命令即可，激活期间请保持网络连接正常。</p>\n<ol>\n<li><p>以管理员身份打开命令提示符。</p>\n</li>\n<li><p>执行命令：<code>slmgr.vbs /upk</code><br>弹出窗口提示：已成功卸载了产品密钥。</p>\n</li>\n<li><p>执行命令：<code>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</code></p>\n<p>弹出窗口提示：成功的安装了产品密钥。</p>\n</li>\n<li><p>执行命令：<code>slmgr /skms zh.us.to</code></p>\n<p>弹出窗口提示：密钥管理服务计算机名成功的设置为zh.us.to。</p>\n</li>\n<li><p>执行命令：<code>slmgr /ato</code></p>\n<p>弹出窗口提示：成功的激活了产品。</p>\n</li>\n</ol>\n<p>执行完以上操作就大功告成，激活Windows10专业版了。</p>"},{"title":"Windows10系统安装教程（UEFI+GPT）","comments":1,"date":"2019-01-21T01:35:36.000Z","_content":"\n作为一个程序员，修电脑和装系统是必须要会的（手动狗头），因为总会有朋友来问我怎么重装系统，所以准备写一个教程，以后要是还有人来问我怎么重装，直接把本文链接怼到他脸上（哼哼），本教程使用的是UEFI+GPT安装Windows10。\n\n<!--more-->\n\n### 准备\n\n电脑一台\n\nU盘一个（大小8G及以上）\n\n### 下载镜像\n\n去[官网](https://www.microsoft.com)或者[MSDN](https://msdn.itellyou.cn/)下载原版ISO镜像文件，以MSDN为例，打开链接，在左边导航栏【操作系统】列表中找到想要重装的系统版本，打开镜像列表，选择适合自己的镜像版本，2G以上内存推荐安装64位操作系统，复制ed2k链接，使用迅雷下载镜像文件即可，本教程使用的镜像文件如下：\n\n```\n文件名：cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso\nSHA1：61c07b037574454b88bcac7f5a571c042304c884\n文件大小：4.89GB\n发布时间：2019-01-16\ned2k://|file|cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso|5246148608|D93F5C49291A0B7AA888537954785DC3|/\n```\n\n### 制作启动盘\n\n1. 下载启动盘制作工具Rufus，官网地址：[Rufus](https://rufus.ie/)\n\n2. 插入U盘\n\n3. 打开Rufus，选择设备，通常会自动选定插入的U盘，选择镜像文件，分区类型选择GPT，目标系统类型选择UFEFI，其他设置默认，如图所示：\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5ko8tg2j30bq0g6jrz.jpg)\n\n4. 点击开始，工具即开始制作启动盘，**提醒：制作启动盘会清除U盘中的所有数据，请提前备份！**\n\n5. 进度条跑完后，恭喜你，启动盘制作成功了！关闭Rufus，准备重装系统吧。\n\n### 从启动盘启动\n\n启动盘制作完毕后，不要拔出U盘，然后重启电脑，进入BIOS，各个品牌的主板（笔记本）进入BIOS的按键不一致，通常台式机是`Delete`，笔记本是`Esc`，`F2`，`F10`之类的，如果不对请查看主板（笔记本）说明书或者百度解决。\n\n以下我以我手头的笔记本电脑**神舟战神K650D**举例，通常大多数电脑设置基本都是一致的，不会有很大的差别，具体的BIOS设置请百度自己的电脑主板或笔记本型号。\n\n1. 关闭安全启动，进入BIOS，找到Secure Boot选项，将其设置为关闭；\n\n   ![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kojgmaj31770ku1iu.jpg)\n\n2. 开启UEFI模式，在BIOS中找到Boot下的UEFI设置，将其设置为打开；\n\n   ![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5koya3tj315x0jcb1f.jpg)\n\n3. 将U盘设置为第一启动项，U盘是以UEFI开头的就对了，把它移动到第一的位置；\n\n   ![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kpbgu4j316s0ks4qp.jpg)\n\n4. 保存设置并重启电脑。\n\n### 系统安装\n\n1. 如果上面的步骤都没有问题的话，那电脑重启应该可以进入到Win PE的安装界面了，像下面这样。\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kprckfj31530n64qp.jpg)\n\n2. 点击下一步开始安装\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kq7sayj313w0mfb29.jpg)\n\n3. 点击现在安装，进入到激活\n\n   ![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5kqq9ppj312s0ma7wh.jpg)\n\n4. 这里选择我没有产品密钥，装完系统之后再进行激活（KMS你懂的），进入操作系统版本选择\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kr5t7qj312e0lfkjl.jpg)\n\n5. 这里我选择家庭版为例，然后单击下一步，进入许可条款\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5krm6a1j31160k47wh.jpg)\n\n6. 我接受许可条款打勾，单击下一步，进入安装选项\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5ks27j4j30yp0js4qp.jpg)\n\n7. 因为是安装全新的系统，所以这里选择自定义，进入安装磁盘选择\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kshan5j311h0l2x6p.jpg)\n\n8. 到这里是最容易遇到问题的地方了，可能遇到所选磁盘不是GPT格式的分区，磁盘容量大小不足等等问题，只要你以上步骤都正确操作，硬盘是没有问题且大小合适的，那么接下来一系列步骤应该能解决大多数安装遇到的问题，按下键盘上的`Shift+F10`打开命令提示行\n\n   ![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5ksy7npj31720mue81.jpg)\n\n9. 根据提示输入以下的代码\n\n   ```powershell\n   # 打开磁盘工具\n   diskpart\n   # 列出硬盘\n   list disk\n   # 选择操作的硬盘，这里X是硬盘里的编号，你需要把系统装到哪个硬盘你就输入对应硬盘的编号\n   select disk X\n   # 清除硬盘，这个操作会将整个硬盘的内容全部清除，如果有重要数据请一定提前备份\n   clean\n   # 将硬盘装换成GPT分区格式\n   convert gpt\n   # 创建EFI分区，用来存放系统的引导文件，大小256M左右差不多够了\n   create partition efi size = 256\n   # 创建主分区，这是第一个主分区，我喜欢把系统装在这个分区里面，大小的话通常大于50G，因为我不喜欢在C盘放过多的文件和装软件，我这里分了50G\n   create partition primary size = 51200\n   # 创建主分区，这里省略了大小设置，就是默认将剩下的所有容量分到这个区，我喜欢把第二个分区用作D盘，装一些软件\n   create partition primary\n   ```\n\n   下面是具体的操作过程截图，**慎重操作，注意备份数据**\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kmifgcj30xc0orhdt.jpg)\n\n   操作完成之后右上角叉叉或者输入命令`exit`退出命令行\n\n10. 再次回到安装磁盘选择，点击刷新，就可以看到重新分区后的磁盘列表了\n\n    ![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5kmz9xlj314z0n84qq.jpg)\n\n11. 选择为系统准备的分区，如图，我会选择`驱动器1分区2`然后单击下一步，系统开始安装，即将大功告成\n\n    ![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5knjkswj31800oekjl.jpg)\n\n12. 等待进度条读完，然后会提示重启系统完成安装，点击重启就可以了，**重启的时候记得把U盘给拔下来**，系统可能会重启多次，重启完成之后会进入系统的启动设置，这些都是一些基础的设置，设置完成后就能进入系统\n\n    ![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5knxosxj31hc0u04qp.jpg)\n\n13. 开始体验全新的Windows 10吧！！！\n\n### 总结\n\n遇到问题不要灰心，不要畏惧，善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！重要的事说三遍！！！\n","source":"_posts/Windows10系统安装教程（UEFI+GPT）.md","raw":"---\ntitle: Windows10系统安装教程（UEFI+GPT）\ntags: [Windows,系统]\ncomments: true\ndate: 2019-01-21 09:35:36\ncategories: 教程\n---\n\n作为一个程序员，修电脑和装系统是必须要会的（手动狗头），因为总会有朋友来问我怎么重装系统，所以准备写一个教程，以后要是还有人来问我怎么重装，直接把本文链接怼到他脸上（哼哼），本教程使用的是UEFI+GPT安装Windows10。\n\n<!--more-->\n\n### 准备\n\n电脑一台\n\nU盘一个（大小8G及以上）\n\n### 下载镜像\n\n去[官网](https://www.microsoft.com)或者[MSDN](https://msdn.itellyou.cn/)下载原版ISO镜像文件，以MSDN为例，打开链接，在左边导航栏【操作系统】列表中找到想要重装的系统版本，打开镜像列表，选择适合自己的镜像版本，2G以上内存推荐安装64位操作系统，复制ed2k链接，使用迅雷下载镜像文件即可，本教程使用的镜像文件如下：\n\n```\n文件名：cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso\nSHA1：61c07b037574454b88bcac7f5a571c042304c884\n文件大小：4.89GB\n发布时间：2019-01-16\ned2k://|file|cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso|5246148608|D93F5C49291A0B7AA888537954785DC3|/\n```\n\n### 制作启动盘\n\n1. 下载启动盘制作工具Rufus，官网地址：[Rufus](https://rufus.ie/)\n\n2. 插入U盘\n\n3. 打开Rufus，选择设备，通常会自动选定插入的U盘，选择镜像文件，分区类型选择GPT，目标系统类型选择UFEFI，其他设置默认，如图所示：\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5ko8tg2j30bq0g6jrz.jpg)\n\n4. 点击开始，工具即开始制作启动盘，**提醒：制作启动盘会清除U盘中的所有数据，请提前备份！**\n\n5. 进度条跑完后，恭喜你，启动盘制作成功了！关闭Rufus，准备重装系统吧。\n\n### 从启动盘启动\n\n启动盘制作完毕后，不要拔出U盘，然后重启电脑，进入BIOS，各个品牌的主板（笔记本）进入BIOS的按键不一致，通常台式机是`Delete`，笔记本是`Esc`，`F2`，`F10`之类的，如果不对请查看主板（笔记本）说明书或者百度解决。\n\n以下我以我手头的笔记本电脑**神舟战神K650D**举例，通常大多数电脑设置基本都是一致的，不会有很大的差别，具体的BIOS设置请百度自己的电脑主板或笔记本型号。\n\n1. 关闭安全启动，进入BIOS，找到Secure Boot选项，将其设置为关闭；\n\n   ![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kojgmaj31770ku1iu.jpg)\n\n2. 开启UEFI模式，在BIOS中找到Boot下的UEFI设置，将其设置为打开；\n\n   ![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5koya3tj315x0jcb1f.jpg)\n\n3. 将U盘设置为第一启动项，U盘是以UEFI开头的就对了，把它移动到第一的位置；\n\n   ![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kpbgu4j316s0ks4qp.jpg)\n\n4. 保存设置并重启电脑。\n\n### 系统安装\n\n1. 如果上面的步骤都没有问题的话，那电脑重启应该可以进入到Win PE的安装界面了，像下面这样。\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kprckfj31530n64qp.jpg)\n\n2. 点击下一步开始安装\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kq7sayj313w0mfb29.jpg)\n\n3. 点击现在安装，进入到激活\n\n   ![image](https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5kqq9ppj312s0ma7wh.jpg)\n\n4. 这里选择我没有产品密钥，装完系统之后再进行激活（KMS你懂的），进入操作系统版本选择\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kr5t7qj312e0lfkjl.jpg)\n\n5. 这里我选择家庭版为例，然后单击下一步，进入许可条款\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5krm6a1j31160k47wh.jpg)\n\n6. 我接受许可条款打勾，单击下一步，进入安装选项\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5ks27j4j30yp0js4qp.jpg)\n\n7. 因为是安装全新的系统，所以这里选择自定义，进入安装磁盘选择\n\n   ![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kshan5j311h0l2x6p.jpg)\n\n8. 到这里是最容易遇到问题的地方了，可能遇到所选磁盘不是GPT格式的分区，磁盘容量大小不足等等问题，只要你以上步骤都正确操作，硬盘是没有问题且大小合适的，那么接下来一系列步骤应该能解决大多数安装遇到的问题，按下键盘上的`Shift+F10`打开命令提示行\n\n   ![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5ksy7npj31720mue81.jpg)\n\n9. 根据提示输入以下的代码\n\n   ```powershell\n   # 打开磁盘工具\n   diskpart\n   # 列出硬盘\n   list disk\n   # 选择操作的硬盘，这里X是硬盘里的编号，你需要把系统装到哪个硬盘你就输入对应硬盘的编号\n   select disk X\n   # 清除硬盘，这个操作会将整个硬盘的内容全部清除，如果有重要数据请一定提前备份\n   clean\n   # 将硬盘装换成GPT分区格式\n   convert gpt\n   # 创建EFI分区，用来存放系统的引导文件，大小256M左右差不多够了\n   create partition efi size = 256\n   # 创建主分区，这是第一个主分区，我喜欢把系统装在这个分区里面，大小的话通常大于50G，因为我不喜欢在C盘放过多的文件和装软件，我这里分了50G\n   create partition primary size = 51200\n   # 创建主分区，这里省略了大小设置，就是默认将剩下的所有容量分到这个区，我喜欢把第二个分区用作D盘，装一些软件\n   create partition primary\n   ```\n\n   下面是具体的操作过程截图，**慎重操作，注意备份数据**\n\n   ![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kmifgcj30xc0orhdt.jpg)\n\n   操作完成之后右上角叉叉或者输入命令`exit`退出命令行\n\n10. 再次回到安装磁盘选择，点击刷新，就可以看到重新分区后的磁盘列表了\n\n    ![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5kmz9xlj314z0n84qq.jpg)\n\n11. 选择为系统准备的分区，如图，我会选择`驱动器1分区2`然后单击下一步，系统开始安装，即将大功告成\n\n    ![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5knjkswj31800oekjl.jpg)\n\n12. 等待进度条读完，然后会提示重启系统完成安装，点击重启就可以了，**重启的时候记得把U盘给拔下来**，系统可能会重启多次，重启完成之后会进入系统的启动设置，这些都是一些基础的设置，设置完成后就能进入系统\n\n    ![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5knxosxj31hc0u04qp.jpg)\n\n13. 开始体验全新的Windows 10吧！！！\n\n### 总结\n\n遇到问题不要灰心，不要畏惧，善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！重要的事说三遍！！！\n","slug":"Windows10系统安装教程（UEFI+GPT）","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kl000uw2pmfall42fx","content":"<p>作为一个程序员，修电脑和装系统是必须要会的（手动狗头），因为总会有朋友来问我怎么重装系统，所以准备写一个教程，以后要是还有人来问我怎么重装，直接把本文链接怼到他脸上（哼哼），本教程使用的是UEFI+GPT安装Windows10。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>电脑一台</p>\n<p>U盘一个（大小8G及以上）</p>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><p>去<a href=\"https://www.microsoft.com\" target=\"_blank\" rel=\"noopener\">官网</a>或者<a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">MSDN</a>下载原版ISO镜像文件，以MSDN为例，打开链接，在左边导航栏【操作系统】列表中找到想要重装的系统版本，打开镜像列表，选择适合自己的镜像版本，2G以上内存推荐安装64位操作系统，复制ed2k链接，使用迅雷下载镜像文件即可，本教程使用的镜像文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件名：cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso</span><br><span class=\"line\">SHA1：61c07b037574454b88bcac7f5a571c042304c884</span><br><span class=\"line\">文件大小：4.89GB</span><br><span class=\"line\">发布时间：2019-01-16</span><br><span class=\"line\">ed2k:&#x2F;&#x2F;|file|cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso|5246148608|D93F5C49291A0B7AA888537954785DC3|&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h3><ol>\n<li><p>下载启动盘制作工具Rufus，官网地址：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">Rufus</a></p>\n</li>\n<li><p>插入U盘</p>\n</li>\n<li><p>打开Rufus，选择设备，通常会自动选定插入的U盘，选择镜像文件，分区类型选择GPT，目标系统类型选择UFEFI，其他设置默认，如图所示：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5ko8tg2j30bq0g6jrz.jpg\" alt=\"image\"></p>\n</li>\n<li><p>点击开始，工具即开始制作启动盘，<strong>提醒：制作启动盘会清除U盘中的所有数据，请提前备份！</strong></p>\n</li>\n<li><p>进度条跑完后，恭喜你，启动盘制作成功了！关闭Rufus，准备重装系统吧。</p>\n</li>\n</ol>\n<h3 id=\"从启动盘启动\"><a href=\"#从启动盘启动\" class=\"headerlink\" title=\"从启动盘启动\"></a>从启动盘启动</h3><p>启动盘制作完毕后，不要拔出U盘，然后重启电脑，进入BIOS，各个品牌的主板（笔记本）进入BIOS的按键不一致，通常台式机是<code>Delete</code>，笔记本是<code>Esc</code>，<code>F2</code>，<code>F10</code>之类的，如果不对请查看主板（笔记本）说明书或者百度解决。</p>\n<p>以下我以我手头的笔记本电脑<strong>神舟战神K650D</strong>举例，通常大多数电脑设置基本都是一致的，不会有很大的差别，具体的BIOS设置请百度自己的电脑主板或笔记本型号。</p>\n<ol>\n<li><p>关闭安全启动，进入BIOS，找到Secure Boot选项，将其设置为关闭；</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kojgmaj31770ku1iu.jpg\" alt=\"image\"></p>\n</li>\n<li><p>开启UEFI模式，在BIOS中找到Boot下的UEFI设置，将其设置为打开；</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5koya3tj315x0jcb1f.jpg\" alt=\"image\"></p>\n</li>\n<li><p>将U盘设置为第一启动项，U盘是以UEFI开头的就对了，把它移动到第一的位置；</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kpbgu4j316s0ks4qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>保存设置并重启电脑。</p>\n</li>\n</ol>\n<h3 id=\"系统安装\"><a href=\"#系统安装\" class=\"headerlink\" title=\"系统安装\"></a>系统安装</h3><ol>\n<li><p>如果上面的步骤都没有问题的话，那电脑重启应该可以进入到Win PE的安装界面了，像下面这样。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kprckfj31530n64qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>点击下一步开始安装</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kq7sayj313w0mfb29.jpg\" alt=\"image\"></p>\n</li>\n<li><p>点击现在安装，进入到激活</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5kqq9ppj312s0ma7wh.jpg\" alt=\"image\"></p>\n</li>\n<li><p>这里选择我没有产品密钥，装完系统之后再进行激活（KMS你懂的），进入操作系统版本选择</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kr5t7qj312e0lfkjl.jpg\" alt=\"image\"></p>\n</li>\n<li><p>这里我选择家庭版为例，然后单击下一步，进入许可条款</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5krm6a1j31160k47wh.jpg\" alt=\"image\"></p>\n</li>\n<li><p>我接受许可条款打勾，单击下一步，进入安装选项</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5ks27j4j30yp0js4qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>因为是安装全新的系统，所以这里选择自定义，进入安装磁盘选择</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kshan5j311h0l2x6p.jpg\" alt=\"image\"></p>\n</li>\n<li><p>到这里是最容易遇到问题的地方了，可能遇到所选磁盘不是GPT格式的分区，磁盘容量大小不足等等问题，只要你以上步骤都正确操作，硬盘是没有问题且大小合适的，那么接下来一系列步骤应该能解决大多数安装遇到的问题，按下键盘上的<code>Shift+F10</code>打开命令提示行</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5ksy7npj31720mue81.jpg\" alt=\"image\"></p>\n</li>\n<li><p>根据提示输入以下的代码</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开磁盘工具</span></span><br><span class=\"line\">diskpart</span><br><span class=\"line\"><span class=\"comment\"># 列出硬盘</span></span><br><span class=\"line\">list disk</span><br><span class=\"line\"><span class=\"comment\"># 选择操作的硬盘，这里X是硬盘里的编号，你需要把系统装到哪个硬盘你就输入对应硬盘的编号</span></span><br><span class=\"line\">select disk X</span><br><span class=\"line\"><span class=\"comment\"># 清除硬盘，这个操作会将整个硬盘的内容全部清除，如果有重要数据请一定提前备份</span></span><br><span class=\"line\">clean</span><br><span class=\"line\"><span class=\"comment\"># 将硬盘装换成GPT分区格式</span></span><br><span class=\"line\">convert gpt</span><br><span class=\"line\"><span class=\"comment\"># 创建EFI分区，用来存放系统的引导文件，大小256M左右差不多够了</span></span><br><span class=\"line\">create partition efi size = <span class=\"number\">256</span></span><br><span class=\"line\"><span class=\"comment\"># 创建主分区，这是第一个主分区，我喜欢把系统装在这个分区里面，大小的话通常大于50G，因为我不喜欢在C盘放过多的文件和装软件，我这里分了50G</span></span><br><span class=\"line\">create partition primary size = <span class=\"number\">51200</span></span><br><span class=\"line\"><span class=\"comment\"># 创建主分区，这里省略了大小设置，就是默认将剩下的所有容量分到这个区，我喜欢把第二个分区用作D盘，装一些软件</span></span><br><span class=\"line\">create partition primary</span><br></pre></td></tr></table></figure>\n\n<p>下面是具体的操作过程截图，<strong>慎重操作，注意备份数据</strong></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kmifgcj30xc0orhdt.jpg\" alt=\"image\"></p>\n<p>操作完成之后右上角叉叉或者输入命令<code>exit</code>退出命令行</p>\n</li>\n<li><p>再次回到安装磁盘选择，点击刷新，就可以看到重新分区后的磁盘列表了</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5kmz9xlj314z0n84qq.jpg\" alt=\"image\"></p>\n</li>\n<li><p>选择为系统准备的分区，如图，我会选择<code>驱动器1分区2</code>然后单击下一步，系统开始安装，即将大功告成</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5knjkswj31800oekjl.jpg\" alt=\"image\"></p>\n</li>\n<li><p>等待进度条读完，然后会提示重启系统完成安装，点击重启就可以了，<strong>重启的时候记得把U盘给拔下来</strong>，系统可能会重启多次，重启完成之后会进入系统的启动设置，这些都是一些基础的设置，设置完成后就能进入系统</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5knxosxj31hc0u04qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>开始体验全新的Windows 10吧！！！</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>遇到问题不要灰心，不要畏惧，善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！重要的事说三遍！！！</p>\n","site":{"data":{}},"excerpt":"<p>作为一个程序员，修电脑和装系统是必须要会的（手动狗头），因为总会有朋友来问我怎么重装系统，所以准备写一个教程，以后要是还有人来问我怎么重装，直接把本文链接怼到他脸上（哼哼），本教程使用的是UEFI+GPT安装Windows10。</p>","more":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>电脑一台</p>\n<p>U盘一个（大小8G及以上）</p>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><p>去<a href=\"https://www.microsoft.com\" target=\"_blank\" rel=\"noopener\">官网</a>或者<a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">MSDN</a>下载原版ISO镜像文件，以MSDN为例，打开链接，在左边导航栏【操作系统】列表中找到想要重装的系统版本，打开镜像列表，选择适合自己的镜像版本，2G以上内存推荐安装64位操作系统，复制ed2k链接，使用迅雷下载镜像文件即可，本教程使用的镜像文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件名：cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso</span><br><span class=\"line\">SHA1：61c07b037574454b88bcac7f5a571c042304c884</span><br><span class=\"line\">文件大小：4.89GB</span><br><span class=\"line\">发布时间：2019-01-16</span><br><span class=\"line\">ed2k:&#x2F;&#x2F;|file|cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso|5246148608|D93F5C49291A0B7AA888537954785DC3|&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h3><ol>\n<li><p>下载启动盘制作工具Rufus，官网地址：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">Rufus</a></p>\n</li>\n<li><p>插入U盘</p>\n</li>\n<li><p>打开Rufus，选择设备，通常会自动选定插入的U盘，选择镜像文件，分区类型选择GPT，目标系统类型选择UFEFI，其他设置默认，如图所示：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5ko8tg2j30bq0g6jrz.jpg\" alt=\"image\"></p>\n</li>\n<li><p>点击开始，工具即开始制作启动盘，<strong>提醒：制作启动盘会清除U盘中的所有数据，请提前备份！</strong></p>\n</li>\n<li><p>进度条跑完后，恭喜你，启动盘制作成功了！关闭Rufus，准备重装系统吧。</p>\n</li>\n</ol>\n<h3 id=\"从启动盘启动\"><a href=\"#从启动盘启动\" class=\"headerlink\" title=\"从启动盘启动\"></a>从启动盘启动</h3><p>启动盘制作完毕后，不要拔出U盘，然后重启电脑，进入BIOS，各个品牌的主板（笔记本）进入BIOS的按键不一致，通常台式机是<code>Delete</code>，笔记本是<code>Esc</code>，<code>F2</code>，<code>F10</code>之类的，如果不对请查看主板（笔记本）说明书或者百度解决。</p>\n<p>以下我以我手头的笔记本电脑<strong>神舟战神K650D</strong>举例，通常大多数电脑设置基本都是一致的，不会有很大的差别，具体的BIOS设置请百度自己的电脑主板或笔记本型号。</p>\n<ol>\n<li><p>关闭安全启动，进入BIOS，找到Secure Boot选项，将其设置为关闭；</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kojgmaj31770ku1iu.jpg\" alt=\"image\"></p>\n</li>\n<li><p>开启UEFI模式，在BIOS中找到Boot下的UEFI设置，将其设置为打开；</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5koya3tj315x0jcb1f.jpg\" alt=\"image\"></p>\n</li>\n<li><p>将U盘设置为第一启动项，U盘是以UEFI开头的就对了，把它移动到第一的位置；</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5kpbgu4j316s0ks4qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>保存设置并重启电脑。</p>\n</li>\n</ol>\n<h3 id=\"系统安装\"><a href=\"#系统安装\" class=\"headerlink\" title=\"系统安装\"></a>系统安装</h3><ol>\n<li><p>如果上面的步骤都没有问题的话，那电脑重启应该可以进入到Win PE的安装界面了，像下面这样。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kprckfj31530n64qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>点击下一步开始安装</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kq7sayj313w0mfb29.jpg\" alt=\"image\"></p>\n</li>\n<li><p>点击现在安装，进入到激活</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1fzf5kqq9ppj312s0ma7wh.jpg\" alt=\"image\"></p>\n</li>\n<li><p>这里选择我没有产品密钥，装完系统之后再进行激活（KMS你懂的），进入操作系统版本选择</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kr5t7qj312e0lfkjl.jpg\" alt=\"image\"></p>\n</li>\n<li><p>这里我选择家庭版为例，然后单击下一步，进入许可条款</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5krm6a1j31160k47wh.jpg\" alt=\"image\"></p>\n</li>\n<li><p>我接受许可条款打勾，单击下一步，进入安装选项</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5ks27j4j30yp0js4qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>因为是安装全新的系统，所以这里选择自定义，进入安装磁盘选择</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5kshan5j311h0l2x6p.jpg\" alt=\"image\"></p>\n</li>\n<li><p>到这里是最容易遇到问题的地方了，可能遇到所选磁盘不是GPT格式的分区，磁盘容量大小不足等等问题，只要你以上步骤都正确操作，硬盘是没有问题且大小合适的，那么接下来一系列步骤应该能解决大多数安装遇到的问题，按下键盘上的<code>Shift+F10</code>打开命令提示行</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5ksy7npj31720mue81.jpg\" alt=\"image\"></p>\n</li>\n<li><p>根据提示输入以下的代码</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开磁盘工具</span></span><br><span class=\"line\">diskpart</span><br><span class=\"line\"><span class=\"comment\"># 列出硬盘</span></span><br><span class=\"line\">list disk</span><br><span class=\"line\"><span class=\"comment\"># 选择操作的硬盘，这里X是硬盘里的编号，你需要把系统装到哪个硬盘你就输入对应硬盘的编号</span></span><br><span class=\"line\">select disk X</span><br><span class=\"line\"><span class=\"comment\"># 清除硬盘，这个操作会将整个硬盘的内容全部清除，如果有重要数据请一定提前备份</span></span><br><span class=\"line\">clean</span><br><span class=\"line\"><span class=\"comment\"># 将硬盘装换成GPT分区格式</span></span><br><span class=\"line\">convert gpt</span><br><span class=\"line\"><span class=\"comment\"># 创建EFI分区，用来存放系统的引导文件，大小256M左右差不多够了</span></span><br><span class=\"line\">create partition efi size = <span class=\"number\">256</span></span><br><span class=\"line\"><span class=\"comment\"># 创建主分区，这是第一个主分区，我喜欢把系统装在这个分区里面，大小的话通常大于50G，因为我不喜欢在C盘放过多的文件和装软件，我这里分了50G</span></span><br><span class=\"line\">create partition primary size = <span class=\"number\">51200</span></span><br><span class=\"line\"><span class=\"comment\"># 创建主分区，这里省略了大小设置，就是默认将剩下的所有容量分到这个区，我喜欢把第二个分区用作D盘，装一些软件</span></span><br><span class=\"line\">create partition primary</span><br></pre></td></tr></table></figure>\n\n<p>下面是具体的操作过程截图，<strong>慎重操作，注意备份数据</strong></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5kmifgcj30xc0orhdt.jpg\" alt=\"image\"></p>\n<p>操作完成之后右上角叉叉或者输入命令<code>exit</code>退出命令行</p>\n</li>\n<li><p>再次回到安装磁盘选择，点击刷新，就可以看到重新分区后的磁盘列表了</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5kmz9xlj314z0n84qq.jpg\" alt=\"image\"></p>\n</li>\n<li><p>选择为系统准备的分区，如图，我会选择<code>驱动器1分区2</code>然后单击下一步，系统开始安装，即将大功告成</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5knjkswj31800oekjl.jpg\" alt=\"image\"></p>\n</li>\n<li><p>等待进度条读完，然后会提示重启系统完成安装，点击重启就可以了，<strong>重启的时候记得把U盘给拔下来</strong>，系统可能会重启多次，重启完成之后会进入系统的启动设置，这些都是一些基础的设置，设置完成后就能进入系统</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5knxosxj31hc0u04qp.jpg\" alt=\"image\"></p>\n</li>\n<li><p>开始体验全新的Windows 10吧！！！</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>遇到问题不要灰心，不要畏惧，善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！善于利用百度/谷歌等搜索引擎！！！重要的事说三遍！！！</p>"},{"title":"javap的基本用法","comments":1,"date":"2019-01-17T07:38:27.000Z","_content":"\n有时候需要深入了解类的运行方式和流程，或者查看一个类中的属性成员，我们可以使用反编译来进行查看，JDK自带了一个反编译工具javap，可以反编译，也可以查看Java编译器生成的字节码，用于分解class文件，本文简单介绍一下javap的基本方法。\n\n<!--more-->\n\n### javap命令参数\n\n在控制台输入`javap -help`查看javap的命令用法以及参数\n\n```powershell\nC:\\Windows\\system32>javap -help\n用法: javap <options> <classes>\n其中, 可能的选项包括:\n  -help  --help  -?        输出此用法消息\n  -version                 版本信息\n  -v  -verbose             输出附加信息\n  -l                       输出行号和本地变量表\n  -public                  仅显示公共类和成员\n  -protected               显示受保护的/公共类和成员\n  -package                 显示程序包/受保护的/公共类\n                           和成员 (默认)\n  -p  -private             显示所有类和成员\n  -c                       对代码进行反汇编\n  -s                       输出内部类型签名\n  -sysinfo                 显示正在处理的类的\n                           系统信息 (路径, 大小, 日期, MD5 散列)\n  -constants               显示最终常量\n  -classpath <path>        指定查找用户类文件的位置\n  -cp <path>               指定查找用户类文件的位置\n  -bootclasspath <path>    覆盖引导类文件的位置\n```\n\n### 实际使用\n\n#### 测试类\n\n```java\npublic class Test {\n    public int a = 1;\n    private int b = 2;\n    public final int c = 3;\n    public static int D = 4;\n    public Integer e = 5;\n    int f = 6;\n    protected int g =7;\n\n    public void method1() {\n    }\n\n    private void method2() {\n    }\n\n    public int method3() {\n        return 0;\n    }\n}\n```\n\n#### javap -p\n\n```powershell\nC:\\Users\\Glieen\\Desktop> javap -p Test.class\nCompiled from \"Test.java\"\npublic class Test {\n  public int a;\n  private int b;\n  public final int c;\n  public static int D;\n  public java.lang.Integer e;\n  int f;\n  protected int g;\n  public Test();\n  public void method1();\n  private void method2();\n  public int method3();\n  static {};\n}\n```\n\n默认执行javap只能查看到公开和包级别的成员变量，使用`javap -p`可以查看类中所有的成员变量。\n\n#### javap -v -p\n\n```powershell\nC:\\Users\\Glieen\\Desktop> javap -v -p .\\Test.class\nClassfile /C:/Users/Glieen/Desktop/Test.class\n  Last modified 2019-1-17; size 726 bytes\n  MD5 checksum eb60967015bd6e02e460a5bf462e8c5a\n  Compiled from \"Test.java\"\npublic class Test\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #11.#34        // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #10.#35        // Test.a:I\n   #3 = Fieldref           #10.#36        // Test.b:I\n   #4 = Fieldref           #10.#37        // Test.c:I\n   #5 = Methodref          #38.#39        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n   #6 = Fieldref           #10.#40        // Test.e:Ljava/lang/Integer;\n   #7 = Fieldref           #10.#41        // Test.f:I\n   #8 = Fieldref           #10.#42        // Test.g:I\n   #9 = Fieldref           #10.#43        // Test.D:I\n  #10 = Class              #44            // Test\n  #11 = Class              #45            // java/lang/Object\n  #12 = Utf8               a\n  #13 = Utf8               I\n  #14 = Utf8               b\n  #15 = Utf8               c\n  #16 = Utf8               ConstantValue\n  #17 = Integer            3\n  #18 = Utf8               D\n  #19 = Utf8               e\n  #20 = Utf8               Ljava/lang/Integer;\n  #21 = Utf8               f\n  #22 = Utf8               g\n  #23 = Utf8               <init>\n  #24 = Utf8               ()V\n  #25 = Utf8               Code\n  #26 = Utf8               LineNumberTable\n  #27 = Utf8               method1\n  #28 = Utf8               method2\n  #29 = Utf8               method3\n  #30 = Utf8               ()I\n  #31 = Utf8               <clinit>\n  #32 = Utf8               SourceFile\n  #33 = Utf8               Test.java\n  #34 = NameAndType        #23:#24        // \"<init>\":()V\n  #35 = NameAndType        #12:#13        // a:I\n  #36 = NameAndType        #14:#13        // b:I\n  #37 = NameAndType        #15:#13        // c:I\n  #38 = Class              #46            // java/lang/Integer\n  #39 = NameAndType        #47:#48        // valueOf:(I)Ljava/lang/Integer;\n  #40 = NameAndType        #19:#20        // e:Ljava/lang/Integer;\n  #41 = NameAndType        #21:#13        // f:I\n  #42 = NameAndType        #22:#13        // g:I\n  #43 = NameAndType        #18:#13        // D:I\n  #44 = Utf8               Test\n  #45 = Utf8               java/lang/Object\n  #46 = Utf8               java/lang/Integer\n  #47 = Utf8               valueOf\n  #48 = Utf8               (I)Ljava/lang/Integer;\n{\n  public int a;\n    descriptor: I\n    flags: ACC_PUBLIC\n\n  private int b;\n    descriptor: I\n    flags: ACC_PRIVATE\n\n  public final int c;\n    descriptor: I\n    flags: ACC_PUBLIC, ACC_FINAL\n    ConstantValue: int 3\n\n  public static int D;\n    descriptor: I\n    flags: ACC_PUBLIC, ACC_STATIC\n\n  public java.lang.Integer e;\n    descriptor: Ljava/lang/Integer;\n    flags: ACC_PUBLIC\n\n  int f;\n    descriptor: I\n    flags:\n\n  protected int g;\n    descriptor: I\n    flags: ACC_PROTECTED\n\n  public Test();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: aload_0\n         5: iconst_1\n         6: putfield      #2                  // Field a:I\n         9: aload_0\n        10: iconst_2\n        11: putfield      #3                  // Field b:I\n        14: aload_0\n        15: iconst_3\n        16: putfield      #4                  // Field c:I\n        19: aload_0\n        20: iconst_5\n        21: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n        24: putfield      #6                  // Field e:Ljava/lang/Integer;\n        27: aload_0\n        28: bipush        6\n        30: putfield      #7                  // Field f:I\n        33: aload_0\n        34: bipush        7\n        36: putfield      #8                  // Field g:I\n        39: return\n      LineNumberTable:\n        line 1: 0\n        line 2: 4\n        line 3: 9\n        line 4: 14\n        line 6: 19\n        line 7: 27\n        line 8: 33\n\n  public void method1();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 11: 0\n\n  private void method2();\n    descriptor: ()V\n    flags: ACC_PRIVATE\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 14: 0\n\n  public int method3();\n    descriptor: ()I\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: iconst_0\n         1: ireturn\n      LineNumberTable:\n        line 17: 0\n\n  static {};\n    descriptor: ()V\n    flags: ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: iconst_4\n         1: putstatic     #9                  // Field D:I\n         4: return\n      LineNumberTable:\n        line 5: 0\n}\nSourceFile: \"Test.java\"\n```\n\n可以查看到类中所有的成员变量以及字节码，通过分析字节码和类中的常量池，就能对类有一个更加深入的了解。\n\n### 总结\n\n本文只是记录一下javap的简单用法，学会使用javap可以在深入理解Java基础和了解JVM时提供更大的助力，有时候遇到一些奇奇怪怪的问题，用javap反编译看一下字节码将会得到不一样的收获。","source":"_posts/javap的基本用法.md","raw":"---\ntitle: javap的基本用法\ntags: [javap]\ncomments: true\ndate: 2019-01-17 15:38:27\ncategories: JVM\n---\n\n有时候需要深入了解类的运行方式和流程，或者查看一个类中的属性成员，我们可以使用反编译来进行查看，JDK自带了一个反编译工具javap，可以反编译，也可以查看Java编译器生成的字节码，用于分解class文件，本文简单介绍一下javap的基本方法。\n\n<!--more-->\n\n### javap命令参数\n\n在控制台输入`javap -help`查看javap的命令用法以及参数\n\n```powershell\nC:\\Windows\\system32>javap -help\n用法: javap <options> <classes>\n其中, 可能的选项包括:\n  -help  --help  -?        输出此用法消息\n  -version                 版本信息\n  -v  -verbose             输出附加信息\n  -l                       输出行号和本地变量表\n  -public                  仅显示公共类和成员\n  -protected               显示受保护的/公共类和成员\n  -package                 显示程序包/受保护的/公共类\n                           和成员 (默认)\n  -p  -private             显示所有类和成员\n  -c                       对代码进行反汇编\n  -s                       输出内部类型签名\n  -sysinfo                 显示正在处理的类的\n                           系统信息 (路径, 大小, 日期, MD5 散列)\n  -constants               显示最终常量\n  -classpath <path>        指定查找用户类文件的位置\n  -cp <path>               指定查找用户类文件的位置\n  -bootclasspath <path>    覆盖引导类文件的位置\n```\n\n### 实际使用\n\n#### 测试类\n\n```java\npublic class Test {\n    public int a = 1;\n    private int b = 2;\n    public final int c = 3;\n    public static int D = 4;\n    public Integer e = 5;\n    int f = 6;\n    protected int g =7;\n\n    public void method1() {\n    }\n\n    private void method2() {\n    }\n\n    public int method3() {\n        return 0;\n    }\n}\n```\n\n#### javap -p\n\n```powershell\nC:\\Users\\Glieen\\Desktop> javap -p Test.class\nCompiled from \"Test.java\"\npublic class Test {\n  public int a;\n  private int b;\n  public final int c;\n  public static int D;\n  public java.lang.Integer e;\n  int f;\n  protected int g;\n  public Test();\n  public void method1();\n  private void method2();\n  public int method3();\n  static {};\n}\n```\n\n默认执行javap只能查看到公开和包级别的成员变量，使用`javap -p`可以查看类中所有的成员变量。\n\n#### javap -v -p\n\n```powershell\nC:\\Users\\Glieen\\Desktop> javap -v -p .\\Test.class\nClassfile /C:/Users/Glieen/Desktop/Test.class\n  Last modified 2019-1-17; size 726 bytes\n  MD5 checksum eb60967015bd6e02e460a5bf462e8c5a\n  Compiled from \"Test.java\"\npublic class Test\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #11.#34        // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #10.#35        // Test.a:I\n   #3 = Fieldref           #10.#36        // Test.b:I\n   #4 = Fieldref           #10.#37        // Test.c:I\n   #5 = Methodref          #38.#39        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n   #6 = Fieldref           #10.#40        // Test.e:Ljava/lang/Integer;\n   #7 = Fieldref           #10.#41        // Test.f:I\n   #8 = Fieldref           #10.#42        // Test.g:I\n   #9 = Fieldref           #10.#43        // Test.D:I\n  #10 = Class              #44            // Test\n  #11 = Class              #45            // java/lang/Object\n  #12 = Utf8               a\n  #13 = Utf8               I\n  #14 = Utf8               b\n  #15 = Utf8               c\n  #16 = Utf8               ConstantValue\n  #17 = Integer            3\n  #18 = Utf8               D\n  #19 = Utf8               e\n  #20 = Utf8               Ljava/lang/Integer;\n  #21 = Utf8               f\n  #22 = Utf8               g\n  #23 = Utf8               <init>\n  #24 = Utf8               ()V\n  #25 = Utf8               Code\n  #26 = Utf8               LineNumberTable\n  #27 = Utf8               method1\n  #28 = Utf8               method2\n  #29 = Utf8               method3\n  #30 = Utf8               ()I\n  #31 = Utf8               <clinit>\n  #32 = Utf8               SourceFile\n  #33 = Utf8               Test.java\n  #34 = NameAndType        #23:#24        // \"<init>\":()V\n  #35 = NameAndType        #12:#13        // a:I\n  #36 = NameAndType        #14:#13        // b:I\n  #37 = NameAndType        #15:#13        // c:I\n  #38 = Class              #46            // java/lang/Integer\n  #39 = NameAndType        #47:#48        // valueOf:(I)Ljava/lang/Integer;\n  #40 = NameAndType        #19:#20        // e:Ljava/lang/Integer;\n  #41 = NameAndType        #21:#13        // f:I\n  #42 = NameAndType        #22:#13        // g:I\n  #43 = NameAndType        #18:#13        // D:I\n  #44 = Utf8               Test\n  #45 = Utf8               java/lang/Object\n  #46 = Utf8               java/lang/Integer\n  #47 = Utf8               valueOf\n  #48 = Utf8               (I)Ljava/lang/Integer;\n{\n  public int a;\n    descriptor: I\n    flags: ACC_PUBLIC\n\n  private int b;\n    descriptor: I\n    flags: ACC_PRIVATE\n\n  public final int c;\n    descriptor: I\n    flags: ACC_PUBLIC, ACC_FINAL\n    ConstantValue: int 3\n\n  public static int D;\n    descriptor: I\n    flags: ACC_PUBLIC, ACC_STATIC\n\n  public java.lang.Integer e;\n    descriptor: Ljava/lang/Integer;\n    flags: ACC_PUBLIC\n\n  int f;\n    descriptor: I\n    flags:\n\n  protected int g;\n    descriptor: I\n    flags: ACC_PROTECTED\n\n  public Test();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: aload_0\n         5: iconst_1\n         6: putfield      #2                  // Field a:I\n         9: aload_0\n        10: iconst_2\n        11: putfield      #3                  // Field b:I\n        14: aload_0\n        15: iconst_3\n        16: putfield      #4                  // Field c:I\n        19: aload_0\n        20: iconst_5\n        21: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n        24: putfield      #6                  // Field e:Ljava/lang/Integer;\n        27: aload_0\n        28: bipush        6\n        30: putfield      #7                  // Field f:I\n        33: aload_0\n        34: bipush        7\n        36: putfield      #8                  // Field g:I\n        39: return\n      LineNumberTable:\n        line 1: 0\n        line 2: 4\n        line 3: 9\n        line 4: 14\n        line 6: 19\n        line 7: 27\n        line 8: 33\n\n  public void method1();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 11: 0\n\n  private void method2();\n    descriptor: ()V\n    flags: ACC_PRIVATE\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 14: 0\n\n  public int method3();\n    descriptor: ()I\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: iconst_0\n         1: ireturn\n      LineNumberTable:\n        line 17: 0\n\n  static {};\n    descriptor: ()V\n    flags: ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: iconst_4\n         1: putstatic     #9                  // Field D:I\n         4: return\n      LineNumberTable:\n        line 5: 0\n}\nSourceFile: \"Test.java\"\n```\n\n可以查看到类中所有的成员变量以及字节码，通过分析字节码和类中的常量池，就能对类有一个更加深入的了解。\n\n### 总结\n\n本文只是记录一下javap的简单用法，学会使用javap可以在深入理解Java基础和了解JVM时提供更大的助力，有时候遇到一些奇奇怪怪的问题，用javap反编译看一下字节码将会得到不一样的收获。","slug":"javap的基本用法","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1km000ww2pm1t5of2vg","content":"<p>有时候需要深入了解类的运行方式和流程，或者查看一个类中的属性成员，我们可以使用反编译来进行查看，JDK自带了一个反编译工具javap，可以反编译，也可以查看Java编译器生成的字节码，用于分解class文件，本文简单介绍一下javap的基本方法。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"javap命令参数\"><a href=\"#javap命令参数\" class=\"headerlink\" title=\"javap命令参数\"></a>javap命令参数</h3><p>在控制台输入<code>javap -help</code>查看javap的命令用法以及参数</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\system32&gt;javap <span class=\"literal\">-help</span></span><br><span class=\"line\">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class=\"line\">其中, 可能的选项包括:</span><br><span class=\"line\">  <span class=\"literal\">-help</span>  -<span class=\"literal\">-help</span>  -?        输出此用法消息</span><br><span class=\"line\">  <span class=\"literal\">-version</span>                 版本信息</span><br><span class=\"line\">  <span class=\"literal\">-v</span>  <span class=\"literal\">-verbose</span>             输出附加信息</span><br><span class=\"line\">  <span class=\"literal\">-l</span>                       输出行号和本地变量表</span><br><span class=\"line\">  <span class=\"literal\">-public</span>                  仅显示公共类和成员</span><br><span class=\"line\">  <span class=\"literal\">-protected</span>               显示受保护的/公共类和成员</span><br><span class=\"line\">  <span class=\"literal\">-package</span>                 显示程序包/受保护的/公共类</span><br><span class=\"line\">                           和成员 (默认)</span><br><span class=\"line\">  <span class=\"literal\">-p</span>  <span class=\"literal\">-private</span>             显示所有类和成员</span><br><span class=\"line\">  <span class=\"literal\">-c</span>                       对代码进行反汇编</span><br><span class=\"line\">  <span class=\"literal\">-s</span>                       输出内部类型签名</span><br><span class=\"line\">  <span class=\"literal\">-sysinfo</span>                 显示正在处理的类的</span><br><span class=\"line\">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class=\"line\">  <span class=\"literal\">-constants</span>               显示最终常量</span><br><span class=\"line\">  <span class=\"literal\">-classpath</span> &lt;path&gt;        指定查找用户类文件的位置</span><br><span class=\"line\">  <span class=\"literal\">-cp</span> &lt;path&gt;               指定查找用户类文件的位置</span><br><span class=\"line\">  <span class=\"literal\">-bootclasspath</span> &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h3><h4 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> D = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer e = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> g =<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">method3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"javap-p\"><a href=\"#javap-p\" class=\"headerlink\" title=\"javap -p\"></a>javap -p</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Glieen\\Desktop&gt; javap <span class=\"literal\">-p</span> Test<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Compiled</span> <span class=\"title\">from</span> \"<span class=\"title\">Test</span>.<span class=\"title\">java</span>\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">Test</span></span> &#123;</span><br><span class=\"line\">  public int a;</span><br><span class=\"line\">  private int b;</span><br><span class=\"line\">  public final int c;</span><br><span class=\"line\">  public <span class=\"keyword\">static</span> int D;</span><br><span class=\"line\">  public java.lang.Integer e;</span><br><span class=\"line\">  int f;</span><br><span class=\"line\">  protected int g;</span><br><span class=\"line\">  public Test();</span><br><span class=\"line\">  public void method1();</span><br><span class=\"line\">  private void method2();</span><br><span class=\"line\">  public int method3();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认执行javap只能查看到公开和包级别的成员变量，使用<code>javap -p</code>可以查看类中所有的成员变量。</p>\n<h4 id=\"javap-v-p\"><a href=\"#javap-v-p\" class=\"headerlink\" title=\"javap -v -p\"></a>javap -v -p</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Glieen\\Desktop&gt; javap <span class=\"literal\">-v</span> <span class=\"literal\">-p</span> .\\Test<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Classfile</span> /<span class=\"title\">C</span>:/<span class=\"title\">Users</span>/<span class=\"title\">Glieen</span>/<span class=\"title\">Desktop</span>/<span class=\"title\">Test</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Last</span> <span class=\"title\">modified</span> 2019-1-17; <span class=\"title\">size</span> 726 <span class=\"title\">bytes</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">MD5</span> <span class=\"title\">checksum</span> <span class=\"title\">eb60967015bd6e02e460a5bf462e8c5a</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Compiled</span> <span class=\"title\">from</span> \"<span class=\"title\">Test</span>.<span class=\"title\">java</span>\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">minor</span> <span class=\"title\">version</span>: 0</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">major</span> <span class=\"title\">version</span>: 52</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">flags</span>: <span class=\"title\">ACC_PUBLIC</span>, <span class=\"title\">ACC_SUPER</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Constant</span> <span class=\"title\">pool</span>:</span></span><br><span class=\"line\"><span class=\"class\">   #1 = <span class=\"title\">Methodref</span>          #11.#34        // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Object</span>.\"&lt;<span class=\"title\">init</span>&gt;\":()<span class=\"title\">V</span></span></span><br><span class=\"line\"><span class=\"class\">   #2 = <span class=\"title\">Fieldref</span>           #10.#35        // <span class=\"title\">Test</span>.<span class=\"title\">a</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #3 = <span class=\"title\">Fieldref</span>           #10.#36        // <span class=\"title\">Test</span>.<span class=\"title\">b</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #4 = <span class=\"title\">Fieldref</span>           #10.#37        // <span class=\"title\">Test</span>.<span class=\"title\">c</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #5 = <span class=\"title\">Methodref</span>          #38.#39        // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>.<span class=\"title\">valueOf</span>:(<span class=\"title\">I</span>)<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">   #6 = <span class=\"title\">Fieldref</span>           #10.#40        // <span class=\"title\">Test</span>.<span class=\"title\">e</span>:<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">   #7 = <span class=\"title\">Fieldref</span>           #10.#41        // <span class=\"title\">Test</span>.<span class=\"title\">f</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #8 = <span class=\"title\">Fieldref</span>           #10.#42        // <span class=\"title\">Test</span>.<span class=\"title\">g</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #9 = <span class=\"title\">Fieldref</span>           #10.#43        // <span class=\"title\">Test</span>.<span class=\"title\">D</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #10 = <span class=\"title\">Class</span>              #44            // <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">  #11 = <span class=\"title\">Class</span>              #45            // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\">  #12 = <span class=\"title\">Utf8</span>               <span class=\"title\">a</span></span></span><br><span class=\"line\"><span class=\"class\">  #13 = <span class=\"title\">Utf8</span>               <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #14 = <span class=\"title\">Utf8</span>               <span class=\"title\">b</span></span></span><br><span class=\"line\"><span class=\"class\">  #15 = <span class=\"title\">Utf8</span>               <span class=\"title\">c</span></span></span><br><span class=\"line\"><span class=\"class\">  #16 = <span class=\"title\">Utf8</span>               <span class=\"title\">ConstantValue</span></span></span><br><span class=\"line\"><span class=\"class\">  #17 = <span class=\"title\">Integer</span>            3</span></span><br><span class=\"line\"><span class=\"class\">  #18 = <span class=\"title\">Utf8</span>               <span class=\"title\">D</span></span></span><br><span class=\"line\"><span class=\"class\">  #19 = <span class=\"title\">Utf8</span>               <span class=\"title\">e</span></span></span><br><span class=\"line\"><span class=\"class\">  #20 = <span class=\"title\">Utf8</span>               <span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">  #21 = <span class=\"title\">Utf8</span>               <span class=\"title\">f</span></span></span><br><span class=\"line\"><span class=\"class\">  #22 = <span class=\"title\">Utf8</span>               <span class=\"title\">g</span></span></span><br><span class=\"line\"><span class=\"class\">  #23 = <span class=\"title\">Utf8</span>               &lt;<span class=\"title\">init</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  #24 = <span class=\"title\">Utf8</span>               ()<span class=\"title\">V</span></span></span><br><span class=\"line\"><span class=\"class\">  #25 = <span class=\"title\">Utf8</span>               <span class=\"title\">Code</span></span></span><br><span class=\"line\"><span class=\"class\">  #26 = <span class=\"title\">Utf8</span>               <span class=\"title\">LineNumberTable</span></span></span><br><span class=\"line\"><span class=\"class\">  #27 = <span class=\"title\">Utf8</span>               <span class=\"title\">method1</span></span></span><br><span class=\"line\"><span class=\"class\">  #28 = <span class=\"title\">Utf8</span>               <span class=\"title\">method2</span></span></span><br><span class=\"line\"><span class=\"class\">  #29 = <span class=\"title\">Utf8</span>               <span class=\"title\">method3</span></span></span><br><span class=\"line\"><span class=\"class\">  #30 = <span class=\"title\">Utf8</span>               ()<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #31 = <span class=\"title\">Utf8</span>               &lt;<span class=\"title\">clinit</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  #32 = <span class=\"title\">Utf8</span>               <span class=\"title\">SourceFile</span></span></span><br><span class=\"line\"><span class=\"class\">  #33 = <span class=\"title\">Utf8</span>               <span class=\"title\">Test</span>.<span class=\"title\">java</span></span></span><br><span class=\"line\"><span class=\"class\">  #34 = <span class=\"title\">NameAndType</span>        #23:#24        // \"&lt;<span class=\"title\">init</span>&gt;\":()<span class=\"title\">V</span></span></span><br><span class=\"line\"><span class=\"class\">  #35 = <span class=\"title\">NameAndType</span>        #12:#13        // <span class=\"title\">a</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #36 = <span class=\"title\">NameAndType</span>        #14:#13        // <span class=\"title\">b</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #37 = <span class=\"title\">NameAndType</span>        #15:#13        // <span class=\"title\">c</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #38 = <span class=\"title\">Class</span>              #46            // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span></span></span><br><span class=\"line\"><span class=\"class\">  #39 = <span class=\"title\">NameAndType</span>        #47:#48        // <span class=\"title\">valueOf</span>:(<span class=\"title\">I</span>)<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">  #40 = <span class=\"title\">NameAndType</span>        #19:#20        // <span class=\"title\">e</span>:<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">  #41 = <span class=\"title\">NameAndType</span>        #21:#13        // <span class=\"title\">f</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #42 = <span class=\"title\">NameAndType</span>        #22:#13        // <span class=\"title\">g</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #43 = <span class=\"title\">NameAndType</span>        #18:#13        // <span class=\"title\">D</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #44 = <span class=\"title\">Utf8</span>               <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">  #45 = <span class=\"title\">Utf8</span>               <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\">  #46 = <span class=\"title\">Utf8</span>               <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span></span></span><br><span class=\"line\"><span class=\"class\">  #47 = <span class=\"title\">Utf8</span>               <span class=\"title\">valueOf</span></span></span><br><span class=\"line\"><span class=\"class\">  #48 = <span class=\"title\">Utf8</span>               (<span class=\"title\">I</span>)<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  public int a;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\"></span><br><span class=\"line\">  private int b;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PRIVATE</span><br><span class=\"line\"></span><br><span class=\"line\">  public final int c;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_FINAL</span><br><span class=\"line\">    ConstantValue: int <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  public <span class=\"keyword\">static</span> int D;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\"></span><br><span class=\"line\">  public java.lang.Integer e;</span><br><span class=\"line\">    descriptor: Ljava/lang/Integer;</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\"></span><br><span class=\"line\">  int f;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags:</span><br><span class=\"line\"></span><br><span class=\"line\">  protected int g;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PROTECTED</span><br><span class=\"line\"></span><br><span class=\"line\">  public Test();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: invokespecial <span class=\"comment\">#1                  // Method java/lang/Object.\"&lt;init&gt;\":()V</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">         <span class=\"number\">6</span>: putfield      <span class=\"comment\">#2                  // Field a:I</span></span><br><span class=\"line\">         <span class=\"number\">9</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">10</span>: iconst_2</span><br><span class=\"line\">        <span class=\"number\">11</span>: putfield      <span class=\"comment\">#3                  // Field b:I</span></span><br><span class=\"line\">        <span class=\"number\">14</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">15</span>: iconst_3</span><br><span class=\"line\">        <span class=\"number\">16</span>: putfield      <span class=\"comment\">#4                  // Field c:I</span></span><br><span class=\"line\">        <span class=\"number\">19</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">20</span>: iconst_5</span><br><span class=\"line\">        <span class=\"number\">21</span>: invokestatic  <span class=\"comment\">#5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class=\"line\">        <span class=\"number\">24</span>: putfield      <span class=\"comment\">#6                  // Field e:Ljava/lang/Integer;</span></span><br><span class=\"line\">        <span class=\"number\">27</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">28</span>: bipush        <span class=\"number\">6</span></span><br><span class=\"line\">        <span class=\"number\">30</span>: putfield      <span class=\"comment\">#7                  // Field f:I</span></span><br><span class=\"line\">        <span class=\"number\">33</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">34</span>: bipush        <span class=\"number\">7</span></span><br><span class=\"line\">        <span class=\"number\">36</span>: putfield      <span class=\"comment\">#8                  // Field g:I</span></span><br><span class=\"line\">        <span class=\"number\">39</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">1</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">2</span>: <span class=\"number\">4</span></span><br><span class=\"line\">        line <span class=\"number\">3</span>: <span class=\"number\">9</span></span><br><span class=\"line\">        line <span class=\"number\">4</span>: <span class=\"number\">14</span></span><br><span class=\"line\">        line <span class=\"number\">6</span>: <span class=\"number\">19</span></span><br><span class=\"line\">        line <span class=\"number\">7</span>: <span class=\"number\">27</span></span><br><span class=\"line\">        line <span class=\"number\">8</span>: <span class=\"number\">33</span></span><br><span class=\"line\"></span><br><span class=\"line\">  public void method1();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">0</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">11</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private void method2();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PRIVATE</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">0</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">14</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  public int method3();</span><br><span class=\"line\">    descriptor: ()I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iconst_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">17</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;&#125;;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">0</span>, args_size=<span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iconst_4</span><br><span class=\"line\">         <span class=\"number\">1</span>: putstatic     <span class=\"comment\">#9                  // Field D:I</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">5</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: <span class=\"string\">\"Test.java\"</span></span><br></pre></td></tr></table></figure>\n\n<p>可以查看到类中所有的成员变量以及字节码，通过分析字节码和类中的常量池，就能对类有一个更加深入的了解。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文只是记录一下javap的简单用法，学会使用javap可以在深入理解Java基础和了解JVM时提供更大的助力，有时候遇到一些奇奇怪怪的问题，用javap反编译看一下字节码将会得到不一样的收获。</p>\n","site":{"data":{}},"excerpt":"<p>有时候需要深入了解类的运行方式和流程，或者查看一个类中的属性成员，我们可以使用反编译来进行查看，JDK自带了一个反编译工具javap，可以反编译，也可以查看Java编译器生成的字节码，用于分解class文件，本文简单介绍一下javap的基本方法。</p>","more":"<h3 id=\"javap命令参数\"><a href=\"#javap命令参数\" class=\"headerlink\" title=\"javap命令参数\"></a>javap命令参数</h3><p>在控制台输入<code>javap -help</code>查看javap的命令用法以及参数</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\system32&gt;javap <span class=\"literal\">-help</span></span><br><span class=\"line\">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class=\"line\">其中, 可能的选项包括:</span><br><span class=\"line\">  <span class=\"literal\">-help</span>  -<span class=\"literal\">-help</span>  -?        输出此用法消息</span><br><span class=\"line\">  <span class=\"literal\">-version</span>                 版本信息</span><br><span class=\"line\">  <span class=\"literal\">-v</span>  <span class=\"literal\">-verbose</span>             输出附加信息</span><br><span class=\"line\">  <span class=\"literal\">-l</span>                       输出行号和本地变量表</span><br><span class=\"line\">  <span class=\"literal\">-public</span>                  仅显示公共类和成员</span><br><span class=\"line\">  <span class=\"literal\">-protected</span>               显示受保护的/公共类和成员</span><br><span class=\"line\">  <span class=\"literal\">-package</span>                 显示程序包/受保护的/公共类</span><br><span class=\"line\">                           和成员 (默认)</span><br><span class=\"line\">  <span class=\"literal\">-p</span>  <span class=\"literal\">-private</span>             显示所有类和成员</span><br><span class=\"line\">  <span class=\"literal\">-c</span>                       对代码进行反汇编</span><br><span class=\"line\">  <span class=\"literal\">-s</span>                       输出内部类型签名</span><br><span class=\"line\">  <span class=\"literal\">-sysinfo</span>                 显示正在处理的类的</span><br><span class=\"line\">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class=\"line\">  <span class=\"literal\">-constants</span>               显示最终常量</span><br><span class=\"line\">  <span class=\"literal\">-classpath</span> &lt;path&gt;        指定查找用户类文件的位置</span><br><span class=\"line\">  <span class=\"literal\">-cp</span> &lt;path&gt;               指定查找用户类文件的位置</span><br><span class=\"line\">  <span class=\"literal\">-bootclasspath</span> &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h3><h4 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> D = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer e = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> g =<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">method3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"javap-p\"><a href=\"#javap-p\" class=\"headerlink\" title=\"javap -p\"></a>javap -p</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Glieen\\Desktop&gt; javap <span class=\"literal\">-p</span> Test<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Compiled</span> <span class=\"title\">from</span> \"<span class=\"title\">Test</span>.<span class=\"title\">java</span>\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">Test</span></span> &#123;</span><br><span class=\"line\">  public int a;</span><br><span class=\"line\">  private int b;</span><br><span class=\"line\">  public final int c;</span><br><span class=\"line\">  public <span class=\"keyword\">static</span> int D;</span><br><span class=\"line\">  public java.lang.Integer e;</span><br><span class=\"line\">  int f;</span><br><span class=\"line\">  protected int g;</span><br><span class=\"line\">  public Test();</span><br><span class=\"line\">  public void method1();</span><br><span class=\"line\">  private void method2();</span><br><span class=\"line\">  public int method3();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认执行javap只能查看到公开和包级别的成员变量，使用<code>javap -p</code>可以查看类中所有的成员变量。</p>\n<h4 id=\"javap-v-p\"><a href=\"#javap-v-p\" class=\"headerlink\" title=\"javap -v -p\"></a>javap -v -p</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Glieen\\Desktop&gt; javap <span class=\"literal\">-v</span> <span class=\"literal\">-p</span> .\\Test<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Classfile</span> /<span class=\"title\">C</span>:/<span class=\"title\">Users</span>/<span class=\"title\">Glieen</span>/<span class=\"title\">Desktop</span>/<span class=\"title\">Test</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Last</span> <span class=\"title\">modified</span> 2019-1-17; <span class=\"title\">size</span> 726 <span class=\"title\">bytes</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">MD5</span> <span class=\"title\">checksum</span> <span class=\"title\">eb60967015bd6e02e460a5bf462e8c5a</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Compiled</span> <span class=\"title\">from</span> \"<span class=\"title\">Test</span>.<span class=\"title\">java</span>\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">minor</span> <span class=\"title\">version</span>: 0</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">major</span> <span class=\"title\">version</span>: 52</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">flags</span>: <span class=\"title\">ACC_PUBLIC</span>, <span class=\"title\">ACC_SUPER</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Constant</span> <span class=\"title\">pool</span>:</span></span><br><span class=\"line\"><span class=\"class\">   #1 = <span class=\"title\">Methodref</span>          #11.#34        // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Object</span>.\"&lt;<span class=\"title\">init</span>&gt;\":()<span class=\"title\">V</span></span></span><br><span class=\"line\"><span class=\"class\">   #2 = <span class=\"title\">Fieldref</span>           #10.#35        // <span class=\"title\">Test</span>.<span class=\"title\">a</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #3 = <span class=\"title\">Fieldref</span>           #10.#36        // <span class=\"title\">Test</span>.<span class=\"title\">b</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #4 = <span class=\"title\">Fieldref</span>           #10.#37        // <span class=\"title\">Test</span>.<span class=\"title\">c</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #5 = <span class=\"title\">Methodref</span>          #38.#39        // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>.<span class=\"title\">valueOf</span>:(<span class=\"title\">I</span>)<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">   #6 = <span class=\"title\">Fieldref</span>           #10.#40        // <span class=\"title\">Test</span>.<span class=\"title\">e</span>:<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">   #7 = <span class=\"title\">Fieldref</span>           #10.#41        // <span class=\"title\">Test</span>.<span class=\"title\">f</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #8 = <span class=\"title\">Fieldref</span>           #10.#42        // <span class=\"title\">Test</span>.<span class=\"title\">g</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">   #9 = <span class=\"title\">Fieldref</span>           #10.#43        // <span class=\"title\">Test</span>.<span class=\"title\">D</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #10 = <span class=\"title\">Class</span>              #44            // <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">  #11 = <span class=\"title\">Class</span>              #45            // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\">  #12 = <span class=\"title\">Utf8</span>               <span class=\"title\">a</span></span></span><br><span class=\"line\"><span class=\"class\">  #13 = <span class=\"title\">Utf8</span>               <span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #14 = <span class=\"title\">Utf8</span>               <span class=\"title\">b</span></span></span><br><span class=\"line\"><span class=\"class\">  #15 = <span class=\"title\">Utf8</span>               <span class=\"title\">c</span></span></span><br><span class=\"line\"><span class=\"class\">  #16 = <span class=\"title\">Utf8</span>               <span class=\"title\">ConstantValue</span></span></span><br><span class=\"line\"><span class=\"class\">  #17 = <span class=\"title\">Integer</span>            3</span></span><br><span class=\"line\"><span class=\"class\">  #18 = <span class=\"title\">Utf8</span>               <span class=\"title\">D</span></span></span><br><span class=\"line\"><span class=\"class\">  #19 = <span class=\"title\">Utf8</span>               <span class=\"title\">e</span></span></span><br><span class=\"line\"><span class=\"class\">  #20 = <span class=\"title\">Utf8</span>               <span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">  #21 = <span class=\"title\">Utf8</span>               <span class=\"title\">f</span></span></span><br><span class=\"line\"><span class=\"class\">  #22 = <span class=\"title\">Utf8</span>               <span class=\"title\">g</span></span></span><br><span class=\"line\"><span class=\"class\">  #23 = <span class=\"title\">Utf8</span>               &lt;<span class=\"title\">init</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  #24 = <span class=\"title\">Utf8</span>               ()<span class=\"title\">V</span></span></span><br><span class=\"line\"><span class=\"class\">  #25 = <span class=\"title\">Utf8</span>               <span class=\"title\">Code</span></span></span><br><span class=\"line\"><span class=\"class\">  #26 = <span class=\"title\">Utf8</span>               <span class=\"title\">LineNumberTable</span></span></span><br><span class=\"line\"><span class=\"class\">  #27 = <span class=\"title\">Utf8</span>               <span class=\"title\">method1</span></span></span><br><span class=\"line\"><span class=\"class\">  #28 = <span class=\"title\">Utf8</span>               <span class=\"title\">method2</span></span></span><br><span class=\"line\"><span class=\"class\">  #29 = <span class=\"title\">Utf8</span>               <span class=\"title\">method3</span></span></span><br><span class=\"line\"><span class=\"class\">  #30 = <span class=\"title\">Utf8</span>               ()<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #31 = <span class=\"title\">Utf8</span>               &lt;<span class=\"title\">clinit</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  #32 = <span class=\"title\">Utf8</span>               <span class=\"title\">SourceFile</span></span></span><br><span class=\"line\"><span class=\"class\">  #33 = <span class=\"title\">Utf8</span>               <span class=\"title\">Test</span>.<span class=\"title\">java</span></span></span><br><span class=\"line\"><span class=\"class\">  #34 = <span class=\"title\">NameAndType</span>        #23:#24        // \"&lt;<span class=\"title\">init</span>&gt;\":()<span class=\"title\">V</span></span></span><br><span class=\"line\"><span class=\"class\">  #35 = <span class=\"title\">NameAndType</span>        #12:#13        // <span class=\"title\">a</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #36 = <span class=\"title\">NameAndType</span>        #14:#13        // <span class=\"title\">b</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #37 = <span class=\"title\">NameAndType</span>        #15:#13        // <span class=\"title\">c</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #38 = <span class=\"title\">Class</span>              #46            // <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span></span></span><br><span class=\"line\"><span class=\"class\">  #39 = <span class=\"title\">NameAndType</span>        #47:#48        // <span class=\"title\">valueOf</span>:(<span class=\"title\">I</span>)<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">  #40 = <span class=\"title\">NameAndType</span>        #19:#20        // <span class=\"title\">e</span>:<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\">  #41 = <span class=\"title\">NameAndType</span>        #21:#13        // <span class=\"title\">f</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #42 = <span class=\"title\">NameAndType</span>        #22:#13        // <span class=\"title\">g</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #43 = <span class=\"title\">NameAndType</span>        #18:#13        // <span class=\"title\">D</span>:<span class=\"title\">I</span></span></span><br><span class=\"line\"><span class=\"class\">  #44 = <span class=\"title\">Utf8</span>               <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">  #45 = <span class=\"title\">Utf8</span>               <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\">  #46 = <span class=\"title\">Utf8</span>               <span class=\"title\">java</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span></span></span><br><span class=\"line\"><span class=\"class\">  #47 = <span class=\"title\">Utf8</span>               <span class=\"title\">valueOf</span></span></span><br><span class=\"line\"><span class=\"class\">  #48 = <span class=\"title\">Utf8</span>               (<span class=\"title\">I</span>)<span class=\"title\">Ljava</span>/<span class=\"title\">lang</span>/<span class=\"title\">Integer</span>;</span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  public int a;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\"></span><br><span class=\"line\">  private int b;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PRIVATE</span><br><span class=\"line\"></span><br><span class=\"line\">  public final int c;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_FINAL</span><br><span class=\"line\">    ConstantValue: int <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  public <span class=\"keyword\">static</span> int D;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\"></span><br><span class=\"line\">  public java.lang.Integer e;</span><br><span class=\"line\">    descriptor: Ljava/lang/Integer;</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\"></span><br><span class=\"line\">  int f;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags:</span><br><span class=\"line\"></span><br><span class=\"line\">  protected int g;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PROTECTED</span><br><span class=\"line\"></span><br><span class=\"line\">  public Test();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: invokespecial <span class=\"comment\">#1                  // Method java/lang/Object.\"&lt;init&gt;\":()V</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">         <span class=\"number\">6</span>: putfield      <span class=\"comment\">#2                  // Field a:I</span></span><br><span class=\"line\">         <span class=\"number\">9</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">10</span>: iconst_2</span><br><span class=\"line\">        <span class=\"number\">11</span>: putfield      <span class=\"comment\">#3                  // Field b:I</span></span><br><span class=\"line\">        <span class=\"number\">14</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">15</span>: iconst_3</span><br><span class=\"line\">        <span class=\"number\">16</span>: putfield      <span class=\"comment\">#4                  // Field c:I</span></span><br><span class=\"line\">        <span class=\"number\">19</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">20</span>: iconst_5</span><br><span class=\"line\">        <span class=\"number\">21</span>: invokestatic  <span class=\"comment\">#5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class=\"line\">        <span class=\"number\">24</span>: putfield      <span class=\"comment\">#6                  // Field e:Ljava/lang/Integer;</span></span><br><span class=\"line\">        <span class=\"number\">27</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">28</span>: bipush        <span class=\"number\">6</span></span><br><span class=\"line\">        <span class=\"number\">30</span>: putfield      <span class=\"comment\">#7                  // Field f:I</span></span><br><span class=\"line\">        <span class=\"number\">33</span>: aload_0</span><br><span class=\"line\">        <span class=\"number\">34</span>: bipush        <span class=\"number\">7</span></span><br><span class=\"line\">        <span class=\"number\">36</span>: putfield      <span class=\"comment\">#8                  // Field g:I</span></span><br><span class=\"line\">        <span class=\"number\">39</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">1</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">2</span>: <span class=\"number\">4</span></span><br><span class=\"line\">        line <span class=\"number\">3</span>: <span class=\"number\">9</span></span><br><span class=\"line\">        line <span class=\"number\">4</span>: <span class=\"number\">14</span></span><br><span class=\"line\">        line <span class=\"number\">6</span>: <span class=\"number\">19</span></span><br><span class=\"line\">        line <span class=\"number\">7</span>: <span class=\"number\">27</span></span><br><span class=\"line\">        line <span class=\"number\">8</span>: <span class=\"number\">33</span></span><br><span class=\"line\"></span><br><span class=\"line\">  public void method1();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">0</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">11</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  private void method2();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PRIVATE</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">0</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">14</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  public int method3();</span><br><span class=\"line\">    descriptor: ()I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iconst_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">17</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;&#125;;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">0</span>, args_size=<span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iconst_4</span><br><span class=\"line\">         <span class=\"number\">1</span>: putstatic     <span class=\"comment\">#9                  // Field D:I</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">5</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: <span class=\"string\">\"Test.java\"</span></span><br></pre></td></tr></table></figure>\n\n<p>可以查看到类中所有的成员变量以及字节码，通过分析字节码和类中的常量池，就能对类有一个更加深入的了解。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文只是记录一下javap的简单用法，学会使用javap可以在深入理解Java基础和了解JVM时提供更大的助力，有时候遇到一些奇奇怪怪的问题，用javap反编译看一下字节码将会得到不一样的收获。</p>"},{"title":"从Excel生成MySQL数据表(Apache POI)","comments":1,"date":"2019-02-27T10:07:19.000Z","_content":"\n通常在开发项目的时候，会先生成数据字段的Excel表，然后在MySQL中创建对应的数据表，字段少的时候还不是很麻烦，但是遇到字段特别多的表时，手写SQL效率会非常低下，像Navicat等图形化工具支持从Excle导入，但是操作繁琐而且容易出错，这时候就需要一些工具来帮我们生成数据表了。\n\n<!--more-->\n\n### 需求\n\n从一个数据库设计的Excel表生成MySQL数据表，假设现在有一个设计好的Excel表结构，像下面这样，需要用它来生成数据表。\n\n| 名称 | 字段名   | 类型    | 长度 |\n| ---- | -------- | ------- | ---- |\n| ID   | id       | int     | 11   |\n| 姓名 | name     | varchar | 10   |\n| 年龄 | age      | int     | 3    |\n| 生日 | birthday | date    |      |\n\n### 实现\n\n这里实现的时候使用到了Apache POI这个库，POI编写了非常多实用的API，它可以使用Java读取、创建和修改MS Excel文件，官方文档：[POI](https://poi.apache.org/)\n\n实现的思路是，利用POI，可以非常方便的解析上面的Excel表，读取里面的字段值，注释，类型和长度等，再拼接成SQL，利用JDBC执行，就可以生成数据表结构了。\n\n代码如下（JDK8）：\n\n```java\npackage cn.glieen;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellType;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Objects;\n\n\npublic class Excel2MySQL {\n    public static void main(String[] args) throws IOException, SQLException, ClassNotFoundException {\n        String fileName = \"user.xlsx\";\n        Sheet sheet = loadExcel(fileName);\n        String sql = createSQL(sheet, fileName);\n        System.out.println(sql);\n        executeSQL(sql);\n    }\n\n    public static Sheet loadExcel(String fileName) throws IOException {\n        InputStream excelResource = Excel2MySQL.class.getClassLoader().getResourceAsStream(fileName);\n        Objects.requireNonNull(excelResource);\n        XSSFWorkbook wb = new XSSFWorkbook(excelResource);\n        return wb.getSheetAt(0);\n    }\n\n    public static String createSQL(Sheet sheet, String fileName) {\n        StringBuilder sb = new StringBuilder(\"CREATE TABLE \");\n        String tableName = fileName.substring(0, fileName.lastIndexOf(\".\"));\n        sb.append(\"`\").append(tableName).append(\"`(\");\n        int rowNum = sheet.getLastRowNum();\n        for (int i = 1; i < sheet.getLastRowNum() + 1; i++) {\n            Row row = sheet.getRow(i);\n            sb.append(parseField(row));\n        }\n        sb.deleteCharAt(sb.lastIndexOf(\",\"));\n        sb.append(\");\");\n        return sb.toString();\n    }\n\n    public static String parseField(Row row) {\n        String comment = getCellValue(row.getCell(0));\n        String name = getCellValue(row.getCell(1));\n        String type = getCellValue(row.getCell(2));\n        String length = getCellValue(row.getCell(3));\n        if (\"\".equals(length)) {\n            length = \"\";\n        } else {\n            length = \"(\" + length + \")\";\n        }\n        return \"\\n`\" + name + \"` \" + type + length + \" COMMENT '\" + comment + \"',\";\n    }\n\n    public static String getCellValue(Cell cell) {\n        cell.setCellType(CellType.STRING);\n        return cell.getStringCellValue();\n    }\n\n    public static void executeSQL(String sql) throws ClassNotFoundException, SQLException {\n        String url = \"jdbc:mysql://localhost:3306/test\";\n        String user = \"root\";\n        String password = \"root\";\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        Connection connection = DriverManager.getConnection(url, user, password);\n        try (Statement statement = connection.createStatement()) {\n            statement.executeUpdate(sql);\n        }\n        connection.close();\n    }\n}\n```\n\n运行结果：\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8hfi8igj30e305274k.jpg)\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8jrqzz9j30hy0dymxj.jpg)\n\nSQL语句成功打印，数据表成功创建。\n\n### 扩展\n\n上面只是一个简单的Demo，当需要更多的功能，比如，自增长，主键和索引等内容时，可以对代码进行更丰富的扩充和完善。这只是简单使用了POI的一小部分，更多的处理接口还待发现。\n\n","source":"_posts/从Excel生成MySQL数据表-Apache-POI.md","raw":"---\ntitle: 从Excel生成MySQL数据表(Apache POI)\ntags: [Excle,POI]\ncomments: true\ndate: 2019-02-27 18:07:19\ncategories: 记录\n---\n\n通常在开发项目的时候，会先生成数据字段的Excel表，然后在MySQL中创建对应的数据表，字段少的时候还不是很麻烦，但是遇到字段特别多的表时，手写SQL效率会非常低下，像Navicat等图形化工具支持从Excle导入，但是操作繁琐而且容易出错，这时候就需要一些工具来帮我们生成数据表了。\n\n<!--more-->\n\n### 需求\n\n从一个数据库设计的Excel表生成MySQL数据表，假设现在有一个设计好的Excel表结构，像下面这样，需要用它来生成数据表。\n\n| 名称 | 字段名   | 类型    | 长度 |\n| ---- | -------- | ------- | ---- |\n| ID   | id       | int     | 11   |\n| 姓名 | name     | varchar | 10   |\n| 年龄 | age      | int     | 3    |\n| 生日 | birthday | date    |      |\n\n### 实现\n\n这里实现的时候使用到了Apache POI这个库，POI编写了非常多实用的API，它可以使用Java读取、创建和修改MS Excel文件，官方文档：[POI](https://poi.apache.org/)\n\n实现的思路是，利用POI，可以非常方便的解析上面的Excel表，读取里面的字段值，注释，类型和长度等，再拼接成SQL，利用JDBC执行，就可以生成数据表结构了。\n\n代码如下（JDK8）：\n\n```java\npackage cn.glieen;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellType;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Objects;\n\n\npublic class Excel2MySQL {\n    public static void main(String[] args) throws IOException, SQLException, ClassNotFoundException {\n        String fileName = \"user.xlsx\";\n        Sheet sheet = loadExcel(fileName);\n        String sql = createSQL(sheet, fileName);\n        System.out.println(sql);\n        executeSQL(sql);\n    }\n\n    public static Sheet loadExcel(String fileName) throws IOException {\n        InputStream excelResource = Excel2MySQL.class.getClassLoader().getResourceAsStream(fileName);\n        Objects.requireNonNull(excelResource);\n        XSSFWorkbook wb = new XSSFWorkbook(excelResource);\n        return wb.getSheetAt(0);\n    }\n\n    public static String createSQL(Sheet sheet, String fileName) {\n        StringBuilder sb = new StringBuilder(\"CREATE TABLE \");\n        String tableName = fileName.substring(0, fileName.lastIndexOf(\".\"));\n        sb.append(\"`\").append(tableName).append(\"`(\");\n        int rowNum = sheet.getLastRowNum();\n        for (int i = 1; i < sheet.getLastRowNum() + 1; i++) {\n            Row row = sheet.getRow(i);\n            sb.append(parseField(row));\n        }\n        sb.deleteCharAt(sb.lastIndexOf(\",\"));\n        sb.append(\");\");\n        return sb.toString();\n    }\n\n    public static String parseField(Row row) {\n        String comment = getCellValue(row.getCell(0));\n        String name = getCellValue(row.getCell(1));\n        String type = getCellValue(row.getCell(2));\n        String length = getCellValue(row.getCell(3));\n        if (\"\".equals(length)) {\n            length = \"\";\n        } else {\n            length = \"(\" + length + \")\";\n        }\n        return \"\\n`\" + name + \"` \" + type + length + \" COMMENT '\" + comment + \"',\";\n    }\n\n    public static String getCellValue(Cell cell) {\n        cell.setCellType(CellType.STRING);\n        return cell.getStringCellValue();\n    }\n\n    public static void executeSQL(String sql) throws ClassNotFoundException, SQLException {\n        String url = \"jdbc:mysql://localhost:3306/test\";\n        String user = \"root\";\n        String password = \"root\";\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        Connection connection = DriverManager.getConnection(url, user, password);\n        try (Statement statement = connection.createStatement()) {\n            statement.executeUpdate(sql);\n        }\n        connection.close();\n    }\n}\n```\n\n运行结果：\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8hfi8igj30e305274k.jpg)\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8jrqzz9j30hy0dymxj.jpg)\n\nSQL语句成功打印，数据表成功创建。\n\n### 扩展\n\n上面只是一个简单的Demo，当需要更多的功能，比如，自增长，主键和索引等内容时，可以对代码进行更丰富的扩充和完善。这只是简单使用了POI的一小部分，更多的处理接口还待发现。\n\n","slug":"从Excel生成MySQL数据表-Apache-POI","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kn0011w2pm6il234i8","content":"<p>通常在开发项目的时候，会先生成数据字段的Excel表，然后在MySQL中创建对应的数据表，字段少的时候还不是很麻烦，但是遇到字段特别多的表时，手写SQL效率会非常低下，像Navicat等图形化工具支持从Excle导入，但是操作繁琐而且容易出错，这时候就需要一些工具来帮我们生成数据表了。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>从一个数据库设计的Excel表生成MySQL数据表，假设现在有一个设计好的Excel表结构，像下面这样，需要用它来生成数据表。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>字段名</th>\n<th>类型</th>\n<th>长度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID</td>\n<td>id</td>\n<td>int</td>\n<td>11</td>\n</tr>\n<tr>\n<td>姓名</td>\n<td>name</td>\n<td>varchar</td>\n<td>10</td>\n</tr>\n<tr>\n<td>年龄</td>\n<td>age</td>\n<td>int</td>\n<td>3</td>\n</tr>\n<tr>\n<td>生日</td>\n<td>birthday</td>\n<td>date</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>这里实现的时候使用到了Apache POI这个库，POI编写了非常多实用的API，它可以使用Java读取、创建和修改MS Excel文件，官方文档：<a href=\"https://poi.apache.org/\" target=\"_blank\" rel=\"noopener\">POI</a></p>\n<p>实现的思路是，利用POI，可以非常方便的解析上面的Excel表，读取里面的字段值，注释，类型和长度等，再拼接成SQL，利用JDBC执行，就可以生成数据表结构了。</p>\n<p>代码如下（JDK8）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.glieen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.CellType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Excel2MySQL</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, SQLException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        String fileName = <span class=\"string\">\"user.xlsx\"</span>;</span><br><span class=\"line\">        Sheet sheet = loadExcel(fileName);</span><br><span class=\"line\">        String sql = createSQL(sheet, fileName);</span><br><span class=\"line\">        System.out.println(sql);</span><br><span class=\"line\">        executeSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sheet <span class=\"title\">loadExcel</span><span class=\"params\">(String fileName)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        InputStream excelResource = Excel2MySQL<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getClassLoader</span>().<span class=\"title\">getResourceAsStream</span>(<span class=\"title\">fileName</span>)</span>;</span><br><span class=\"line\">        Objects.requireNonNull(excelResource);</span><br><span class=\"line\">        XSSFWorkbook wb = <span class=\"keyword\">new</span> XSSFWorkbook(excelResource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wb.getSheetAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createSQL</span><span class=\"params\">(Sheet sheet, String fileName)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"CREATE TABLE \"</span>);</span><br><span class=\"line\">        String tableName = fileName.substring(<span class=\"number\">0</span>, fileName.lastIndexOf(<span class=\"string\">\".\"</span>));</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"`\"</span>).append(tableName).append(<span class=\"string\">\"`(\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowNum = sheet.getLastRowNum();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; sheet.getLastRowNum() + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            Row row = sheet.getRow(i);</span><br><span class=\"line\">            sb.append(parseField(row));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.deleteCharAt(sb.lastIndexOf(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        sb.append(<span class=\"string\">\");\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">parseField</span><span class=\"params\">(Row row)</span> </span>&#123;</span><br><span class=\"line\">        String comment = getCellValue(row.getCell(<span class=\"number\">0</span>));</span><br><span class=\"line\">        String name = getCellValue(row.getCell(<span class=\"number\">1</span>));</span><br><span class=\"line\">        String type = getCellValue(row.getCell(<span class=\"number\">2</span>));</span><br><span class=\"line\">        String length = getCellValue(row.getCell(<span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(length)) &#123;</span><br><span class=\"line\">            length = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            length = <span class=\"string\">\"(\"</span> + length + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\n`\"</span> + name + <span class=\"string\">\"` \"</span> + type + length + <span class=\"string\">\" COMMENT '\"</span> + comment + <span class=\"string\">\"',\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getCellValue</span><span class=\"params\">(Cell cell)</span> </span>&#123;</span><br><span class=\"line\">        cell.setCellType(CellType.STRING);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell.getStringCellValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">executeSQL</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test\"</span>;</span><br><span class=\"line\">        String user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">        String password = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</span><br><span class=\"line\">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (Statement statement = connection.createStatement()) &#123;</span><br><span class=\"line\">            statement.executeUpdate(sql);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8hfi8igj30e305274k.jpg\" alt=\"image\"></p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8jrqzz9j30hy0dymxj.jpg\" alt=\"image\"></p>\n<p>SQL语句成功打印，数据表成功创建。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>上面只是一个简单的Demo，当需要更多的功能，比如，自增长，主键和索引等内容时，可以对代码进行更丰富的扩充和完善。这只是简单使用了POI的一小部分，更多的处理接口还待发现。</p>\n","site":{"data":{}},"excerpt":"<p>通常在开发项目的时候，会先生成数据字段的Excel表，然后在MySQL中创建对应的数据表，字段少的时候还不是很麻烦，但是遇到字段特别多的表时，手写SQL效率会非常低下，像Navicat等图形化工具支持从Excle导入，但是操作繁琐而且容易出错，这时候就需要一些工具来帮我们生成数据表了。</p>","more":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>从一个数据库设计的Excel表生成MySQL数据表，假设现在有一个设计好的Excel表结构，像下面这样，需要用它来生成数据表。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>字段名</th>\n<th>类型</th>\n<th>长度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID</td>\n<td>id</td>\n<td>int</td>\n<td>11</td>\n</tr>\n<tr>\n<td>姓名</td>\n<td>name</td>\n<td>varchar</td>\n<td>10</td>\n</tr>\n<tr>\n<td>年龄</td>\n<td>age</td>\n<td>int</td>\n<td>3</td>\n</tr>\n<tr>\n<td>生日</td>\n<td>birthday</td>\n<td>date</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>这里实现的时候使用到了Apache POI这个库，POI编写了非常多实用的API，它可以使用Java读取、创建和修改MS Excel文件，官方文档：<a href=\"https://poi.apache.org/\" target=\"_blank\" rel=\"noopener\">POI</a></p>\n<p>实现的思路是，利用POI，可以非常方便的解析上面的Excel表，读取里面的字段值，注释，类型和长度等，再拼接成SQL，利用JDBC执行，就可以生成数据表结构了。</p>\n<p>代码如下（JDK8）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.glieen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.CellType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Excel2MySQL</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, SQLException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        String fileName = <span class=\"string\">\"user.xlsx\"</span>;</span><br><span class=\"line\">        Sheet sheet = loadExcel(fileName);</span><br><span class=\"line\">        String sql = createSQL(sheet, fileName);</span><br><span class=\"line\">        System.out.println(sql);</span><br><span class=\"line\">        executeSQL(sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sheet <span class=\"title\">loadExcel</span><span class=\"params\">(String fileName)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        InputStream excelResource = Excel2MySQL<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getClassLoader</span>().<span class=\"title\">getResourceAsStream</span>(<span class=\"title\">fileName</span>)</span>;</span><br><span class=\"line\">        Objects.requireNonNull(excelResource);</span><br><span class=\"line\">        XSSFWorkbook wb = <span class=\"keyword\">new</span> XSSFWorkbook(excelResource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wb.getSheetAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createSQL</span><span class=\"params\">(Sheet sheet, String fileName)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"CREATE TABLE \"</span>);</span><br><span class=\"line\">        String tableName = fileName.substring(<span class=\"number\">0</span>, fileName.lastIndexOf(<span class=\"string\">\".\"</span>));</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"`\"</span>).append(tableName).append(<span class=\"string\">\"`(\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowNum = sheet.getLastRowNum();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; sheet.getLastRowNum() + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            Row row = sheet.getRow(i);</span><br><span class=\"line\">            sb.append(parseField(row));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.deleteCharAt(sb.lastIndexOf(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        sb.append(<span class=\"string\">\");\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">parseField</span><span class=\"params\">(Row row)</span> </span>&#123;</span><br><span class=\"line\">        String comment = getCellValue(row.getCell(<span class=\"number\">0</span>));</span><br><span class=\"line\">        String name = getCellValue(row.getCell(<span class=\"number\">1</span>));</span><br><span class=\"line\">        String type = getCellValue(row.getCell(<span class=\"number\">2</span>));</span><br><span class=\"line\">        String length = getCellValue(row.getCell(<span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(length)) &#123;</span><br><span class=\"line\">            length = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            length = <span class=\"string\">\"(\"</span> + length + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\n`\"</span> + name + <span class=\"string\">\"` \"</span> + type + length + <span class=\"string\">\" COMMENT '\"</span> + comment + <span class=\"string\">\"',\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getCellValue</span><span class=\"params\">(Cell cell)</span> </span>&#123;</span><br><span class=\"line\">        cell.setCellType(CellType.STRING);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cell.getStringCellValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">executeSQL</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test\"</span>;</span><br><span class=\"line\">        String user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">        String password = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</span><br><span class=\"line\">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (Statement statement = connection.createStatement()) &#123;</span><br><span class=\"line\">            statement.executeUpdate(sql);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8hfi8igj30e305274k.jpg\" alt=\"image\"></p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2ly1g0t8jrqzz9j30hy0dymxj.jpg\" alt=\"image\"></p>\n<p>SQL语句成功打印，数据表成功创建。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>上面只是一个简单的Demo，当需要更多的功能，比如，自增长，主键和索引等内容时，可以对代码进行更丰富的扩充和完善。这只是简单使用了POI的一小部分，更多的处理接口还待发现。</p>"},{"title":"修改Ubuntu解锁界面的背景图片","comments":1,"date":"2019-01-17T02:26:53.000Z","_content":"\n因为学习Linux已经在Vmware装上Ubuntu有一段时间了，因为我装的是桌面版Ubuntu，所以是有GUI界面的，前几天逛知乎看到一篇修改Ubuntu解锁界面背景图片的文章，照着文章做了下，效果不错，所以在这里记录下来并分享给大家。\n\n<!--more-->\n\n默认的解锁界面简洁干净\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5jnd1ysj30uo0h7102.jpg)\n\n### 准备\n\nLinux版本：Ubuntu 18.04\n\n一张用来做背景的图片，png或者jpg格式的都可以，分辨率1080*1920比较合适，将图片命名为background.jpg，放置到家目录下\n\n### 修改\n\n打开终端，使用命令行把图片移动到/usr/share/backgrounds/目录下，如提示权限不足就用sudo命令。\n\n```bash\n$ sudo mv ~/background.jpg  /usr/share/backgrounds/\n```\n\n打开Ubuntu的样式文件\n\n```bash\n$ sudo nano /etc/alternatives/gdm3.css\n```\n\n使用`ctrl+w`搜索lockDialogGroup定位到解锁样式的位置，默认样式为\n\n```css\n#lockDialogGroup {\n  background: #2c001e url(resource:///org/gnome/shell/theme/noise-texture.png);\n  background-repeat: repeat; }\n```\n\n修改为以下样式\n\n```css\n#lockDialogGroup {\n  background: #2c001e url(file:///usr/share/backgrounds/background.jpg);         \n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n}\n```\n\n`ctrl+o`保存文件，然后`ctrl+x`关闭文件。\n\n### 生效\n\n使用命令行重启系统\n\n```bash\n$ reboot\n```\n\n重启系统即可看到修改后的效果了，如果对css有更多的了解，还可以定制喜欢的样式。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5jmuo7rj31hc0u0hdu.jpg)\n\n> 原文链接：[Ubuntu18.04 更改登录界面默认背景图](https://zhuanlan.zhihu.com/p/36470249)","source":"_posts/修改Ubuntu解锁界面的背景图片.md","raw":"---\ntitle: 修改Ubuntu解锁界面的背景图片\ntags: [Ubuntu,Linux]\ncomments: true\ndate: 2019-01-17 10:26:53\ncategories: Linux\n---\n\n因为学习Linux已经在Vmware装上Ubuntu有一段时间了，因为我装的是桌面版Ubuntu，所以是有GUI界面的，前几天逛知乎看到一篇修改Ubuntu解锁界面背景图片的文章，照着文章做了下，效果不错，所以在这里记录下来并分享给大家。\n\n<!--more-->\n\n默认的解锁界面简洁干净\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5jnd1ysj30uo0h7102.jpg)\n\n### 准备\n\nLinux版本：Ubuntu 18.04\n\n一张用来做背景的图片，png或者jpg格式的都可以，分辨率1080*1920比较合适，将图片命名为background.jpg，放置到家目录下\n\n### 修改\n\n打开终端，使用命令行把图片移动到/usr/share/backgrounds/目录下，如提示权限不足就用sudo命令。\n\n```bash\n$ sudo mv ~/background.jpg  /usr/share/backgrounds/\n```\n\n打开Ubuntu的样式文件\n\n```bash\n$ sudo nano /etc/alternatives/gdm3.css\n```\n\n使用`ctrl+w`搜索lockDialogGroup定位到解锁样式的位置，默认样式为\n\n```css\n#lockDialogGroup {\n  background: #2c001e url(resource:///org/gnome/shell/theme/noise-texture.png);\n  background-repeat: repeat; }\n```\n\n修改为以下样式\n\n```css\n#lockDialogGroup {\n  background: #2c001e url(file:///usr/share/backgrounds/background.jpg);         \n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n}\n```\n\n`ctrl+o`保存文件，然后`ctrl+x`关闭文件。\n\n### 生效\n\n使用命令行重启系统\n\n```bash\n$ reboot\n```\n\n重启系统即可看到修改后的效果了，如果对css有更多的了解，还可以定制喜欢的样式。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5jmuo7rj31hc0u0hdu.jpg)\n\n> 原文链接：[Ubuntu18.04 更改登录界面默认背景图](https://zhuanlan.zhihu.com/p/36470249)","slug":"修改Ubuntu解锁界面的背景图片","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1ko0012w2pm21fo4dzf","content":"<p>因为学习Linux已经在Vmware装上Ubuntu有一段时间了，因为我装的是桌面版Ubuntu，所以是有GUI界面的，前几天逛知乎看到一篇修改Ubuntu解锁界面背景图片的文章，照着文章做了下，效果不错，所以在这里记录下来并分享给大家。</p>\n<a id=\"more\"></a>\n\n<p>默认的解锁界面简洁干净</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5jnd1ysj30uo0h7102.jpg\" alt=\"image\"></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>Linux版本：Ubuntu 18.04</p>\n<p>一张用来做背景的图片，png或者jpg格式的都可以，分辨率1080*1920比较合适，将图片命名为background.jpg，放置到家目录下</p>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>打开终端，使用命令行把图片移动到/usr/share/backgrounds/目录下，如提示权限不足就用sudo命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mv ~/background.jpg  /usr/share/backgrounds/</span><br></pre></td></tr></table></figure>\n\n<p>打开Ubuntu的样式文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo nano /etc/alternatives/gdm3.css</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ctrl+w</code>搜索lockDialogGroup定位到解锁样式的位置，默认样式为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#lockDialogGroup</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#2c001e</span> <span class=\"built_in\">url</span>(resource:///org/gnome/shell/theme/noise-texture.png);</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: repeat; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改为以下样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#lockDialogGroup</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#2c001e</span> <span class=\"built_in\">url</span>(file:///usr/share/backgrounds/background.jpg);         </span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ctrl+o</code>保存文件，然后<code>ctrl+x</code>关闭文件。</p>\n<h3 id=\"生效\"><a href=\"#生效\" class=\"headerlink\" title=\"生效\"></a>生效</h3><p>使用命令行重启系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n\n<p>重启系统即可看到修改后的效果了，如果对css有更多的了解，还可以定制喜欢的样式。</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5jmuo7rj31hc0u0hdu.jpg\" alt=\"image\"></p>\n<blockquote>\n<p>原文链接：<a href=\"https://zhuanlan.zhihu.com/p/36470249\" target=\"_blank\" rel=\"noopener\">Ubuntu18.04 更改登录界面默认背景图</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>因为学习Linux已经在Vmware装上Ubuntu有一段时间了，因为我装的是桌面版Ubuntu，所以是有GUI界面的，前几天逛知乎看到一篇修改Ubuntu解锁界面背景图片的文章，照着文章做了下，效果不错，所以在这里记录下来并分享给大家。</p>","more":"<p>默认的解锁界面简洁干净</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5jnd1ysj30uo0h7102.jpg\" alt=\"image\"></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>Linux版本：Ubuntu 18.04</p>\n<p>一张用来做背景的图片，png或者jpg格式的都可以，分辨率1080*1920比较合适，将图片命名为background.jpg，放置到家目录下</p>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>打开终端，使用命令行把图片移动到/usr/share/backgrounds/目录下，如提示权限不足就用sudo命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mv ~/background.jpg  /usr/share/backgrounds/</span><br></pre></td></tr></table></figure>\n\n<p>打开Ubuntu的样式文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo nano /etc/alternatives/gdm3.css</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ctrl+w</code>搜索lockDialogGroup定位到解锁样式的位置，默认样式为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#lockDialogGroup</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#2c001e</span> <span class=\"built_in\">url</span>(resource:///org/gnome/shell/theme/noise-texture.png);</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: repeat; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改为以下样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#lockDialogGroup</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#2c001e</span> <span class=\"built_in\">url</span>(file:///usr/share/backgrounds/background.jpg);         </span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ctrl+o</code>保存文件，然后<code>ctrl+x</code>关闭文件。</p>\n<h3 id=\"生效\"><a href=\"#生效\" class=\"headerlink\" title=\"生效\"></a>生效</h3><p>使用命令行重启系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n\n<p>重启系统即可看到修改后的效果了，如果对css有更多的了解，还可以定制喜欢的样式。</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5jmuo7rj31hc0u0hdu.jpg\" alt=\"image\"></p>\n<blockquote>\n<p>原文链接：<a href=\"https://zhuanlan.zhihu.com/p/36470249\" target=\"_blank\" rel=\"noopener\">Ubuntu18.04 更改登录界面默认背景图</a></p>\n</blockquote>"},{"title":"关于“怎么判断一个数是奇数”的思考","comments":1,"date":"2019-04-23T09:42:08.000Z","_content":"\n有时候，关于一个简单的问题，深入思考之后或许能发现更多不一样的东西。那么现在，我们来讨论一个简单的问题：能不能写一个方法，判断一个数是奇数？\n\n<!--more-->\n\n可能我们刚看到这个问题，都会不屑的一笑，这么简单的问题，还用得着讨论吗？我觉得是有必要的。\n\n像下面这样，我们很容易就能写出来：\n\n```java\npublic static boolean test(int i) {\n    if (i % 2 == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n好像没有问题，那能不能优化一下呢？if判断的不就是boolean值么，好像可以直接返回，然后代码可以改成这样：\n\n```java\npublic static boolean test(int i) {\n    return i % 2 == 1;\n}\n```\n\n做到这一步好像已经很棒了，一行代码就能实现，那还能不能再优化一下呢？再看看下面的代码：\n\n```java\npublic static boolean test(int i) {\n\treturn (i & 1) == 1;\n}\n```\n\nAmazing~！这里巧妙的使用了位运算，以非常优雅简洁的方式解决了这个问题，对于计算机来说，位运算应该是最快的计算方式了。\n\n通过上面对一个简单问题处理的一步步优化，我想说的的是，有时候写代码，解决一个问题，并不是能用就行了，还应当考虑，有没有更高效的方式去做更好的处理，这是值得深思的。写代码的时候如果不思考，写出来的代码将会变得臃肿，可读性也很差。如果你看过Java源码，你一定会对其中的一些代码大声惊呼的，仿佛是在看一件美丽的事物，因为里面众多的方法实现太优雅了。\n\n> 参考文章：[记一道简单的java面试题](https://zhuanlan.zhihu.com/p/57859872)","source":"_posts/关于“怎么判断一个数是奇数”的思考.md","raw":"---\ntitle: 关于“怎么判断一个数是奇数”的思考\ntags: [Java,基础知识]\ncomments: true\ndate: 2019-04-23 17:42:08\ncategories: 记录\n---\n\n有时候，关于一个简单的问题，深入思考之后或许能发现更多不一样的东西。那么现在，我们来讨论一个简单的问题：能不能写一个方法，判断一个数是奇数？\n\n<!--more-->\n\n可能我们刚看到这个问题，都会不屑的一笑，这么简单的问题，还用得着讨论吗？我觉得是有必要的。\n\n像下面这样，我们很容易就能写出来：\n\n```java\npublic static boolean test(int i) {\n    if (i % 2 == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n好像没有问题，那能不能优化一下呢？if判断的不就是boolean值么，好像可以直接返回，然后代码可以改成这样：\n\n```java\npublic static boolean test(int i) {\n    return i % 2 == 1;\n}\n```\n\n做到这一步好像已经很棒了，一行代码就能实现，那还能不能再优化一下呢？再看看下面的代码：\n\n```java\npublic static boolean test(int i) {\n\treturn (i & 1) == 1;\n}\n```\n\nAmazing~！这里巧妙的使用了位运算，以非常优雅简洁的方式解决了这个问题，对于计算机来说，位运算应该是最快的计算方式了。\n\n通过上面对一个简单问题处理的一步步优化，我想说的的是，有时候写代码，解决一个问题，并不是能用就行了，还应当考虑，有没有更高效的方式去做更好的处理，这是值得深思的。写代码的时候如果不思考，写出来的代码将会变得臃肿，可读性也很差。如果你看过Java源码，你一定会对其中的一些代码大声惊呼的，仿佛是在看一件美丽的事物，因为里面众多的方法实现太优雅了。\n\n> 参考文章：[记一道简单的java面试题](https://zhuanlan.zhihu.com/p/57859872)","slug":"关于“怎么判断一个数是奇数”的思考","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kq0016w2pm6mop4yhr","content":"<p>有时候，关于一个简单的问题，深入思考之后或许能发现更多不一样的东西。那么现在，我们来讨论一个简单的问题：能不能写一个方法，判断一个数是奇数？</p>\n<a id=\"more\"></a>\n\n<p>可能我们刚看到这个问题，都会不屑的一笑，这么简单的问题，还用得着讨论吗？我觉得是有必要的。</p>\n<p>像下面这样，我们很容易就能写出来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好像没有问题，那能不能优化一下呢？if判断的不就是boolean值么，好像可以直接返回，然后代码可以改成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>做到这一步好像已经很棒了，一行代码就能实现，那还能不能再优化一下呢？再看看下面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (i &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Amazing~！这里巧妙的使用了位运算，以非常优雅简洁的方式解决了这个问题，对于计算机来说，位运算应该是最快的计算方式了。</p>\n<p>通过上面对一个简单问题处理的一步步优化，我想说的的是，有时候写代码，解决一个问题，并不是能用就行了，还应当考虑，有没有更高效的方式去做更好的处理，这是值得深思的。写代码的时候如果不思考，写出来的代码将会变得臃肿，可读性也很差。如果你看过Java源码，你一定会对其中的一些代码大声惊呼的，仿佛是在看一件美丽的事物，因为里面众多的方法实现太优雅了。</p>\n<blockquote>\n<p>参考文章：<a href=\"https://zhuanlan.zhihu.com/p/57859872\" target=\"_blank\" rel=\"noopener\">记一道简单的java面试题</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>有时候，关于一个简单的问题，深入思考之后或许能发现更多不一样的东西。那么现在，我们来讨论一个简单的问题：能不能写一个方法，判断一个数是奇数？</p>","more":"<p>可能我们刚看到这个问题，都会不屑的一笑，这么简单的问题，还用得着讨论吗？我觉得是有必要的。</p>\n<p>像下面这样，我们很容易就能写出来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好像没有问题，那能不能优化一下呢？if判断的不就是boolean值么，好像可以直接返回，然后代码可以改成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>做到这一步好像已经很棒了，一行代码就能实现，那还能不能再优化一下呢？再看看下面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (i &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Amazing~！这里巧妙的使用了位运算，以非常优雅简洁的方式解决了这个问题，对于计算机来说，位运算应该是最快的计算方式了。</p>\n<p>通过上面对一个简单问题处理的一步步优化，我想说的的是，有时候写代码，解决一个问题，并不是能用就行了，还应当考虑，有没有更高效的方式去做更好的处理，这是值得深思的。写代码的时候如果不思考，写出来的代码将会变得臃肿，可读性也很差。如果你看过Java源码，你一定会对其中的一些代码大声惊呼的，仿佛是在看一件美丽的事物，因为里面众多的方法实现太优雅了。</p>\n<blockquote>\n<p>参考文章：<a href=\"https://zhuanlan.zhihu.com/p/57859872\" target=\"_blank\" rel=\"noopener\">记一道简单的java面试题</a></p>\n</blockquote>"},{"title":"写一个简单的死锁","comments":1,"date":"2019-01-17T02:26:53.000Z","_content":"\n用Java写一个简单的死锁。\n<!--more-->\n\n### 死锁\n> 死锁（英语：Deadlock），又译为死结，计算机科学名词。当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。--wikipedia\n\n### Java实现\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Object a = new Object();\n        Object b = new Object();\n\n        new Thread(() -> {\n            while (true) {\n                synchronized (a) {\n                    synchronized (b) {\n                        System.out.println(Thread.currentThread());\n                    }\n                }\n            }\n        }).start();\n        new Thread(() -> {\n            while (true) {\n                synchronized (b) {\n                    synchronized (a) {\n                        System.out.println(Thread.currentThread());\n                    }\n                }\n            }\n        }).start();\n    }\n}\n```\n\n两个线程分先后顺序锁住两个对象，当一个线程锁住a对象，另一个线程锁住b对象时，两个线程都会因为无法得到另一个对象的锁而无限等待，产生死锁。\n\n","source":"_posts/写一个简单的死锁.md","raw":"---\ntitle: 写一个简单的死锁\ntags: [Java,锁]\ncomments: true\ndate: 2019-01-17 10:26:53\ncategories: Java\n---\n\n用Java写一个简单的死锁。\n<!--more-->\n\n### 死锁\n> 死锁（英语：Deadlock），又译为死结，计算机科学名词。当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。--wikipedia\n\n### Java实现\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Object a = new Object();\n        Object b = new Object();\n\n        new Thread(() -> {\n            while (true) {\n                synchronized (a) {\n                    synchronized (b) {\n                        System.out.println(Thread.currentThread());\n                    }\n                }\n            }\n        }).start();\n        new Thread(() -> {\n            while (true) {\n                synchronized (b) {\n                    synchronized (a) {\n                        System.out.println(Thread.currentThread());\n                    }\n                }\n            }\n        }).start();\n    }\n}\n```\n\n两个线程分先后顺序锁住两个对象，当一个线程锁住a对象，另一个线程锁住b对象时，两个线程都会因为无法得到另一个对象的锁而无限等待，产生死锁。\n\n","slug":"写一个简单的死锁","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kq0018w2pm720i4oi9","content":"<p>用Java写一个简单的死锁。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><blockquote>\n<p>死锁（英语：Deadlock），又译为死结，计算机科学名词。当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。–wikipedia</p>\n</blockquote>\n<h3 id=\"Java实现\"><a href=\"#Java实现\" class=\"headerlink\" title=\"Java实现\"></a>Java实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Object a = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Object b = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (a) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (b) &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (b) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (a) &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个线程分先后顺序锁住两个对象，当一个线程锁住a对象，另一个线程锁住b对象时，两个线程都会因为无法得到另一个对象的锁而无限等待，产生死锁。</p>\n","site":{"data":{}},"excerpt":"<p>用Java写一个简单的死锁。</p>","more":"<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><blockquote>\n<p>死锁（英语：Deadlock），又译为死结，计算机科学名词。当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。–wikipedia</p>\n</blockquote>\n<h3 id=\"Java实现\"><a href=\"#Java实现\" class=\"headerlink\" title=\"Java实现\"></a>Java实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Object a = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Object b = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (a) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (b) &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (b) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (a) &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个线程分先后顺序锁住两个对象，当一个线程锁住a对象，另一个线程锁住b对象时，两个线程都会因为无法得到另一个对象的锁而无限等待，产生死锁。</p>"},{"title":"列表循环问题","date":"2018-08-31T08:14:53.000Z","comments":1,"_content":"\n列表是Java中使用最多的数据结构之一，列表的循环也是经常会使用的操作，这是我最近在对列表循环的时候遇到的一个问题，在此记录下来。\n\n<!-- more -->\n\n### 问题代码\n\n```java\npublic class ArrayTest {\n    public static void main(String[] args) {\n        List<Character> list = new ArrayList<>();\n        list.add('a');\n        list.add('b');\n        list.add('c');\n        list.add('d');\n        System.out.println(list);\n        for (int i = 0; i < list.size(); i++) {\n            list.remove(i);\n        }\n        System.out.println(list);\n    }\n}\n```\n\n预期结果：\n\n> [a, b, c, d]\n>\n> []\n\n实际结果：\n\n> [a, b, c, d]\n>\n> [b, d]\n\n根据逻辑来说，对列表进行循环，循环中移除每一个元素，看似是没有问题的，但是这里忽略了一个问题，那就是在移除元素的过程中，数组的大小其实已经变化了，实际上并没有遍历所有的元素，某些元素是被跳过了。\n\n### 还有几个错误示范\n\n```java\nfor (Character character : list) {\n    list.remove(character);\n}\n```\n\n```java\nIterator<Character> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n    Character character = iterator.next();\n    list.remove(character);\n}\n```\n\n这两种方式用来移除列表中的元素都是会抛出`ConcurrentModificationException`异常的，故不可取。\n\n### 正确操作\n\n应对这个问题，我们可以使用迭代器来实现列表的删除元素操作。\n\n```java\nIterator<Character> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n    iterator.next();\n    iterator.remove();\n}\n```\n\n利用迭代器的`iterator.remove()`方法，我们就可以正常移除列表中的元素啦。","source":"_posts/列表循环问题.md","raw":"---\ntitle: 列表循环问题\ndate: 2018-08-31 16:14:53\ntags: [Java,基础知识]\ncategories: Java\ncomments: true\n---\n\n列表是Java中使用最多的数据结构之一，列表的循环也是经常会使用的操作，这是我最近在对列表循环的时候遇到的一个问题，在此记录下来。\n\n<!-- more -->\n\n### 问题代码\n\n```java\npublic class ArrayTest {\n    public static void main(String[] args) {\n        List<Character> list = new ArrayList<>();\n        list.add('a');\n        list.add('b');\n        list.add('c');\n        list.add('d');\n        System.out.println(list);\n        for (int i = 0; i < list.size(); i++) {\n            list.remove(i);\n        }\n        System.out.println(list);\n    }\n}\n```\n\n预期结果：\n\n> [a, b, c, d]\n>\n> []\n\n实际结果：\n\n> [a, b, c, d]\n>\n> [b, d]\n\n根据逻辑来说，对列表进行循环，循环中移除每一个元素，看似是没有问题的，但是这里忽略了一个问题，那就是在移除元素的过程中，数组的大小其实已经变化了，实际上并没有遍历所有的元素，某些元素是被跳过了。\n\n### 还有几个错误示范\n\n```java\nfor (Character character : list) {\n    list.remove(character);\n}\n```\n\n```java\nIterator<Character> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n    Character character = iterator.next();\n    list.remove(character);\n}\n```\n\n这两种方式用来移除列表中的元素都是会抛出`ConcurrentModificationException`异常的，故不可取。\n\n### 正确操作\n\n应对这个问题，我们可以使用迭代器来实现列表的删除元素操作。\n\n```java\nIterator<Character> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n    iterator.next();\n    iterator.remove();\n}\n```\n\n利用迭代器的`iterator.remove()`方法，我们就可以正常移除列表中的元素啦。","slug":"列表循环问题","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1ks001dw2pm1bsh5zkn","content":"<p>列表是Java中使用最多的数据结构之一，列表的循环也是经常会使用的操作，这是我最近在对列表循环的时候遇到的一个问题，在此记录下来。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"问题代码\"><a href=\"#问题代码\" class=\"headerlink\" title=\"问题代码\"></a>问题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Character&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">'d'</span>);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            list.remove(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预期结果：</p>\n<blockquote>\n<p>[a, b, c, d]</p>\n<p>[]</p>\n</blockquote>\n<p>实际结果：</p>\n<blockquote>\n<p>[a, b, c, d]</p>\n<p>[b, d]</p>\n</blockquote>\n<p>根据逻辑来说，对列表进行循环，循环中移除每一个元素，看似是没有问题的，但是这里忽略了一个问题，那就是在移除元素的过程中，数组的大小其实已经变化了，实际上并没有遍历所有的元素，某些元素是被跳过了。</p>\n<h3 id=\"还有几个错误示范\"><a href=\"#还有几个错误示范\" class=\"headerlink\" title=\"还有几个错误示范\"></a>还有几个错误示范</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (Character character : list) &#123;</span><br><span class=\"line\">    list.remove(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;Character&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">    Character character = iterator.next();</span><br><span class=\"line\">    list.remove(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两种方式用来移除列表中的元素都是会抛出<code>ConcurrentModificationException</code>异常的，故不可取。</p>\n<h3 id=\"正确操作\"><a href=\"#正确操作\" class=\"headerlink\" title=\"正确操作\"></a>正确操作</h3><p>应对这个问题，我们可以使用迭代器来实现列表的删除元素操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;Character&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">    iterator.next();</span><br><span class=\"line\">    iterator.remove();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用迭代器的<code>iterator.remove()</code>方法，我们就可以正常移除列表中的元素啦。</p>\n","site":{"data":{}},"excerpt":"<p>列表是Java中使用最多的数据结构之一，列表的循环也是经常会使用的操作，这是我最近在对列表循环的时候遇到的一个问题，在此记录下来。</p>","more":"<h3 id=\"问题代码\"><a href=\"#问题代码\" class=\"headerlink\" title=\"问题代码\"></a>问题代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Character&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">'d'</span>);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            list.remove(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预期结果：</p>\n<blockquote>\n<p>[a, b, c, d]</p>\n<p>[]</p>\n</blockquote>\n<p>实际结果：</p>\n<blockquote>\n<p>[a, b, c, d]</p>\n<p>[b, d]</p>\n</blockquote>\n<p>根据逻辑来说，对列表进行循环，循环中移除每一个元素，看似是没有问题的，但是这里忽略了一个问题，那就是在移除元素的过程中，数组的大小其实已经变化了，实际上并没有遍历所有的元素，某些元素是被跳过了。</p>\n<h3 id=\"还有几个错误示范\"><a href=\"#还有几个错误示范\" class=\"headerlink\" title=\"还有几个错误示范\"></a>还有几个错误示范</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (Character character : list) &#123;</span><br><span class=\"line\">    list.remove(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;Character&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">    Character character = iterator.next();</span><br><span class=\"line\">    list.remove(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两种方式用来移除列表中的元素都是会抛出<code>ConcurrentModificationException</code>异常的，故不可取。</p>\n<h3 id=\"正确操作\"><a href=\"#正确操作\" class=\"headerlink\" title=\"正确操作\"></a>正确操作</h3><p>应对这个问题，我们可以使用迭代器来实现列表的删除元素操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;Character&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">    iterator.next();</span><br><span class=\"line\">    iterator.remove();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用迭代器的<code>iterator.remove()</code>方法，我们就可以正常移除列表中的元素啦。</p>"},{"title":"初识Socket","comments":1,"date":"2019-01-24T08:00:58.000Z","_content":"\n在网络编程中，我们经常提及socket，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信。\n\n<!--more-->\n\n### Java中基于TCP的Socket\n\nTCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道。\n\nJava中基于TCP实现的套接字类有Socket类和ServerSocket类，ServerSocket类用于服务器端，监听请求，Socket是在连接建立时使用的，在连接成功时，应用程序的两端都会生成一个Socket实例，对这个实例进行操作就能实现服务端和客户端的通信了。\n\n### 通信步骤\n\n#### 服务器端\n\n1. 创建ServerSocket对象，绑定监听端口号；\n2. 通过`accept()`方法监听客户端请求；\n3. 连接建立之后，通过输入流读取客户端发送的请求信息；\n4. 通过输出流将响应信息发送到客户端；\n5. 关闭连接。\n\n#### 客户端\n\n1. 创建Socket对象，指明需要连接的服务器的地址和端口号。\n2. 连接建立后，通过输出流向服务器发送请求信息。\n3. 通过输入流获取服务器响应的信息。\n4. 关闭连接。\n\n### 代码实现\n\n服务器端\n\n```java\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        // 创建ServerSocket实例,端口号设置为2333\n        ServerSocket serverSocket = new ServerSocket(2333);\n        // 循环监听客户端发来的请求\n        System.out.println(\"服务器端已启动\");\n        while (true) {\n            System.out.println(\"正在监听请求...\");\n            Socket socket = serverSocket.accept();\n            // 将请求得到的socket句柄交由handle方法处理\n            new Server().handle(socket);\n        }\n    }\n\n    private void handle(Socket socket) throws IOException {\n        // 将字节流转换成字符流\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n        String string = reader.readLine();\n        while (string != null) {\n            System.out.println(string);\n            string = reader.readLine();\n        }\n        OutputStream outputStream = socket.getOutputStream();\n        outputStream.write(\"你好,这是服务器端回复的消息!\".getBytes());\n        outputStream.flush();\n        socket.close();\n    }\n}\n```\n\n客户端\n\n```\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        System.out.println(\"正在连接服务端...\");\n        Socket socket = new Socket(\"127.0.0.1\", 2333);\n        OutputStream outputStream = socket.getOutputStream();\n        outputStream.write(\"你好,这是客户端发来的消息!\".getBytes());\n        outputStream.flush();\n        // 关闭输出流，告知服务端消息已经发送完毕\n        socket.shutdownOutput();\n        System.out.println(\"消息发送成功\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        String string = reader.readLine();\n        while (string != null) {\n            System.out.println(string);\n            string = reader.readLine();\n        }\n        socket.close();\n    }\n}\n```\n\n因为Socket是阻塞的，阻塞会发生多个地方，一个是accept方法，调用这个方法之后，服务端会一直等待，直到有客户端连接进来；第二个地方是流的读取，当服务端使用输入流读取了客户端发送的消息，而服务端没有标记消息已经发送完成，那么服务端就会一直等待，所以这里要使用`socket.shutdownOutput()`这个方法关闭客户端的输出流，告知服务端消息已经发送完成，后续的代码才会继续执行。\n\n### 测试结果\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzmhpu7sivj30g204c3yl.jpg)\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzmhq9ydikj30gw06imxk.jpg)\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1fzmhqjnnvrj30dv05wmxh.jpg)\n\n### 多线程处理\n\n因为服务端是循环监听客户端的请求，那么当一个客户端建立连接，但是又长期通信的时候，其他客户端的请求将会全部阻塞，无法建立连接，所以这里改进了一下代码，使用多线程技术提高处理的效率。\n\n服务端\n\n```java\npublic class Server implements Runnable{\n    private Socket socket;\n\n    public Server(Socket socket) {\n        this.socket = socket;\n    }\n\n    public static void main(String[] args) throws IOException {\n        // 创建ServerSocket实例,端口号设置为2333\n        ServerSocket serverSocket = new ServerSocket(2333);\n        // 循环监听客户端发来的请求\n        System.out.println(\"服务器端已启动\");\n        while (true) {\n            System.out.println(\"正在监听请求...\");\n            Socket socket = serverSocket.accept();\n            // 将请求得到的socket句柄交由handle方法处理\n            new Thread(new Server(socket)).start();\n        }\n    }\n\n    @Override\n    public void run() {\n        try {\n            // 将字节流转换成字符流\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            String string = reader.readLine();\n            while (string != null) {\n                System.out.println(string);\n                string = reader.readLine();\n            }\n            OutputStream outputStream = socket.getOutputStream();\n            outputStream.write(\"你好,这是服务器端回复的消息!\".getBytes());\n            outputStream.flush();\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n### 总结\n\n了解Socket对理解计算机的网络通信有更深的意义，只有掌握了应用的沟通方式才能更加得心应手的去使用代码控制它，Java对Socket的支持还是比较好的，提供了大量接口给开发者使用。","source":"_posts/初识Socket.md","raw":"---\ntitle: 初识Socket\ntags: [Socket]\ncomments: true\ndate: 2019-01-24 16:00:58\ncategories: [Java]\n---\n\n在网络编程中，我们经常提及socket，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信。\n\n<!--more-->\n\n### Java中基于TCP的Socket\n\nTCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道。\n\nJava中基于TCP实现的套接字类有Socket类和ServerSocket类，ServerSocket类用于服务器端，监听请求，Socket是在连接建立时使用的，在连接成功时，应用程序的两端都会生成一个Socket实例，对这个实例进行操作就能实现服务端和客户端的通信了。\n\n### 通信步骤\n\n#### 服务器端\n\n1. 创建ServerSocket对象，绑定监听端口号；\n2. 通过`accept()`方法监听客户端请求；\n3. 连接建立之后，通过输入流读取客户端发送的请求信息；\n4. 通过输出流将响应信息发送到客户端；\n5. 关闭连接。\n\n#### 客户端\n\n1. 创建Socket对象，指明需要连接的服务器的地址和端口号。\n2. 连接建立后，通过输出流向服务器发送请求信息。\n3. 通过输入流获取服务器响应的信息。\n4. 关闭连接。\n\n### 代码实现\n\n服务器端\n\n```java\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        // 创建ServerSocket实例,端口号设置为2333\n        ServerSocket serverSocket = new ServerSocket(2333);\n        // 循环监听客户端发来的请求\n        System.out.println(\"服务器端已启动\");\n        while (true) {\n            System.out.println(\"正在监听请求...\");\n            Socket socket = serverSocket.accept();\n            // 将请求得到的socket句柄交由handle方法处理\n            new Server().handle(socket);\n        }\n    }\n\n    private void handle(Socket socket) throws IOException {\n        // 将字节流转换成字符流\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n        String string = reader.readLine();\n        while (string != null) {\n            System.out.println(string);\n            string = reader.readLine();\n        }\n        OutputStream outputStream = socket.getOutputStream();\n        outputStream.write(\"你好,这是服务器端回复的消息!\".getBytes());\n        outputStream.flush();\n        socket.close();\n    }\n}\n```\n\n客户端\n\n```\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        System.out.println(\"正在连接服务端...\");\n        Socket socket = new Socket(\"127.0.0.1\", 2333);\n        OutputStream outputStream = socket.getOutputStream();\n        outputStream.write(\"你好,这是客户端发来的消息!\".getBytes());\n        outputStream.flush();\n        // 关闭输出流，告知服务端消息已经发送完毕\n        socket.shutdownOutput();\n        System.out.println(\"消息发送成功\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        String string = reader.readLine();\n        while (string != null) {\n            System.out.println(string);\n            string = reader.readLine();\n        }\n        socket.close();\n    }\n}\n```\n\n因为Socket是阻塞的，阻塞会发生多个地方，一个是accept方法，调用这个方法之后，服务端会一直等待，直到有客户端连接进来；第二个地方是流的读取，当服务端使用输入流读取了客户端发送的消息，而服务端没有标记消息已经发送完成，那么服务端就会一直等待，所以这里要使用`socket.shutdownOutput()`这个方法关闭客户端的输出流，告知服务端消息已经发送完成，后续的代码才会继续执行。\n\n### 测试结果\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzmhpu7sivj30g204c3yl.jpg)\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzmhq9ydikj30gw06imxk.jpg)\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1fzmhqjnnvrj30dv05wmxh.jpg)\n\n### 多线程处理\n\n因为服务端是循环监听客户端的请求，那么当一个客户端建立连接，但是又长期通信的时候，其他客户端的请求将会全部阻塞，无法建立连接，所以这里改进了一下代码，使用多线程技术提高处理的效率。\n\n服务端\n\n```java\npublic class Server implements Runnable{\n    private Socket socket;\n\n    public Server(Socket socket) {\n        this.socket = socket;\n    }\n\n    public static void main(String[] args) throws IOException {\n        // 创建ServerSocket实例,端口号设置为2333\n        ServerSocket serverSocket = new ServerSocket(2333);\n        // 循环监听客户端发来的请求\n        System.out.println(\"服务器端已启动\");\n        while (true) {\n            System.out.println(\"正在监听请求...\");\n            Socket socket = serverSocket.accept();\n            // 将请求得到的socket句柄交由handle方法处理\n            new Thread(new Server(socket)).start();\n        }\n    }\n\n    @Override\n    public void run() {\n        try {\n            // 将字节流转换成字符流\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            String string = reader.readLine();\n            while (string != null) {\n                System.out.println(string);\n                string = reader.readLine();\n            }\n            OutputStream outputStream = socket.getOutputStream();\n            outputStream.write(\"你好,这是服务器端回复的消息!\".getBytes());\n            outputStream.flush();\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n### 总结\n\n了解Socket对理解计算机的网络通信有更深的意义，只有掌握了应用的沟通方式才能更加得心应手的去使用代码控制它，Java对Socket的支持还是比较好的，提供了大量接口给开发者使用。","slug":"初识Socket","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kt001gw2pm0hys1vzw","content":"<p>在网络编程中，我们经常提及socket，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Java中基于TCP的Socket\"><a href=\"#Java中基于TCP的Socket\" class=\"headerlink\" title=\"Java中基于TCP的Socket\"></a>Java中基于TCP的Socket</h3><p>TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道。</p>\n<p>Java中基于TCP实现的套接字类有Socket类和ServerSocket类，ServerSocket类用于服务器端，监听请求，Socket是在连接建立时使用的，在连接成功时，应用程序的两端都会生成一个Socket实例，对这个实例进行操作就能实现服务端和客户端的通信了。</p>\n<h3 id=\"通信步骤\"><a href=\"#通信步骤\" class=\"headerlink\" title=\"通信步骤\"></a>通信步骤</h3><h4 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h4><ol>\n<li>创建ServerSocket对象，绑定监听端口号；</li>\n<li>通过<code>accept()</code>方法监听客户端请求；</li>\n<li>连接建立之后，通过输入流读取客户端发送的请求信息；</li>\n<li>通过输出流将响应信息发送到客户端；</li>\n<li>关闭连接。</li>\n</ol>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><ol>\n<li>创建Socket对象，指明需要连接的服务器的地址和端口号。</li>\n<li>连接建立后，通过输出流向服务器发送请求信息。</li>\n<li>通过输入流获取服务器响应的信息。</li>\n<li>关闭连接。</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建ServerSocket实例,端口号设置为2333</span></span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">2333</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 循环监听客户端发来的请求</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器端已启动\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"正在监听请求...\"</span>);</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            <span class=\"comment\">// 将请求得到的socket句柄交由handle方法处理</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Server().handle(socket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(Socket socket)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将字节流转换成字符流</span></span><br><span class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));</span><br><span class=\"line\">        String string = reader.readLine();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (string != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(string);</span><br><span class=\"line\">            string = reader.readLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\">        outputStream.write(<span class=\"string\">\"你好,这是服务器端回复的消息!\"</span>.getBytes());</span><br><span class=\"line\">        outputStream.flush();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        System.out.println(&quot;正在连接服务端...&quot;);</span><br><span class=\"line\">        Socket socket &#x3D; new Socket(&quot;127.0.0.1&quot;, 2333);</span><br><span class=\"line\">        OutputStream outputStream &#x3D; socket.getOutputStream();</span><br><span class=\"line\">        outputStream.write(&quot;你好,这是客户端发来的消息!&quot;.getBytes());</span><br><span class=\"line\">        outputStream.flush();</span><br><span class=\"line\">        &#x2F;&#x2F; 关闭输出流，告知服务端消息已经发送完毕</span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\">        System.out.println(&quot;消息发送成功&quot;);</span><br><span class=\"line\">        BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">        String string &#x3D; reader.readLine();</span><br><span class=\"line\">        while (string !&#x3D; null) &#123;</span><br><span class=\"line\">            System.out.println(string);</span><br><span class=\"line\">            string &#x3D; reader.readLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为Socket是阻塞的，阻塞会发生多个地方，一个是accept方法，调用这个方法之后，服务端会一直等待，直到有客户端连接进来；第二个地方是流的读取，当服务端使用输入流读取了客户端发送的消息，而服务端没有标记消息已经发送完成，那么服务端就会一直等待，所以这里要使用<code>socket.shutdownOutput()</code>这个方法关闭客户端的输出流，告知服务端消息已经发送完成，后续的代码才会继续执行。</p>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzmhpu7sivj30g204c3yl.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzmhq9ydikj30gw06imxk.jpg\" alt=\"image\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1fzmhqjnnvrj30dv05wmxh.jpg\" alt=\"image\"></p>\n<h3 id=\"多线程处理\"><a href=\"#多线程处理\" class=\"headerlink\" title=\"多线程处理\"></a>多线程处理</h3><p>因为服务端是循环监听客户端的请求，那么当一个客户端建立连接，但是又长期通信的时候，其他客户端的请求将会全部阻塞，无法建立连接，所以这里改进了一下代码，使用多线程技术提高处理的效率。</p>\n<p>服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Server</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建ServerSocket实例,端口号设置为2333</span></span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">2333</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 循环监听客户端发来的请求</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器端已启动\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"正在监听请求...\"</span>);</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            <span class=\"comment\">// 将请求得到的socket句柄交由handle方法处理</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Server(socket)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将字节流转换成字符流</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));</span><br><span class=\"line\">            String string = reader.readLine();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (string != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println(string);</span><br><span class=\"line\">                string = reader.readLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\">            outputStream.write(<span class=\"string\">\"你好,这是服务器端回复的消息!\"</span>.getBytes());</span><br><span class=\"line\">            outputStream.flush();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>了解Socket对理解计算机的网络通信有更深的意义，只有掌握了应用的沟通方式才能更加得心应手的去使用代码控制它，Java对Socket的支持还是比较好的，提供了大量接口给开发者使用。</p>\n","site":{"data":{}},"excerpt":"<p>在网络编程中，我们经常提及socket，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信。</p>","more":"<h3 id=\"Java中基于TCP的Socket\"><a href=\"#Java中基于TCP的Socket\" class=\"headerlink\" title=\"Java中基于TCP的Socket\"></a>Java中基于TCP的Socket</h3><p>TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道。</p>\n<p>Java中基于TCP实现的套接字类有Socket类和ServerSocket类，ServerSocket类用于服务器端，监听请求，Socket是在连接建立时使用的，在连接成功时，应用程序的两端都会生成一个Socket实例，对这个实例进行操作就能实现服务端和客户端的通信了。</p>\n<h3 id=\"通信步骤\"><a href=\"#通信步骤\" class=\"headerlink\" title=\"通信步骤\"></a>通信步骤</h3><h4 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h4><ol>\n<li>创建ServerSocket对象，绑定监听端口号；</li>\n<li>通过<code>accept()</code>方法监听客户端请求；</li>\n<li>连接建立之后，通过输入流读取客户端发送的请求信息；</li>\n<li>通过输出流将响应信息发送到客户端；</li>\n<li>关闭连接。</li>\n</ol>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><ol>\n<li>创建Socket对象，指明需要连接的服务器的地址和端口号。</li>\n<li>连接建立后，通过输出流向服务器发送请求信息。</li>\n<li>通过输入流获取服务器响应的信息。</li>\n<li>关闭连接。</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建ServerSocket实例,端口号设置为2333</span></span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">2333</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 循环监听客户端发来的请求</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器端已启动\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"正在监听请求...\"</span>);</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            <span class=\"comment\">// 将请求得到的socket句柄交由handle方法处理</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Server().handle(socket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(Socket socket)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将字节流转换成字符流</span></span><br><span class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));</span><br><span class=\"line\">        String string = reader.readLine();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (string != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(string);</span><br><span class=\"line\">            string = reader.readLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\">        outputStream.write(<span class=\"string\">\"你好,这是服务器端回复的消息!\"</span>.getBytes());</span><br><span class=\"line\">        outputStream.flush();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        System.out.println(&quot;正在连接服务端...&quot;);</span><br><span class=\"line\">        Socket socket &#x3D; new Socket(&quot;127.0.0.1&quot;, 2333);</span><br><span class=\"line\">        OutputStream outputStream &#x3D; socket.getOutputStream();</span><br><span class=\"line\">        outputStream.write(&quot;你好,这是客户端发来的消息!&quot;.getBytes());</span><br><span class=\"line\">        outputStream.flush();</span><br><span class=\"line\">        &#x2F;&#x2F; 关闭输出流，告知服务端消息已经发送完毕</span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\">        System.out.println(&quot;消息发送成功&quot;);</span><br><span class=\"line\">        BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">        String string &#x3D; reader.readLine();</span><br><span class=\"line\">        while (string !&#x3D; null) &#123;</span><br><span class=\"line\">            System.out.println(string);</span><br><span class=\"line\">            string &#x3D; reader.readLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为Socket是阻塞的，阻塞会发生多个地方，一个是accept方法，调用这个方法之后，服务端会一直等待，直到有客户端连接进来；第二个地方是流的读取，当服务端使用输入流读取了客户端发送的消息，而服务端没有标记消息已经发送完成，那么服务端就会一直等待，所以这里要使用<code>socket.shutdownOutput()</code>这个方法关闭客户端的输出流，告知服务端消息已经发送完成，后续的代码才会继续执行。</p>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzmhpu7sivj30g204c3yl.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzmhq9ydikj30gw06imxk.jpg\" alt=\"image\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1fzmhqjnnvrj30dv05wmxh.jpg\" alt=\"image\"></p>\n<h3 id=\"多线程处理\"><a href=\"#多线程处理\" class=\"headerlink\" title=\"多线程处理\"></a>多线程处理</h3><p>因为服务端是循环监听客户端的请求，那么当一个客户端建立连接，但是又长期通信的时候，其他客户端的请求将会全部阻塞，无法建立连接，所以这里改进了一下代码，使用多线程技术提高处理的效率。</p>\n<p>服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Server</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建ServerSocket实例,端口号设置为2333</span></span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">2333</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 循环监听客户端发来的请求</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器端已启动\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"正在监听请求...\"</span>);</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            <span class=\"comment\">// 将请求得到的socket句柄交由handle方法处理</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Server(socket)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将字节流转换成字符流</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));</span><br><span class=\"line\">            String string = reader.readLine();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (string != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println(string);</span><br><span class=\"line\">                string = reader.readLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\">            outputStream.write(<span class=\"string\">\"你好,这是服务器端回复的消息!\"</span>.getBytes());</span><br><span class=\"line\">            outputStream.flush();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>了解Socket对理解计算机的网络通信有更深的意义，只有掌握了应用的沟通方式才能更加得心应手的去使用代码控制它，Java对Socket的支持还是比较好的，提供了大量接口给开发者使用。</p>"},{"title":"用Hexo搭建博客","date":"2018-08-21T07:43:27.000Z","comments":1,"_content":"\n作为一个开发者，拥有一个自己的博客来记录和分享自己的技术心得是非常有必要的，最近花了一些时间搭建了这个博客，做了一点简单的工作，在这篇文章中我会将博客的搭建过程完整的记录下来，算是一个总结，也可以帮助更多的人搭建属于自己的博客。\n\n<!--more-->\n\n### Hexo\n\nHexo是一款基于Node.js的静态博客框架，易于安装与部署，可以快速的搭建一个个人博客，并且可以托管在Github上，是搭建博客的不二之选。Hexo有自己的官方网站和文档 ([hexo.io](https://hexo.io))，可以了解到它的更多细节，同时它也是Github上的一个开源项目，参见：[Github/Hexo](https://github.com/hexojs/hexo),Hexo同时拥有众多的主题和插件，博主可以为自己的博客定义非常多个性的元素。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8wfxcj30hu07aabf.jpg)\n\n### Node.js\n\nHexo是基于Node.js的，所以需要安装Node.js，可以在官网下载到Node.js，下载地址：[Node.js](https://nodejs.org/zh-cn/download/)\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5dazkvkj30xc0ke3zo.jpg)\n\n注意安装Node.js的时候要配置好环境变量以及NPM，安装完成之后在命令行输入： `node -v`和`npm -v`，能正确显示它们的版本号即成功了。\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5db5cbkj3072034dfl.jpg)\n\n### Git\n\n因为会用到Github上的一些开源项目，博客系统也要托管到Github上，所以需要安装上Git用来做项目的同步，Git也可以去官网下载，下载地址：[Git](https://git-scm.com/download)\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8hjdjj30b40b4weq.jpg)\n\nGit安装完成之后，右键菜单会多出bash终端的选项\n\n![image](https://wx2.sinaimg.cn/large/005tkHc2gy1fzf5d8807gj306e0cb0t0.jpg)\n\n进入终端输入：`git --version`，正确显示git 的版本号即安装成功\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5d8mre8j30h603p0sq.jpg)\n\n### 安装Hexo\n\n环境安装配置好之后，就可以开始安装Hexo了，安装过程非常简单。在资源管理器中右键，打开bash终端，创建文件夹，并定位到文件夹位置。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5daljnlj30ca063q2x.jpg)\n\n\n\n运行`npm install -g hexo-cli`安装Hexo脚手架\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5dah33wj30xu08daan.jpg)\n\n运行`hexo init`初始化Hexo框架\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5da0widj30wl0ki40r.jpg)\n\n到这里Hexo的安装已经完成了\n\n### 启动Hexo\n\n安装完成之后，接下来介绍几个简单的命令，用以编辑和启动Hexo。\n\n```bash\n#编译博客\nhexo g\n#启动Hexo(-i绑定IP，-p绑定端口)\nhexo s [-i] [-p]\n#清理编译文件\nhexo clean\n#新建文章\nhexo new [post] \"postName\"\n```\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5da92xhj30pg0no0vc.jpg)\n\nHexo启动成功即可访问Hexo绑定的IP和端口查看博客了，默认的URL是：[http://localhost:4000](http://localhost:4000)\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d968q6j31170h0wjk.jpg)\n\n访问到如图所示页面即表示Hexo已成功部署并启动了。\n\n### Hexo文件结构\n\n用资源管理器打开博客目录，查看文件结构\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8d23zj306t07tjr9.jpg)\n\n\n\n```bash\n#简单介绍下目录构成\npublic：博客的发布文件，最终生成的文件\nscaffolds：创建文章的模板，可以自定义创建格式\nsource：文章的源代码文件，markdown文件\nthemes：Hexo的主题目录\n_config.yml：Hexo的主配置文件\n#每个主题里面也有一个_config.yml，我们称之为主题配置文件，之后会讲到\n```\n\n### 发表文章\n\n```bash\n#发表新文章\nhexo new [post] \"postName\"\n```\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2gy1fzf5daoig5j30kv02uaa0.jpg)\n\nHexo的文章编写是基于Markdown语法的，Markdown不过多介绍，想了解更多Markdown的知识，前往[维基百科-Markdown](https://zh.wikipedia.org/wiki/Markdown)。这里介绍一款非常好用的Markdown编辑器：[Typora](https://typora.io/)，可以前往官网下载，支持多平台运行，实时预览。用Typora打开刚刚新建的md文件，即可对文章进行编辑操作。\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg)\n\n编辑完成之后重新编译并启动Hexo即可查看刚发布的文章了。\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg)\n\n### 部署到Github\n\n安装 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)。\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\n修改配置。\n\n```bash\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n\n| 参数      | 描述                                                         |\n| --------- | ------------------------------------------------------------ |\n| `repo`    | 库（Repository）地址                                         |\n| `branch`  | 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 |\n| `message` | 自定义提交信息                                               |\n\n配置完成之后运行命令`hexo d`即可进行部署。\n\n### 更换主题\n\nHexo默认的主题并不美观，得益于Hexo庞大的主题库，我们可以使用自己喜欢的主题样式，并添加自定义的一些功能，这里我选用的是[NexT](https://theme-next.iissnan.com/)，这套主题简洁明了，非常不错。\n\n**获取主题：**在终端窗口下，定位到 Hexo 站点目录下。使用 `Git` checkout 代码：\n\n```bash\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n**使用主题：**与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 `theme` 字段，并将其值更改为 `next`。\n\n启用 NexT 主题\n\n```xml\ntheme: next\n```\n\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 `hexo clean` 来清除 Hexo 的缓存。编译并启动Hexo即可看到应用主题后的样式。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5das2kcj30pc0o7q3g.jpg)\n\n更多详细的主题配置请参阅NexT的官方文档：[主题配置](https://theme-next.iissnan.com/theme-settings.html)\n\n### 总结\n\nHexo的简单搭建部署就是这样，其他更多的一些设置会在之后的文章中补充。\n","source":"_posts/用Hexo搭建博客.md","raw":"---\ntitle: 用Hexo搭建博客\ndate: 2018-08-21 15:43:27\ntags: [Hexo]\ncategories: 记录\ncomments: true\n---\n\n作为一个开发者，拥有一个自己的博客来记录和分享自己的技术心得是非常有必要的，最近花了一些时间搭建了这个博客，做了一点简单的工作，在这篇文章中我会将博客的搭建过程完整的记录下来，算是一个总结，也可以帮助更多的人搭建属于自己的博客。\n\n<!--more-->\n\n### Hexo\n\nHexo是一款基于Node.js的静态博客框架，易于安装与部署，可以快速的搭建一个个人博客，并且可以托管在Github上，是搭建博客的不二之选。Hexo有自己的官方网站和文档 ([hexo.io](https://hexo.io))，可以了解到它的更多细节，同时它也是Github上的一个开源项目，参见：[Github/Hexo](https://github.com/hexojs/hexo),Hexo同时拥有众多的主题和插件，博主可以为自己的博客定义非常多个性的元素。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8wfxcj30hu07aabf.jpg)\n\n### Node.js\n\nHexo是基于Node.js的，所以需要安装Node.js，可以在官网下载到Node.js，下载地址：[Node.js](https://nodejs.org/zh-cn/download/)\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5dazkvkj30xc0ke3zo.jpg)\n\n注意安装Node.js的时候要配置好环境变量以及NPM，安装完成之后在命令行输入： `node -v`和`npm -v`，能正确显示它们的版本号即成功了。\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5db5cbkj3072034dfl.jpg)\n\n### Git\n\n因为会用到Github上的一些开源项目，博客系统也要托管到Github上，所以需要安装上Git用来做项目的同步，Git也可以去官网下载，下载地址：[Git](https://git-scm.com/download)\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8hjdjj30b40b4weq.jpg)\n\nGit安装完成之后，右键菜单会多出bash终端的选项\n\n![image](https://wx2.sinaimg.cn/large/005tkHc2gy1fzf5d8807gj306e0cb0t0.jpg)\n\n进入终端输入：`git --version`，正确显示git 的版本号即安装成功\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5d8mre8j30h603p0sq.jpg)\n\n### 安装Hexo\n\n环境安装配置好之后，就可以开始安装Hexo了，安装过程非常简单。在资源管理器中右键，打开bash终端，创建文件夹，并定位到文件夹位置。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5daljnlj30ca063q2x.jpg)\n\n\n\n运行`npm install -g hexo-cli`安装Hexo脚手架\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5dah33wj30xu08daan.jpg)\n\n运行`hexo init`初始化Hexo框架\n\n![image](https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5da0widj30wl0ki40r.jpg)\n\n到这里Hexo的安装已经完成了\n\n### 启动Hexo\n\n安装完成之后，接下来介绍几个简单的命令，用以编辑和启动Hexo。\n\n```bash\n#编译博客\nhexo g\n#启动Hexo(-i绑定IP，-p绑定端口)\nhexo s [-i] [-p]\n#清理编译文件\nhexo clean\n#新建文章\nhexo new [post] \"postName\"\n```\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5da92xhj30pg0no0vc.jpg)\n\nHexo启动成功即可访问Hexo绑定的IP和端口查看博客了，默认的URL是：[http://localhost:4000](http://localhost:4000)\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d968q6j31170h0wjk.jpg)\n\n访问到如图所示页面即表示Hexo已成功部署并启动了。\n\n### Hexo文件结构\n\n用资源管理器打开博客目录，查看文件结构\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8d23zj306t07tjr9.jpg)\n\n\n\n```bash\n#简单介绍下目录构成\npublic：博客的发布文件，最终生成的文件\nscaffolds：创建文章的模板，可以自定义创建格式\nsource：文章的源代码文件，markdown文件\nthemes：Hexo的主题目录\n_config.yml：Hexo的主配置文件\n#每个主题里面也有一个_config.yml，我们称之为主题配置文件，之后会讲到\n```\n\n### 发表文章\n\n```bash\n#发表新文章\nhexo new [post] \"postName\"\n```\n\n![image](https://wx4.sinaimg.cn/large/005tkHc2gy1fzf5daoig5j30kv02uaa0.jpg)\n\nHexo的文章编写是基于Markdown语法的，Markdown不过多介绍，想了解更多Markdown的知识，前往[维基百科-Markdown](https://zh.wikipedia.org/wiki/Markdown)。这里介绍一款非常好用的Markdown编辑器：[Typora](https://typora.io/)，可以前往官网下载，支持多平台运行，实时预览。用Typora打开刚刚新建的md文件，即可对文章进行编辑操作。\n\n![image](https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg)\n\n编辑完成之后重新编译并启动Hexo即可查看刚发布的文章了。\n\n![image](https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg)\n\n### 部署到Github\n\n安装 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)。\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\n修改配置。\n\n```bash\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n\n| 参数      | 描述                                                         |\n| --------- | ------------------------------------------------------------ |\n| `repo`    | 库（Repository）地址                                         |\n| `branch`  | 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 |\n| `message` | 自定义提交信息                                               |\n\n配置完成之后运行命令`hexo d`即可进行部署。\n\n### 更换主题\n\nHexo默认的主题并不美观，得益于Hexo庞大的主题库，我们可以使用自己喜欢的主题样式，并添加自定义的一些功能，这里我选用的是[NexT](https://theme-next.iissnan.com/)，这套主题简洁明了，非常不错。\n\n**获取主题：**在终端窗口下，定位到 Hexo 站点目录下。使用 `Git` checkout 代码：\n\n```bash\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n**使用主题：**与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 `theme` 字段，并将其值更改为 `next`。\n\n启用 NexT 主题\n\n```xml\ntheme: next\n```\n\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 `hexo clean` 来清除 Hexo 的缓存。编译并启动Hexo即可看到应用主题后的样式。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5das2kcj30pc0o7q3g.jpg)\n\n更多详细的主题配置请参阅NexT的官方文档：[主题配置](https://theme-next.iissnan.com/theme-settings.html)\n\n### 总结\n\nHexo的简单搭建部署就是这样，其他更多的一些设置会在之后的文章中补充。\n","slug":"用Hexo搭建博客","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kv001lw2pmgbcvadbp","content":"<p>作为一个开发者，拥有一个自己的博客来记录和分享自己的技术心得是非常有必要的，最近花了一些时间搭建了这个博客，做了一点简单的工作，在这篇文章中我会将博客的搭建过程完整的记录下来，算是一个总结，也可以帮助更多的人搭建属于自己的博客。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>Hexo是一款基于Node.js的静态博客框架，易于安装与部署，可以快速的搭建一个个人博客，并且可以托管在Github上，是搭建博客的不二之选。Hexo有自己的官方网站和文档 (<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo.io</a>)，可以了解到它的更多细节，同时它也是Github上的一个开源项目，参见：<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">Github/Hexo</a>,Hexo同时拥有众多的主题和插件，博主可以为自己的博客定义非常多个性的元素。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8wfxcj30hu07aabf.jpg\" alt=\"image\"></p>\n<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><p>Hexo是基于Node.js的，所以需要安装Node.js，可以在官网下载到Node.js，下载地址：<a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">Node.js</a></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5dazkvkj30xc0ke3zo.jpg\" alt=\"image\"></p>\n<p>注意安装Node.js的时候要配置好环境变量以及NPM，安装完成之后在命令行输入： <code>node -v</code>和<code>npm -v</code>，能正确显示它们的版本号即成功了。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5db5cbkj3072034dfl.jpg\" alt=\"image\"></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>因为会用到Github上的一些开源项目，博客系统也要托管到Github上，所以需要安装上Git用来做项目的同步，Git也可以去官网下载，下载地址：<a href=\"https://git-scm.com/download\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8hjdjj30b40b4weq.jpg\" alt=\"image\"></p>\n<p>Git安装完成之后，右键菜单会多出bash终端的选项</p>\n<p><img src=\"https://wx2.sinaimg.cn/large/005tkHc2gy1fzf5d8807gj306e0cb0t0.jpg\" alt=\"image\"></p>\n<p>进入终端输入：<code>git --version</code>，正确显示git 的版本号即安装成功</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5d8mre8j30h603p0sq.jpg\" alt=\"image\"></p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>环境安装配置好之后，就可以开始安装Hexo了，安装过程非常简单。在资源管理器中右键，打开bash终端，创建文件夹，并定位到文件夹位置。</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5daljnlj30ca063q2x.jpg\" alt=\"image\"></p>\n<p>运行<code>npm install -g hexo-cli</code>安装Hexo脚手架</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5dah33wj30xu08daan.jpg\" alt=\"image\"></p>\n<p>运行<code>hexo init</code>初始化Hexo框架</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5da0widj30wl0ki40r.jpg\" alt=\"image\"></p>\n<p>到这里Hexo的安装已经完成了</p>\n<h3 id=\"启动Hexo\"><a href=\"#启动Hexo\" class=\"headerlink\" title=\"启动Hexo\"></a>启动Hexo</h3><p>安装完成之后，接下来介绍几个简单的命令，用以编辑和启动Hexo。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#编译博客</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\">#启动Hexo(-i绑定IP，-p绑定端口)</span></span><br><span class=\"line\">hexo s [-i] [-p]</span><br><span class=\"line\"><span class=\"comment\">#清理编译文件</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new [post] <span class=\"string\">\"postName\"</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5da92xhj30pg0no0vc.jpg\" alt=\"image\"></p>\n<p>Hexo启动成功即可访问Hexo绑定的IP和端口查看博客了，默认的URL是：<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d968q6j31170h0wjk.jpg\" alt=\"image\"></p>\n<p>访问到如图所示页面即表示Hexo已成功部署并启动了。</p>\n<h3 id=\"Hexo文件结构\"><a href=\"#Hexo文件结构\" class=\"headerlink\" title=\"Hexo文件结构\"></a>Hexo文件结构</h3><p>用资源管理器打开博客目录，查看文件结构</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8d23zj306t07tjr9.jpg\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#简单介绍下目录构成</span></span><br><span class=\"line\">public：博客的发布文件，最终生成的文件</span><br><span class=\"line\">scaffolds：创建文章的模板，可以自定义创建格式</span><br><span class=\"line\"><span class=\"built_in\">source</span>：文章的源代码文件，markdown文件</span><br><span class=\"line\">themes：Hexo的主题目录</span><br><span class=\"line\">_config.yml：Hexo的主配置文件</span><br><span class=\"line\"><span class=\"comment\">#每个主题里面也有一个_config.yml，我们称之为主题配置文件，之后会讲到</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发表新文章</span></span><br><span class=\"line\">hexo new [post] <span class=\"string\">\"postName\"</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2gy1fzf5daoig5j30kv02uaa0.jpg\" alt=\"image\"></p>\n<p>Hexo的文章编写是基于Markdown语法的，Markdown不过多介绍，想了解更多Markdown的知识，前往<a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">维基百科-Markdown</a>。这里介绍一款非常好用的Markdown编辑器：<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>，可以前往官网下载，支持多平台运行，实时预览。用Typora打开刚刚新建的md文件，即可对文章进行编辑操作。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg\" alt=\"image\"></p>\n<p>编辑完成之后重新编译并启动Hexo即可查看刚发布的文章了。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg\" alt=\"image\"></p>\n<h3 id=\"部署到Github\"><a href=\"#部署到Github\" class=\"headerlink\" title=\"部署到Github\"></a>部署到Github</h3><p>安装 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>修改配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;repository url&gt;</span><br><span class=\"line\">  branch: [branch]</span><br><span class=\"line\">  message: [message]</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>repo</code></td>\n<td>库（Repository）地址</td>\n</tr>\n<tr>\n<td><code>branch</code></td>\n<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>自定义提交信息</td>\n</tr>\n</tbody></table>\n<p>配置完成之后运行命令<code>hexo d</code>即可进行部署。</p>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>Hexo默认的主题并不美观，得益于Hexo庞大的主题库，我们可以使用自己喜欢的主题样式，并添加自定义的一些功能，这里我选用的是<a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a>，这套主题简洁明了，非常不错。</p>\n<p><strong>获取主题：</strong>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用主题：</strong>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>\n<p>启用 NexT 主题</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。编译并启动Hexo即可看到应用主题后的样式。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5das2kcj30pc0o7q3g.jpg\" alt=\"image\"></p>\n<p>更多详细的主题配置请参阅NexT的官方文档：<a href=\"https://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">主题配置</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Hexo的简单搭建部署就是这样，其他更多的一些设置会在之后的文章中补充。</p>\n","site":{"data":{}},"excerpt":"<p>作为一个开发者，拥有一个自己的博客来记录和分享自己的技术心得是非常有必要的，最近花了一些时间搭建了这个博客，做了一点简单的工作，在这篇文章中我会将博客的搭建过程完整的记录下来，算是一个总结，也可以帮助更多的人搭建属于自己的博客。</p>","more":"<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>Hexo是一款基于Node.js的静态博客框架，易于安装与部署，可以快速的搭建一个个人博客，并且可以托管在Github上，是搭建博客的不二之选。Hexo有自己的官方网站和文档 (<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo.io</a>)，可以了解到它的更多细节，同时它也是Github上的一个开源项目，参见：<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">Github/Hexo</a>,Hexo同时拥有众多的主题和插件，博主可以为自己的博客定义非常多个性的元素。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8wfxcj30hu07aabf.jpg\" alt=\"image\"></p>\n<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><p>Hexo是基于Node.js的，所以需要安装Node.js，可以在官网下载到Node.js，下载地址：<a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">Node.js</a></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5dazkvkj30xc0ke3zo.jpg\" alt=\"image\"></p>\n<p>注意安装Node.js的时候要配置好环境变量以及NPM，安装完成之后在命令行输入： <code>node -v</code>和<code>npm -v</code>，能正确显示它们的版本号即成功了。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5db5cbkj3072034dfl.jpg\" alt=\"image\"></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>因为会用到Github上的一些开源项目，博客系统也要托管到Github上，所以需要安装上Git用来做项目的同步，Git也可以去官网下载，下载地址：<a href=\"https://git-scm.com/download\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5d8hjdjj30b40b4weq.jpg\" alt=\"image\"></p>\n<p>Git安装完成之后，右键菜单会多出bash终端的选项</p>\n<p><img src=\"https://wx2.sinaimg.cn/large/005tkHc2gy1fzf5d8807gj306e0cb0t0.jpg\" alt=\"image\"></p>\n<p>进入终端输入：<code>git --version</code>，正确显示git 的版本号即安装成功</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5d8mre8j30h603p0sq.jpg\" alt=\"image\"></p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>环境安装配置好之后，就可以开始安装Hexo了，安装过程非常简单。在资源管理器中右键，打开bash终端，创建文件夹，并定位到文件夹位置。</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1fzf5daljnlj30ca063q2x.jpg\" alt=\"image\"></p>\n<p>运行<code>npm install -g hexo-cli</code>安装Hexo脚手架</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5dah33wj30xu08daan.jpg\" alt=\"image\"></p>\n<p>运行<code>hexo init</code>初始化Hexo框架</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/005tkHc2gy1fzf5da0widj30wl0ki40r.jpg\" alt=\"image\"></p>\n<p>到这里Hexo的安装已经完成了</p>\n<h3 id=\"启动Hexo\"><a href=\"#启动Hexo\" class=\"headerlink\" title=\"启动Hexo\"></a>启动Hexo</h3><p>安装完成之后，接下来介绍几个简单的命令，用以编辑和启动Hexo。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#编译博客</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\">#启动Hexo(-i绑定IP，-p绑定端口)</span></span><br><span class=\"line\">hexo s [-i] [-p]</span><br><span class=\"line\"><span class=\"comment\">#清理编译文件</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new [post] <span class=\"string\">\"postName\"</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5da92xhj30pg0no0vc.jpg\" alt=\"image\"></p>\n<p>Hexo启动成功即可访问Hexo绑定的IP和端口查看博客了，默认的URL是：<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d968q6j31170h0wjk.jpg\" alt=\"image\"></p>\n<p>访问到如图所示页面即表示Hexo已成功部署并启动了。</p>\n<h3 id=\"Hexo文件结构\"><a href=\"#Hexo文件结构\" class=\"headerlink\" title=\"Hexo文件结构\"></a>Hexo文件结构</h3><p>用资源管理器打开博客目录，查看文件结构</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8d23zj306t07tjr9.jpg\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#简单介绍下目录构成</span></span><br><span class=\"line\">public：博客的发布文件，最终生成的文件</span><br><span class=\"line\">scaffolds：创建文章的模板，可以自定义创建格式</span><br><span class=\"line\"><span class=\"built_in\">source</span>：文章的源代码文件，markdown文件</span><br><span class=\"line\">themes：Hexo的主题目录</span><br><span class=\"line\">_config.yml：Hexo的主配置文件</span><br><span class=\"line\"><span class=\"comment\">#每个主题里面也有一个_config.yml，我们称之为主题配置文件，之后会讲到</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发表新文章</span></span><br><span class=\"line\">hexo new [post] <span class=\"string\">\"postName\"</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wx4.sinaimg.cn/large/005tkHc2gy1fzf5daoig5j30kv02uaa0.jpg\" alt=\"image\"></p>\n<p>Hexo的文章编写是基于Markdown语法的，Markdown不过多介绍，想了解更多Markdown的知识，前往<a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">维基百科-Markdown</a>。这里介绍一款非常好用的Markdown编辑器：<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>，可以前往官网下载，支持多平台运行，实时预览。用Typora打开刚刚新建的md文件，即可对文章进行编辑操作。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg\" alt=\"image\"></p>\n<p>编辑完成之后重新编译并启动Hexo即可查看刚发布的文章了。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005tkHc2gy1fzf5d8ptsvj30ix0cn749.jpg\" alt=\"image\"></p>\n<h3 id=\"部署到Github\"><a href=\"#部署到Github\" class=\"headerlink\" title=\"部署到Github\"></a>部署到Github</h3><p>安装 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>修改配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;repository url&gt;</span><br><span class=\"line\">  branch: [branch]</span><br><span class=\"line\">  message: [message]</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>repo</code></td>\n<td>库（Repository）地址</td>\n</tr>\n<tr>\n<td><code>branch</code></td>\n<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>自定义提交信息</td>\n</tr>\n</tbody></table>\n<p>配置完成之后运行命令<code>hexo d</code>即可进行部署。</p>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>Hexo默认的主题并不美观，得益于Hexo庞大的主题库，我们可以使用自己喜欢的主题样式，并添加自定义的一些功能，这里我选用的是<a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a>，这套主题简洁明了，非常不错。</p>\n<p><strong>获取主题：</strong>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用主题：</strong>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>\n<p>启用 NexT 主题</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。编译并启动Hexo即可看到应用主题后的样式。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1fzf5das2kcj30pc0o7q3g.jpg\" alt=\"image\"></p>\n<p>更多详细的主题配置请参阅NexT的官方文档：<a href=\"https://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">主题配置</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Hexo的简单搭建部署就是这样，其他更多的一些设置会在之后的文章中补充。</p>"},{"_content":"## Hexo博客部署恢复\n\n装系统之前先备份一下自己的hexo博客文件夹，现在就是借助这些文件恢复部署一下就好了。具体方法如下：\n\n一、安装 node.js 和 git for windows\n\n二、配置 git 个人信息，生成新的 ssh 密钥\n\n<!-- more -->\n\n```\ngit config --global user.name \"inkbottle\"\ngit config --global user.email \"inkbottle@outlook.com\"\nssh-keygen -t rsa -C \"inkbottle@outlook.com\"\n```\n\n你需要把邮件地址和用户名换成你自己的，然后一路回车，使用默认值即可。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，打开id_rsa.pub文件，复制里面的内容。\n\n三、将生成的ssh公钥（刚复制的内容）复制到Github的settings里面的ssh选项里去\n\n四、安装hexo：\n\n```\nnpm install hexo-cli -g\n```\n\n五、打开原来的hexo博客所在文件夹，只需保留_config.yml，theme/，source/，scaffolds/，package.json，.gitignore 这些项目，删除其他的文件。\n\n六、然后打开 git bush 运行命令：\n\n```\nnpm install\n```\n\n七、安装部署插件：\n\n```\nnpm install hexo-deployer-git --save //hexo d 部署到git插件\n```\n\n八、接下来直接hexo g hexo d试一下是否成功。\n\n```\nhexo g\nhexo d\n```\n\n博客部署恢复完成。\n\n## Hexo部署过程中的难点解决：\n\n1、如果博客有RSS订阅和站点地图功能，请在第七步安装下面两个插件，命令如下：\n\n```\nnpm install hexo-generator-feed --save  //RSS订阅插件\nnpm install hexo-generator-sitemap --save //站点地图插件\n```\n\n2、安装部署过程中，在git bash中使用hexo g或者hexo d等命令，会报错提示： Cannot find module ‘C:\\Program Files\\Git\\node_modules\\hexo-cli\\bin\\hexo’。\n\n如图所示：\n\n![photo](https://i.loli.net/2019/05/09/5cd447d94e80a.jpg)\n\n我当时的解决办法：\n在C盘用户目录下，找到这个文件夹：C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\hexo-cli。\n然后把node_modules这个文件夹复制到Git安装目录下（C:\\Program Files\\Git）即可。\n\n3、怎么用hexo上传一个README.md到github?\n因为README.md文件一执行hexo d命令之后，README文件就被渲染变为README.html文件。\n\n解决办法：\n在Hexo目录下的source根目录下添加一个 [README.md](http://readme.md/)；\n修改Hexo目录下的_config.yml，设置 skip_render: README.md保存退出即可；\n使用hexo d 命令就不会再渲染 [README.md](http://readme.md/) 这个文件了。\n\n原博文链接：[重装系统后，Hexo博客如何重新部署恢复](https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/)","source":"_posts/电脑重装系统后恢复hexo博客部署.md","raw":"## Hexo博客部署恢复\n\n装系统之前先备份一下自己的hexo博客文件夹，现在就是借助这些文件恢复部署一下就好了。具体方法如下：\n\n一、安装 node.js 和 git for windows\n\n二、配置 git 个人信息，生成新的 ssh 密钥\n\n<!-- more -->\n\n```\ngit config --global user.name \"inkbottle\"\ngit config --global user.email \"inkbottle@outlook.com\"\nssh-keygen -t rsa -C \"inkbottle@outlook.com\"\n```\n\n你需要把邮件地址和用户名换成你自己的，然后一路回车，使用默认值即可。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，打开id_rsa.pub文件，复制里面的内容。\n\n三、将生成的ssh公钥（刚复制的内容）复制到Github的settings里面的ssh选项里去\n\n四、安装hexo：\n\n```\nnpm install hexo-cli -g\n```\n\n五、打开原来的hexo博客所在文件夹，只需保留_config.yml，theme/，source/，scaffolds/，package.json，.gitignore 这些项目，删除其他的文件。\n\n六、然后打开 git bush 运行命令：\n\n```\nnpm install\n```\n\n七、安装部署插件：\n\n```\nnpm install hexo-deployer-git --save //hexo d 部署到git插件\n```\n\n八、接下来直接hexo g hexo d试一下是否成功。\n\n```\nhexo g\nhexo d\n```\n\n博客部署恢复完成。\n\n## Hexo部署过程中的难点解决：\n\n1、如果博客有RSS订阅和站点地图功能，请在第七步安装下面两个插件，命令如下：\n\n```\nnpm install hexo-generator-feed --save  //RSS订阅插件\nnpm install hexo-generator-sitemap --save //站点地图插件\n```\n\n2、安装部署过程中，在git bash中使用hexo g或者hexo d等命令，会报错提示： Cannot find module ‘C:\\Program Files\\Git\\node_modules\\hexo-cli\\bin\\hexo’。\n\n如图所示：\n\n![photo](https://i.loli.net/2019/05/09/5cd447d94e80a.jpg)\n\n我当时的解决办法：\n在C盘用户目录下，找到这个文件夹：C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\hexo-cli。\n然后把node_modules这个文件夹复制到Git安装目录下（C:\\Program Files\\Git）即可。\n\n3、怎么用hexo上传一个README.md到github?\n因为README.md文件一执行hexo d命令之后，README文件就被渲染变为README.html文件。\n\n解决办法：\n在Hexo目录下的source根目录下添加一个 [README.md](http://readme.md/)；\n修改Hexo目录下的_config.yml，设置 skip_render: README.md保存退出即可；\n使用hexo d 命令就不会再渲染 [README.md](http://readme.md/) 这个文件了。\n\n原博文链接：[重装系统后，Hexo博客如何重新部署恢复](https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/)","slug":"电脑重装系统后恢复hexo博客部署","published":1,"date":"2020-01-08T12:05:37.226Z","updated":"2020-01-05T15:32:14.000Z","title":"电脑重装系统后恢复hexo博客部署","comments":1,"layout":"post","photos":[],"link":"","_id":"ck55bv1kw001ow2pm9twwa6gi","content":"<h2 id=\"Hexo博客部署恢复\"><a href=\"#Hexo博客部署恢复\" class=\"headerlink\" title=\"Hexo博客部署恢复\"></a>Hexo博客部署恢复</h2><p>装系统之前先备份一下自己的hexo博客文件夹，现在就是借助这些文件恢复部署一下就好了。具体方法如下：</p>\n<p>一、安装 node.js 和 git for windows</p>\n<p>二、配置 git 个人信息，生成新的 ssh 密钥</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;inkbottle&quot;</span><br><span class=\"line\">git config --global user.email &quot;inkbottle@outlook.com&quot;</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;inkbottle@outlook.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>你需要把邮件地址和用户名换成你自己的，然后一路回车，使用默认值即可。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，打开id_rsa.pub文件，复制里面的内容。</p>\n<p>三、将生成的ssh公钥（刚复制的内容）复制到Github的settings里面的ssh选项里去</p>\n<p>四、安装hexo：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>五、打开原来的hexo博客所在文件夹，只需保留_config.yml，theme/，source/，scaffolds/，package.json，.gitignore 这些项目，删除其他的文件。</p>\n<p>六、然后打开 git bush 运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>七、安装部署插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save &#x2F;&#x2F;hexo d 部署到git插件</span><br></pre></td></tr></table></figure>\n\n<p>八、接下来直接hexo g hexo d试一下是否成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>博客部署恢复完成。</p>\n<h2 id=\"Hexo部署过程中的难点解决：\"><a href=\"#Hexo部署过程中的难点解决：\" class=\"headerlink\" title=\"Hexo部署过程中的难点解决：\"></a>Hexo部署过程中的难点解决：</h2><p>1、如果博客有RSS订阅和站点地图功能，请在第七步安装下面两个插件，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save  &#x2F;&#x2F;RSS订阅插件</span><br><span class=\"line\">npm install hexo-generator-sitemap --save &#x2F;&#x2F;站点地图插件</span><br></pre></td></tr></table></figure>\n\n<p>2、安装部署过程中，在git bash中使用hexo g或者hexo d等命令，会报错提示： Cannot find module ‘C:\\Program Files\\Git\\node_modules\\hexo-cli\\bin\\hexo’。</p>\n<p>如图所示：</p>\n<p><img src=\"https://i.loli.net/2019/05/09/5cd447d94e80a.jpg\" alt=\"photo\"></p>\n<p>我当时的解决办法：<br>在C盘用户目录下，找到这个文件夹：C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\hexo-cli。<br>然后把node_modules这个文件夹复制到Git安装目录下（C:\\Program Files\\Git）即可。</p>\n<p>3、怎么用hexo上传一个README.md到github?<br>因为README.md文件一执行hexo d命令之后，README文件就被渲染变为README.html文件。</p>\n<p>解决办法：<br>在Hexo目录下的source根目录下添加一个 <a href=\"http://readme.md/\" target=\"_blank\" rel=\"noopener\">README.md</a>；<br>修改Hexo目录下的_config.yml，设置 skip_render: README.md保存退出即可；<br>使用hexo d 命令就不会再渲染 <a href=\"http://readme.md/\" target=\"_blank\" rel=\"noopener\">README.md</a> 这个文件了。</p>\n<p>原博文链接：<a href=\"https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/\" target=\"_blank\" rel=\"noopener\">重装系统后，Hexo博客如何重新部署恢复</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Hexo博客部署恢复\"><a href=\"#Hexo博客部署恢复\" class=\"headerlink\" title=\"Hexo博客部署恢复\"></a>Hexo博客部署恢复</h2><p>装系统之前先备份一下自己的hexo博客文件夹，现在就是借助这些文件恢复部署一下就好了。具体方法如下：</p>\n<p>一、安装 node.js 和 git for windows</p>\n<p>二、配置 git 个人信息，生成新的 ssh 密钥</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;inkbottle&quot;</span><br><span class=\"line\">git config --global user.email &quot;inkbottle@outlook.com&quot;</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;inkbottle@outlook.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>你需要把邮件地址和用户名换成你自己的，然后一路回车，使用默认值即可。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，打开id_rsa.pub文件，复制里面的内容。</p>\n<p>三、将生成的ssh公钥（刚复制的内容）复制到Github的settings里面的ssh选项里去</p>\n<p>四、安装hexo：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>五、打开原来的hexo博客所在文件夹，只需保留_config.yml，theme/，source/，scaffolds/，package.json，.gitignore 这些项目，删除其他的文件。</p>\n<p>六、然后打开 git bush 运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>七、安装部署插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save &#x2F;&#x2F;hexo d 部署到git插件</span><br></pre></td></tr></table></figure>\n\n<p>八、接下来直接hexo g hexo d试一下是否成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>博客部署恢复完成。</p>\n<h2 id=\"Hexo部署过程中的难点解决：\"><a href=\"#Hexo部署过程中的难点解决：\" class=\"headerlink\" title=\"Hexo部署过程中的难点解决：\"></a>Hexo部署过程中的难点解决：</h2><p>1、如果博客有RSS订阅和站点地图功能，请在第七步安装下面两个插件，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save  &#x2F;&#x2F;RSS订阅插件</span><br><span class=\"line\">npm install hexo-generator-sitemap --save &#x2F;&#x2F;站点地图插件</span><br></pre></td></tr></table></figure>\n\n<p>2、安装部署过程中，在git bash中使用hexo g或者hexo d等命令，会报错提示： Cannot find module ‘C:\\Program Files\\Git\\node_modules\\hexo-cli\\bin\\hexo’。</p>\n<p>如图所示：</p>\n<p><img src=\"https://i.loli.net/2019/05/09/5cd447d94e80a.jpg\" alt=\"photo\"></p>\n<p>我当时的解决办法：<br>在C盘用户目录下，找到这个文件夹：C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\hexo-cli。<br>然后把node_modules这个文件夹复制到Git安装目录下（C:\\Program Files\\Git）即可。</p>\n<p>3、怎么用hexo上传一个README.md到github?<br>因为README.md文件一执行hexo d命令之后，README文件就被渲染变为README.html文件。</p>\n<p>解决办法：<br>在Hexo目录下的source根目录下添加一个 <a href=\"http://readme.md/\" target=\"_blank\" rel=\"noopener\">README.md</a>；<br>修改Hexo目录下的_config.yml，设置 skip_render: README.md保存退出即可；<br>使用hexo d 命令就不会再渲染 <a href=\"http://readme.md/\" target=\"_blank\" rel=\"noopener\">README.md</a> 这个文件了。</p>\n<p>原博文链接：<a href=\"https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/\" target=\"_blank\" rel=\"noopener\">重装系统后，Hexo博客如何重新部署恢复</a></p>"},{"title":"配置Github公钥","comments":1,"date":"2019-02-14T08:44:33.000Z","_content":"\n大多数 Git 服务器都会选择使用 SSH 公钥来进行授权,系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。\n\n<!--more-->\n\n### 公钥和私钥\n\nSSH公钥默认储存在用户的家路径的`.ssh`目录下，Windows为`C:\\Users\\用户名\\.ssh`目录，Linux为`~/.ssh`目录，下图为Windows下的文件列表。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1g06257oya9j30jy08p3yw.jpg)\n\n`id_rsa`为私钥文件，`id_rsa.pub`为公钥文件。\n\n### 生成公钥和私钥\n\n1. 确保家路径下没有`.ssh`目录，有则先删除该文件夹；\n2. 打开bash终端，运行`ssh-keygen`工具；\n3. 会有三次提示操作，第一次是确认生成密钥的目录，默认是家路径下的 `.ssh`目录，第二次和第三次是提示输入密码和确认密码，可以为空；\n4. 生成成功。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1g062genf7hj30sr0j5jvn.jpg)\n\n生成后的公钥大概就是这个样子：\n\n```markdown\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiupK6UEUhjsa/E7+lRx1WJpEE+arG6YiWJ5cdFCyHuXq3X+2anW7C68X6Wn41eivFmEcD4fXP8/ZM5x40spFfXsvE3qAAAZUxF9HDM0gj9zojaz9P1QtF1dqZKTiBszi9c0kPgb3iR24h6H+NzmX06dVp4PPv6Zlci7TEAf9gsFot1reEtT0Bp+jVivEutvz231A3pZcUBuYkGCXdfvw7gbT5NPFlVm8l+kY8xBbJ6sMXKWDO06Kx/aEpUbDHPsxlD4Vmu0A6NSjtxATjG9xEeaNHct2Ry6jpOWE28xIYYtS3b5FAx4k4XEULYWIMMersdwHA768LGnWibh9W9IUJ Glieen@Firefly\n```\n\n### 配置SSH到Github\n\n1. 登录Github并打开SSH配置链接：[Github-Keys](https://github.com/settings/keys)；\n2. 点击`New SSH Key`，Title可以随意命名，将公钥文件`id_rsa.pub`里的内容复制并粘贴到Key文本框中，点击`Add SSH Key`即可成功添加；\n3. 打开bash终端，输入：`ssh git@github.com`可以测试是否配置成功。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1g062nognw0j30mo07e3yz.jpg)\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1g062s45um3j30pp06omy7.jpg)\n\n","source":"_posts/配置Github公钥.md","raw":"---\ntitle: 配置Github公钥\ntags: [Git]\ncomments: true\ndate: 2019-02-14 16:44:33\ncategories: Git\n---\n\n大多数 Git 服务器都会选择使用 SSH 公钥来进行授权,系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。\n\n<!--more-->\n\n### 公钥和私钥\n\nSSH公钥默认储存在用户的家路径的`.ssh`目录下，Windows为`C:\\Users\\用户名\\.ssh`目录，Linux为`~/.ssh`目录，下图为Windows下的文件列表。\n\n![image](https://wx1.sinaimg.cn/large/005tkHc2gy1g06257oya9j30jy08p3yw.jpg)\n\n`id_rsa`为私钥文件，`id_rsa.pub`为公钥文件。\n\n### 生成公钥和私钥\n\n1. 确保家路径下没有`.ssh`目录，有则先删除该文件夹；\n2. 打开bash终端，运行`ssh-keygen`工具；\n3. 会有三次提示操作，第一次是确认生成密钥的目录，默认是家路径下的 `.ssh`目录，第二次和第三次是提示输入密码和确认密码，可以为空；\n4. 生成成功。\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1g062genf7hj30sr0j5jvn.jpg)\n\n生成后的公钥大概就是这个样子：\n\n```markdown\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiupK6UEUhjsa/E7+lRx1WJpEE+arG6YiWJ5cdFCyHuXq3X+2anW7C68X6Wn41eivFmEcD4fXP8/ZM5x40spFfXsvE3qAAAZUxF9HDM0gj9zojaz9P1QtF1dqZKTiBszi9c0kPgb3iR24h6H+NzmX06dVp4PPv6Zlci7TEAf9gsFot1reEtT0Bp+jVivEutvz231A3pZcUBuYkGCXdfvw7gbT5NPFlVm8l+kY8xBbJ6sMXKWDO06Kx/aEpUbDHPsxlD4Vmu0A6NSjtxATjG9xEeaNHct2Ry6jpOWE28xIYYtS3b5FAx4k4XEULYWIMMersdwHA768LGnWibh9W9IUJ Glieen@Firefly\n```\n\n### 配置SSH到Github\n\n1. 登录Github并打开SSH配置链接：[Github-Keys](https://github.com/settings/keys)；\n2. 点击`New SSH Key`，Title可以随意命名，将公钥文件`id_rsa.pub`里的内容复制并粘贴到Key文本框中，点击`Add SSH Key`即可成功添加；\n3. 打开bash终端，输入：`ssh git@github.com`可以测试是否配置成功。\n\n![image](https://wx3.sinaimg.cn/large/005tkHc2gy1g062nognw0j30mo07e3yz.jpg)\n\n![image](https://ws1.sinaimg.cn/large/005tkHc2gy1g062s45um3j30pp06omy7.jpg)\n\n","slug":"配置Github公钥","published":1,"updated":"2020-01-05T15:32:14.000Z","layout":"post","photos":[],"link":"","_id":"ck55bv1kx001sw2pm52mnab2k","content":"<p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权,系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"公钥和私钥\"><a href=\"#公钥和私钥\" class=\"headerlink\" title=\"公钥和私钥\"></a>公钥和私钥</h3><p>SSH公钥默认储存在用户的家路径的<code>.ssh</code>目录下，Windows为<code>C:\\Users\\用户名\\.ssh</code>目录，Linux为<code>~/.ssh</code>目录，下图为Windows下的文件列表。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1g06257oya9j30jy08p3yw.jpg\" alt=\"image\"></p>\n<p><code>id_rsa</code>为私钥文件，<code>id_rsa.pub</code>为公钥文件。</p>\n<h3 id=\"生成公钥和私钥\"><a href=\"#生成公钥和私钥\" class=\"headerlink\" title=\"生成公钥和私钥\"></a>生成公钥和私钥</h3><ol>\n<li>确保家路径下没有<code>.ssh</code>目录，有则先删除该文件夹；</li>\n<li>打开bash终端，运行<code>ssh-keygen</code>工具；</li>\n<li>会有三次提示操作，第一次是确认生成密钥的目录，默认是家路径下的 <code>.ssh</code>目录，第二次和第三次是提示输入密码和确认密码，可以为空；</li>\n<li>生成成功。</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1g062genf7hj30sr0j5jvn.jpg\" alt=\"image\"></p>\n<p>生成后的公钥大概就是这个样子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiupK6UEUhjsa/E7+lRx1WJpEE+arG6YiWJ5cdFCyHuXq3X+2anW7C68X6Wn41eivFmEcD4fXP8/ZM5x40spFfXsvE3qAAAZUxF9HDM0gj9zojaz9P1QtF1dqZKTiBszi9c0kPgb3iR24h6H+NzmX06dVp4PPv6Zlci7TEAf9gsFot1reEtT0Bp+jVivEutvz231A3pZcUBuYkGCXdfvw7gbT5NPFlVm8l+kY8xBbJ6sMXKWDO06Kx/aEpUbDHPsxlD4Vmu0A6NSjtxATjG9xEeaNHct2Ry6jpOWE28xIYYtS3b5FAx4k4XEULYWIMMersdwHA768LGnWibh9W9IUJ Glieen@Firefly</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置SSH到Github\"><a href=\"#配置SSH到Github\" class=\"headerlink\" title=\"配置SSH到Github\"></a>配置SSH到Github</h3><ol>\n<li>登录Github并打开SSH配置链接：<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">Github-Keys</a>；</li>\n<li>点击<code>New SSH Key</code>，Title可以随意命名，将公钥文件<code>id_rsa.pub</code>里的内容复制并粘贴到Key文本框中，点击<code>Add SSH Key</code>即可成功添加；</li>\n<li>打开bash终端，输入：<code>ssh git@github.com</code>可以测试是否配置成功。</li>\n</ol>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1g062nognw0j30mo07e3yz.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1g062s45um3j30pp06omy7.jpg\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权,系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。</p>","more":"<h3 id=\"公钥和私钥\"><a href=\"#公钥和私钥\" class=\"headerlink\" title=\"公钥和私钥\"></a>公钥和私钥</h3><p>SSH公钥默认储存在用户的家路径的<code>.ssh</code>目录下，Windows为<code>C:\\Users\\用户名\\.ssh</code>目录，Linux为<code>~/.ssh</code>目录，下图为Windows下的文件列表。</p>\n<p><img src=\"https://wx1.sinaimg.cn/large/005tkHc2gy1g06257oya9j30jy08p3yw.jpg\" alt=\"image\"></p>\n<p><code>id_rsa</code>为私钥文件，<code>id_rsa.pub</code>为公钥文件。</p>\n<h3 id=\"生成公钥和私钥\"><a href=\"#生成公钥和私钥\" class=\"headerlink\" title=\"生成公钥和私钥\"></a>生成公钥和私钥</h3><ol>\n<li>确保家路径下没有<code>.ssh</code>目录，有则先删除该文件夹；</li>\n<li>打开bash终端，运行<code>ssh-keygen</code>工具；</li>\n<li>会有三次提示操作，第一次是确认生成密钥的目录，默认是家路径下的 <code>.ssh</code>目录，第二次和第三次是提示输入密码和确认密码，可以为空；</li>\n<li>生成成功。</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1g062genf7hj30sr0j5jvn.jpg\" alt=\"image\"></p>\n<p>生成后的公钥大概就是这个样子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiupK6UEUhjsa/E7+lRx1WJpEE+arG6YiWJ5cdFCyHuXq3X+2anW7C68X6Wn41eivFmEcD4fXP8/ZM5x40spFfXsvE3qAAAZUxF9HDM0gj9zojaz9P1QtF1dqZKTiBszi9c0kPgb3iR24h6H+NzmX06dVp4PPv6Zlci7TEAf9gsFot1reEtT0Bp+jVivEutvz231A3pZcUBuYkGCXdfvw7gbT5NPFlVm8l+kY8xBbJ6sMXKWDO06Kx/aEpUbDHPsxlD4Vmu0A6NSjtxATjG9xEeaNHct2Ry6jpOWE28xIYYtS3b5FAx4k4XEULYWIMMersdwHA768LGnWibh9W9IUJ Glieen@Firefly</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置SSH到Github\"><a href=\"#配置SSH到Github\" class=\"headerlink\" title=\"配置SSH到Github\"></a>配置SSH到Github</h3><ol>\n<li>登录Github并打开SSH配置链接：<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">Github-Keys</a>；</li>\n<li>点击<code>New SSH Key</code>，Title可以随意命名，将公钥文件<code>id_rsa.pub</code>里的内容复制并粘贴到Key文本框中，点击<code>Add SSH Key</code>即可成功添加；</li>\n<li>打开bash终端，输入：<code>ssh git@github.com</code>可以测试是否配置成功。</li>\n</ol>\n<p><img src=\"https://wx3.sinaimg.cn/large/005tkHc2gy1g062nognw0j30mo07e3yz.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005tkHc2gy1g062s45um3j30pp06omy7.jpg\" alt=\"image\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck55bv1jv0000w2pmbrjjak0n","category_id":"ck55bv1k50004w2pm1tom877d","_id":"ck55bv1ke000fw2pm1tjb2884"},{"post_id":"ck55bv1k90009w2pm2cnphhb7","category_id":"ck55bv1k50004w2pm1tom877d","_id":"ck55bv1kg000iw2pmakj127wx"},{"post_id":"ck55bv1k20002w2pm2j5vcbhi","category_id":"ck55bv1k50004w2pm1tom877d","_id":"ck55bv1ki000mw2pm7j4cge3f"},{"post_id":"ck55bv1k60006w2pm5wt9btdu","category_id":"ck55bv1k50004w2pm1tom877d","_id":"ck55bv1kk000rw2pmdppa69gp"},{"post_id":"ck55bv1kc000cw2pmg6aodhtr","category_id":"ck55bv1kh000lw2pm4cqg7r7a","_id":"ck55bv1kn000zw2pm77o289ia"},{"post_id":"ck55bv1kd000dw2pm0yitep4o","category_id":"ck55bv1kh000lw2pm4cqg7r7a","_id":"ck55bv1kp0013w2pmhxo1djmf"},{"post_id":"ck55bv1kg000hw2pmgfme0qtc","category_id":"ck55bv1km000yw2pmbi399pud","_id":"ck55bv1ks001bw2pm3ywa0l0z"},{"post_id":"ck55bv1ko0012w2pm21fo4dzf","category_id":"ck55bv1kh000lw2pm4cqg7r7a","_id":"ck55bv1kt001fw2pmdsck66xd"},{"post_id":"ck55bv1kh000kw2pmf3qx3aov","category_id":"ck55bv1kp0015w2pm2bxid0z8","_id":"ck55bv1ku001kw2pmhrmm6sze"},{"post_id":"ck55bv1kq0018w2pm720i4oi9","category_id":"ck55bv1k50004w2pm1tom877d","_id":"ck55bv1kv001nw2pm7xhj7og9"},{"post_id":"ck55bv1ks001dw2pm1bsh5zkn","category_id":"ck55bv1k50004w2pm1tom877d","_id":"ck55bv1kw001qw2pmapj93hde"},{"post_id":"ck55bv1ki000pw2pmg74x43eo","category_id":"ck55bv1kp0015w2pm2bxid0z8","_id":"ck55bv1kz001vw2pm313p3eb8"},{"post_id":"ck55bv1kt001gw2pm0hys1vzw","category_id":"ck55bv1k50004w2pm1tom877d","_id":"ck55bv1kz001xw2pm0tyw4u3c"},{"post_id":"ck55bv1kj000qw2pmbcdf0sos","category_id":"ck55bv1ku001jw2pm3ki3f0da","_id":"ck55bv1l00021w2pm9h1q6k88"},{"post_id":"ck55bv1kl000uw2pmfall42fx","category_id":"ck55bv1ku001jw2pm3ki3f0da","_id":"ck55bv1l30024w2pm6cs3e0yi"},{"post_id":"ck55bv1km000ww2pm1t5of2vg","category_id":"ck55bv1l0001zw2pmb73ihho4","_id":"ck55bv1l40029w2pm7y4hewxo"},{"post_id":"ck55bv1kn0011w2pm6il234i8","category_id":"ck55bv1l30025w2pmb6gr323x","_id":"ck55bv1l6002dw2pma9ika23m"},{"post_id":"ck55bv1kq0016w2pm6mop4yhr","category_id":"ck55bv1l30025w2pmb6gr323x","_id":"ck55bv1l7002hw2pmehed8yrh"},{"post_id":"ck55bv1kv001lw2pmgbcvadbp","category_id":"ck55bv1l30025w2pmb6gr323x","_id":"ck55bv1l7002jw2pm8tc8d20d"},{"post_id":"ck55bv1kx001sw2pm52mnab2k","category_id":"ck55bv1l6002gw2pmakvdcuxb","_id":"ck55bv1l9002lw2pm6b6z5i1o"}],"PostTag":[{"post_id":"ck55bv1jv0000w2pmbrjjak0n","tag_id":"ck55bv1k60005w2pm5huugxp9","_id":"ck55bv1kg000jw2pm4bpy857r"},{"post_id":"ck55bv1jv0000w2pmbrjjak0n","tag_id":"ck55bv1ka000bw2pm9r4g19r4","_id":"ck55bv1ki000nw2pmcuphgpcp"},{"post_id":"ck55bv1k20002w2pm2j5vcbhi","tag_id":"ck55bv1k60005w2pm5huugxp9","_id":"ck55bv1kl000vw2pm7a61ewsm"},{"post_id":"ck55bv1k20002w2pm2j5vcbhi","tag_id":"ck55bv1ka000bw2pm9r4g19r4","_id":"ck55bv1km000xw2pmd96d15av"},{"post_id":"ck55bv1k60006w2pm5wt9btdu","tag_id":"ck55bv1k60005w2pm5huugxp9","_id":"ck55bv1kq0017w2pm000oduwp"},{"post_id":"ck55bv1k60006w2pm5wt9btdu","tag_id":"ck55bv1ka000bw2pm9r4g19r4","_id":"ck55bv1kr0019w2pmdyscgpxr"},{"post_id":"ck55bv1kq0016w2pm6mop4yhr","tag_id":"ck55bv1k60005w2pm5huugxp9","_id":"ck55bv1kt001ew2pm1i6gerla"},{"post_id":"ck55bv1kq0016w2pm6mop4yhr","tag_id":"ck55bv1ka000bw2pm9r4g19r4","_id":"ck55bv1ku001hw2pm4lo430nx"},{"post_id":"ck55bv1k90009w2pm2cnphhb7","tag_id":"ck55bv1k60005w2pm5huugxp9","_id":"ck55bv1kv001mw2pmfr0q0eui"},{"post_id":"ck55bv1k90009w2pm2cnphhb7","tag_id":"ck55bv1ka000bw2pm9r4g19r4","_id":"ck55bv1kw001pw2pmeoudc8cv"},{"post_id":"ck55bv1ks001dw2pm1bsh5zkn","tag_id":"ck55bv1k60005w2pm5huugxp9","_id":"ck55bv1ky001uw2pm0biz2fkr"},{"post_id":"ck55bv1ks001dw2pm1bsh5zkn","tag_id":"ck55bv1ka000bw2pm9r4g19r4","_id":"ck55bv1kz001ww2pmfabtb6sp"},{"post_id":"ck55bv1kc000cw2pmg6aodhtr","tag_id":"ck55bv1kr001aw2pm7m847vub","_id":"ck55bv1l00020w2pmcx257kou"},{"post_id":"ck55bv1kc000cw2pmg6aodhtr","tag_id":"ck55bv1ku001iw2pm2ndwb06s","_id":"ck55bv1l00022w2pm79885r6f"},{"post_id":"ck55bv1kd000dw2pm0yitep4o","tag_id":"ck55bv1kr001aw2pm7m847vub","_id":"ck55bv1l40026w2pmb8wgcbot"},{"post_id":"ck55bv1kd000dw2pm0yitep4o","tag_id":"ck55bv1ku001iw2pm2ndwb06s","_id":"ck55bv1l40027w2pmckinha2v"},{"post_id":"ck55bv1kg000hw2pmgfme0qtc","tag_id":"ck55bv1l30023w2pm44ulckks","_id":"ck55bv1l6002ew2pmfhny5lfm"},{"post_id":"ck55bv1kg000hw2pmgfme0qtc","tag_id":"ck55bv1l40028w2pmgnfw732c","_id":"ck55bv1l6002fw2pm1to05x83"},{"post_id":"ck55bv1kh000kw2pmf3qx3aov","tag_id":"ck55bv1l5002bw2pm2ln01nhc","_id":"ck55bv1l9002nw2pm2jr4bcbi"},{"post_id":"ck55bv1kh000kw2pmf3qx3aov","tag_id":"ck55bv1l7002iw2pmar2x31y1","_id":"ck55bv1la002ow2pme1m06lce"},{"post_id":"ck55bv1kh000kw2pmf3qx3aov","tag_id":"ck55bv1l7002kw2pm6tbd9ir7","_id":"ck55bv1la002qw2pm9f0sh6sb"},{"post_id":"ck55bv1ki000pw2pmg74x43eo","tag_id":"ck55bv1l5002bw2pm2ln01nhc","_id":"ck55bv1la002tw2pma3se22ga"},{"post_id":"ck55bv1ki000pw2pmg74x43eo","tag_id":"ck55bv1l7002iw2pmar2x31y1","_id":"ck55bv1lb002uw2pm48d0euv8"},{"post_id":"ck55bv1ki000pw2pmg74x43eo","tag_id":"ck55bv1la002rw2pm6r017vwe","_id":"ck55bv1lb002ww2pmejuh8ywh"},{"post_id":"ck55bv1kj000qw2pmbcdf0sos","tag_id":"ck55bv1la002sw2pm93ywdqf3","_id":"ck55bv1lb002yw2pmfub35dzt"},{"post_id":"ck55bv1kj000qw2pmbcdf0sos","tag_id":"ck55bv1lb002vw2pmghongjag","_id":"ck55bv1lb002zw2pme4hmbjb3"},{"post_id":"ck55bv1kl000uw2pmfall42fx","tag_id":"ck55bv1la002sw2pm93ywdqf3","_id":"ck55bv1lc0032w2pmb20mbhvv"},{"post_id":"ck55bv1kl000uw2pmfall42fx","tag_id":"ck55bv1lb002vw2pmghongjag","_id":"ck55bv1lc0033w2pm6or57262"},{"post_id":"ck55bv1km000ww2pm1t5of2vg","tag_id":"ck55bv1lc0031w2pmehbr67ev","_id":"ck55bv1lc0035w2pm1nrpb22l"},{"post_id":"ck55bv1kn0011w2pm6il234i8","tag_id":"ck55bv1lc0034w2pm9ttehssl","_id":"ck55bv1ld0038w2pmd6e38r66"},{"post_id":"ck55bv1kn0011w2pm6il234i8","tag_id":"ck55bv1lc0036w2pm1p4f5njv","_id":"ck55bv1ld0039w2pm023n3tw7"},{"post_id":"ck55bv1ko0012w2pm21fo4dzf","tag_id":"ck55bv1ku001iw2pm2ndwb06s","_id":"ck55bv1le003cw2pmb0jihjdg"},{"post_id":"ck55bv1ko0012w2pm21fo4dzf","tag_id":"ck55bv1kr001aw2pm7m847vub","_id":"ck55bv1le003dw2pmgrh306b6"},{"post_id":"ck55bv1kq0018w2pm720i4oi9","tag_id":"ck55bv1k60005w2pm5huugxp9","_id":"ck55bv1le003fw2pmhz3yhyi7"},{"post_id":"ck55bv1kq0018w2pm720i4oi9","tag_id":"ck55bv1ld003bw2pm6kyv7jki","_id":"ck55bv1le003gw2pm977yg29z"},{"post_id":"ck55bv1kt001gw2pm0hys1vzw","tag_id":"ck55bv1le003ew2pmg99yb4rx","_id":"ck55bv1lf003iw2pmdnfe2ks2"},{"post_id":"ck55bv1kv001lw2pmgbcvadbp","tag_id":"ck55bv1le003hw2pmg71kebfo","_id":"ck55bv1lf003kw2pmedht5odp"},{"post_id":"ck55bv1kx001sw2pm52mnab2k","tag_id":"ck55bv1lf003jw2pm5w7zcvmn","_id":"ck55bv1lf003lw2pmclt21ha2"}],"Tag":[{"name":"Java","_id":"ck55bv1k60005w2pm5huugxp9"},{"name":"基础知识","_id":"ck55bv1ka000bw2pm9r4g19r4"},{"name":"Linux","_id":"ck55bv1kr001aw2pm7m847vub"},{"name":"Ubuntu","_id":"ck55bv1ku001iw2pm2ndwb06s"},{"name":"MySQL","_id":"ck55bv1l30023w2pm44ulckks"},{"name":"数据库","_id":"ck55bv1l40028w2pmgnfw732c"},{"name":"Spring","_id":"ck55bv1l5002bw2pm2ln01nhc"},{"name":"SpringBoot","_id":"ck55bv1l7002iw2pmar2x31y1"},{"name":"AOP","_id":"ck55bv1l7002kw2pm6tbd9ir7"},{"name":"异常","_id":"ck55bv1la002rw2pm6r017vwe"},{"name":"Windows","_id":"ck55bv1la002sw2pm93ywdqf3"},{"name":"系统","_id":"ck55bv1lb002vw2pmghongjag"},{"name":"javap","_id":"ck55bv1lc0031w2pmehbr67ev"},{"name":"Excle","_id":"ck55bv1lc0034w2pm9ttehssl"},{"name":"POI","_id":"ck55bv1lc0036w2pm1p4f5njv"},{"name":"锁","_id":"ck55bv1ld003bw2pm6kyv7jki"},{"name":"Socket","_id":"ck55bv1le003ew2pmg99yb4rx"},{"name":"Hexo","_id":"ck55bv1le003hw2pmg71kebfo"},{"name":"Git","_id":"ck55bv1lf003jw2pm5w7zcvmn"}]}}